# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: db.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='db.proto',
  package='models',
  syntax='proto3',
  serialized_pb=_b('\n\x08\x64\x62.proto\x12\x06models\"\x1c\n\nSqlRequest\x12\x0e\n\x06SqlStr\x18\x01 \x01(\t\"\'\n\x12SqlExecuteResponse\x12\x11\n\tErrorCode\x18\x01 \x01(\x05\"L\n\x10SqlQueryResponse\x12\x11\n\tErrorCode\x18\x01 \x01(\x05\x12%\n\tFieldData\x18\x02 \x03(\x0b\x32\x12.models.MapMessage\"$\n\x10MetaQueryRequest\x12\x10\n\x08MetaBody\x18\x01 \x01(\x0c\"M\n\x11MetaQueryResponse\x12\x11\n\tErrorCode\x18\x01 \x01(\x05\x12%\n\tFieldData\x18\x02 \x03(\x0b\x32\x12.models.MapMessage\"e\n\nMapMessage\x12*\n\x04\x44\x61ta\x18\x01 \x03(\x0b\x32\x1c.models.MapMessage.DataEntry\x1a+\n\tDataEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"c\n\x06Result\x12*\n\x06Result\x18\x01 \x03(\x0b\x32\x1a.models.Result.ResultEntry\x1a-\n\x0bResultEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"U\n\x12MetaExecuteRequest\x12\x0b\n\x03Tag\x18\x01 \x01(\t\x12 \n\x08MetaOpts\x18\x02 \x01(\x0e\x32\x0e.models.DBOpts\x12\x10\n\x08MetaBody\x18\x03 \x01(\x0c\"(\n\x13MetaExecuteResponse\x12\x11\n\tErrorCode\x18\x01 \x01(\x05\"V\n\x0fSetCacheRequest\x12\x0b\n\x03Tag\x18\x01 \x01(\t\x12\x10\n\x08\x43\x61\x63heSql\x18\x02 \x01(\t\x12\x0f\n\x07GroupBy\x18\x03 \x01(\t\x12\x13\n\x0bRefreshIntv\x18\x04 \x01(\x05\"%\n\x10SetCacheResponse\x12\x11\n\tErrorCode\x18\x01 \x01(\x05\"D\n\x0fGetCacheRequest\x12\x0f\n\x07\x43\x61\x63heId\x18\x01 \x01(\t\x12\x0f\n\x07GroupId\x18\x02 \x01(\t\x12\x0f\n\x07ValueId\x18\x03 \x01(\t\"L\n\x10GetCacheResponse\x12\x11\n\tErrorCode\x18\x01 \x01(\x05\x12%\n\tFieldData\x18\x02 \x03(\x0b\x32\x12.models.MapMessage*G\n\x06\x44\x42Type\x12\x13\n\x0f\x44\x42_Type_Default\x10\x00\x12\x14\n\x10\x44\x42_Type_Postgres\x10\x01\x12\x12\n\x0e\x44\x42_Type_Hanyun\x10\x02*\x85\x02\n\x06\x44\x42Opts\x12\x13\n\x0f\x44\x42_Opts_Unknown\x10\x00\x12\x12\n\x0e\x44\x42_Opts_Insert\x10\x01\x12\x12\n\x0e\x44\x42_Opts_Delete\x10\x02\x12\x12\n\x0e\x44\x42_Opts_Update\x10\x03\x12\x12\n\x0e\x44\x42_Opts_Search\x10\x04\x12\x11\n\rDB_Opts_Count\x10\x05\x12\x1c\n\x18\x44\x42_Opts_Insert_Or_Update\x10\x06\x12\x18\n\x14\x44\x42_Opts_Batch_Insert\x10\x10\x12\"\n\x1e\x44\x42_Opts_Batch_Insert_Or_Update\x10\x11\x12\x12\n\x0e\x44\x42_Opts_NextId\x10 \x12\x13\n\x0f\x44\x42_Opts_NextIds\x10!2\xab\x03\n\x0f\x44\x61tabaseService\x12>\n\nExecuteSql\x12\x12.models.SqlRequest\x1a\x1a.models.SqlExecuteResponse\"\x00\x12:\n\x08QuerySql\x12\x12.models.SqlRequest\x1a\x18.models.SqlQueryResponse\"\x00\x12H\n\x0b\x45xecuteMeta\x12\x1a.models.MetaExecuteRequest\x1a\x1b.models.MetaExecuteResponse\"\x00\x12\x42\n\tQueryMeta\x12\x18.models.MetaQueryRequest\x1a\x19.models.MetaQueryResponse\"\x00\x12\x43\n\x0cSetCacheMeta\x12\x17.models.SetCacheRequest\x1a\x18.models.SetCacheResponse\"\x00\x12I\n\x12GetCachedFieldData\x12\x17.models.GetCacheRequest\x1a\x18.models.GetCacheResponse\"\x00\x62\x06proto3')
)

_DBTYPE = _descriptor.EnumDescriptor(
  name='DBType',
  full_name='models.DBType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DB_Type_Default', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Type_Postgres', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Type_Hanyun', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=894,
  serialized_end=965,
)
_sym_db.RegisterEnumDescriptor(_DBTYPE)

DBType = enum_type_wrapper.EnumTypeWrapper(_DBTYPE)
_DBOPTS = _descriptor.EnumDescriptor(
  name='DBOpts',
  full_name='models.DBOpts',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_Unknown', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_Insert', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_Delete', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_Update', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_Search', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_Count', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_Insert_Or_Update', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_Batch_Insert', index=7, number=16,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_Batch_Insert_Or_Update', index=8, number=17,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_NextId', index=9, number=32,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB_Opts_NextIds', index=10, number=33,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=968,
  serialized_end=1229,
)
_sym_db.RegisterEnumDescriptor(_DBOPTS)

DBOpts = enum_type_wrapper.EnumTypeWrapper(_DBOPTS)
DB_Type_Default = 0
DB_Type_Postgres = 1
DB_Type_Hanyun = 2
DB_Opts_Unknown = 0
DB_Opts_Insert = 1
DB_Opts_Delete = 2
DB_Opts_Update = 3
DB_Opts_Search = 4
DB_Opts_Count = 5
DB_Opts_Insert_Or_Update = 6
DB_Opts_Batch_Insert = 16
DB_Opts_Batch_Insert_Or_Update = 17
DB_Opts_NextId = 32
DB_Opts_NextIds = 33



_SQLREQUEST = _descriptor.Descriptor(
  name='SqlRequest',
  full_name='models.SqlRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='SqlStr', full_name='models.SqlRequest.SqlStr', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=20,
  serialized_end=48,
)


_SQLEXECUTERESPONSE = _descriptor.Descriptor(
  name='SqlExecuteResponse',
  full_name='models.SqlExecuteResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ErrorCode', full_name='models.SqlExecuteResponse.ErrorCode', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=50,
  serialized_end=89,
)


_SQLQUERYRESPONSE = _descriptor.Descriptor(
  name='SqlQueryResponse',
  full_name='models.SqlQueryResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ErrorCode', full_name='models.SqlQueryResponse.ErrorCode', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='FieldData', full_name='models.SqlQueryResponse.FieldData', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=91,
  serialized_end=167,
)


_METAQUERYREQUEST = _descriptor.Descriptor(
  name='MetaQueryRequest',
  full_name='models.MetaQueryRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='MetaBody', full_name='models.MetaQueryRequest.MetaBody', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=169,
  serialized_end=205,
)


_METAQUERYRESPONSE = _descriptor.Descriptor(
  name='MetaQueryResponse',
  full_name='models.MetaQueryResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ErrorCode', full_name='models.MetaQueryResponse.ErrorCode', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='FieldData', full_name='models.MetaQueryResponse.FieldData', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=207,
  serialized_end=284,
)


_MAPMESSAGE_DATAENTRY = _descriptor.Descriptor(
  name='DataEntry',
  full_name='models.MapMessage.DataEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='models.MapMessage.DataEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='models.MapMessage.DataEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=344,
  serialized_end=387,
)

_MAPMESSAGE = _descriptor.Descriptor(
  name='MapMessage',
  full_name='models.MapMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='Data', full_name='models.MapMessage.Data', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_MAPMESSAGE_DATAENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=286,
  serialized_end=387,
)


_RESULT_RESULTENTRY = _descriptor.Descriptor(
  name='ResultEntry',
  full_name='models.Result.ResultEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='models.Result.ResultEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='models.Result.ResultEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=443,
  serialized_end=488,
)

_RESULT = _descriptor.Descriptor(
  name='Result',
  full_name='models.Result',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='Result', full_name='models.Result.Result', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_RESULT_RESULTENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=389,
  serialized_end=488,
)


_METAEXECUTEREQUEST = _descriptor.Descriptor(
  name='MetaExecuteRequest',
  full_name='models.MetaExecuteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='Tag', full_name='models.MetaExecuteRequest.Tag', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='MetaOpts', full_name='models.MetaExecuteRequest.MetaOpts', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='MetaBody', full_name='models.MetaExecuteRequest.MetaBody', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=490,
  serialized_end=575,
)


_METAEXECUTERESPONSE = _descriptor.Descriptor(
  name='MetaExecuteResponse',
  full_name='models.MetaExecuteResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ErrorCode', full_name='models.MetaExecuteResponse.ErrorCode', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=577,
  serialized_end=617,
)


_SETCACHEREQUEST = _descriptor.Descriptor(
  name='SetCacheRequest',
  full_name='models.SetCacheRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='Tag', full_name='models.SetCacheRequest.Tag', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='CacheSql', full_name='models.SetCacheRequest.CacheSql', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='GroupBy', full_name='models.SetCacheRequest.GroupBy', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='RefreshIntv', full_name='models.SetCacheRequest.RefreshIntv', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=619,
  serialized_end=705,
)


_SETCACHERESPONSE = _descriptor.Descriptor(
  name='SetCacheResponse',
  full_name='models.SetCacheResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ErrorCode', full_name='models.SetCacheResponse.ErrorCode', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=707,
  serialized_end=744,
)


_GETCACHEREQUEST = _descriptor.Descriptor(
  name='GetCacheRequest',
  full_name='models.GetCacheRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='CacheId', full_name='models.GetCacheRequest.CacheId', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='GroupId', full_name='models.GetCacheRequest.GroupId', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ValueId', full_name='models.GetCacheRequest.ValueId', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=746,
  serialized_end=814,
)


_GETCACHERESPONSE = _descriptor.Descriptor(
  name='GetCacheResponse',
  full_name='models.GetCacheResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ErrorCode', full_name='models.GetCacheResponse.ErrorCode', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='FieldData', full_name='models.GetCacheResponse.FieldData', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=816,
  serialized_end=892,
)

_SQLQUERYRESPONSE.fields_by_name['FieldData'].message_type = _MAPMESSAGE
_METAQUERYRESPONSE.fields_by_name['FieldData'].message_type = _MAPMESSAGE
_MAPMESSAGE_DATAENTRY.containing_type = _MAPMESSAGE
_MAPMESSAGE.fields_by_name['Data'].message_type = _MAPMESSAGE_DATAENTRY
_RESULT_RESULTENTRY.containing_type = _RESULT
_RESULT.fields_by_name['Result'].message_type = _RESULT_RESULTENTRY
_METAEXECUTEREQUEST.fields_by_name['MetaOpts'].enum_type = _DBOPTS
_GETCACHERESPONSE.fields_by_name['FieldData'].message_type = _MAPMESSAGE
DESCRIPTOR.message_types_by_name['SqlRequest'] = _SQLREQUEST
DESCRIPTOR.message_types_by_name['SqlExecuteResponse'] = _SQLEXECUTERESPONSE
DESCRIPTOR.message_types_by_name['SqlQueryResponse'] = _SQLQUERYRESPONSE
DESCRIPTOR.message_types_by_name['MetaQueryRequest'] = _METAQUERYREQUEST
DESCRIPTOR.message_types_by_name['MetaQueryResponse'] = _METAQUERYRESPONSE
DESCRIPTOR.message_types_by_name['MapMessage'] = _MAPMESSAGE
DESCRIPTOR.message_types_by_name['Result'] = _RESULT
DESCRIPTOR.message_types_by_name['MetaExecuteRequest'] = _METAEXECUTEREQUEST
DESCRIPTOR.message_types_by_name['MetaExecuteResponse'] = _METAEXECUTERESPONSE
DESCRIPTOR.message_types_by_name['SetCacheRequest'] = _SETCACHEREQUEST
DESCRIPTOR.message_types_by_name['SetCacheResponse'] = _SETCACHERESPONSE
DESCRIPTOR.message_types_by_name['GetCacheRequest'] = _GETCACHEREQUEST
DESCRIPTOR.message_types_by_name['GetCacheResponse'] = _GETCACHERESPONSE
DESCRIPTOR.enum_types_by_name['DBType'] = _DBTYPE
DESCRIPTOR.enum_types_by_name['DBOpts'] = _DBOPTS
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

SqlRequest = _reflection.GeneratedProtocolMessageType('SqlRequest', (_message.Message,), dict(
  DESCRIPTOR = _SQLREQUEST,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.SqlRequest)
  ))
_sym_db.RegisterMessage(SqlRequest)

SqlExecuteResponse = _reflection.GeneratedProtocolMessageType('SqlExecuteResponse', (_message.Message,), dict(
  DESCRIPTOR = _SQLEXECUTERESPONSE,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.SqlExecuteResponse)
  ))
_sym_db.RegisterMessage(SqlExecuteResponse)

SqlQueryResponse = _reflection.GeneratedProtocolMessageType('SqlQueryResponse', (_message.Message,), dict(
  DESCRIPTOR = _SQLQUERYRESPONSE,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.SqlQueryResponse)
  ))
_sym_db.RegisterMessage(SqlQueryResponse)

MetaQueryRequest = _reflection.GeneratedProtocolMessageType('MetaQueryRequest', (_message.Message,), dict(
  DESCRIPTOR = _METAQUERYREQUEST,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.MetaQueryRequest)
  ))
_sym_db.RegisterMessage(MetaQueryRequest)

MetaQueryResponse = _reflection.GeneratedProtocolMessageType('MetaQueryResponse', (_message.Message,), dict(
  DESCRIPTOR = _METAQUERYRESPONSE,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.MetaQueryResponse)
  ))
_sym_db.RegisterMessage(MetaQueryResponse)

MapMessage = _reflection.GeneratedProtocolMessageType('MapMessage', (_message.Message,), dict(

  DataEntry = _reflection.GeneratedProtocolMessageType('DataEntry', (_message.Message,), dict(
    DESCRIPTOR = _MAPMESSAGE_DATAENTRY,
    __module__ = 'db_pb2'
    # @@protoc_insertion_point(class_scope:models.MapMessage.DataEntry)
    ))
  ,
  DESCRIPTOR = _MAPMESSAGE,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.MapMessage)
  ))
_sym_db.RegisterMessage(MapMessage)
_sym_db.RegisterMessage(MapMessage.DataEntry)

Result = _reflection.GeneratedProtocolMessageType('Result', (_message.Message,), dict(

  ResultEntry = _reflection.GeneratedProtocolMessageType('ResultEntry', (_message.Message,), dict(
    DESCRIPTOR = _RESULT_RESULTENTRY,
    __module__ = 'db_pb2'
    # @@protoc_insertion_point(class_scope:models.Result.ResultEntry)
    ))
  ,
  DESCRIPTOR = _RESULT,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.Result)
  ))
_sym_db.RegisterMessage(Result)
_sym_db.RegisterMessage(Result.ResultEntry)

MetaExecuteRequest = _reflection.GeneratedProtocolMessageType('MetaExecuteRequest', (_message.Message,), dict(
  DESCRIPTOR = _METAEXECUTEREQUEST,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.MetaExecuteRequest)
  ))
_sym_db.RegisterMessage(MetaExecuteRequest)

MetaExecuteResponse = _reflection.GeneratedProtocolMessageType('MetaExecuteResponse', (_message.Message,), dict(
  DESCRIPTOR = _METAEXECUTERESPONSE,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.MetaExecuteResponse)
  ))
_sym_db.RegisterMessage(MetaExecuteResponse)

SetCacheRequest = _reflection.GeneratedProtocolMessageType('SetCacheRequest', (_message.Message,), dict(
  DESCRIPTOR = _SETCACHEREQUEST,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.SetCacheRequest)
  ))
_sym_db.RegisterMessage(SetCacheRequest)

SetCacheResponse = _reflection.GeneratedProtocolMessageType('SetCacheResponse', (_message.Message,), dict(
  DESCRIPTOR = _SETCACHERESPONSE,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.SetCacheResponse)
  ))
_sym_db.RegisterMessage(SetCacheResponse)

GetCacheRequest = _reflection.GeneratedProtocolMessageType('GetCacheRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETCACHEREQUEST,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.GetCacheRequest)
  ))
_sym_db.RegisterMessage(GetCacheRequest)

GetCacheResponse = _reflection.GeneratedProtocolMessageType('GetCacheResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETCACHERESPONSE,
  __module__ = 'db_pb2'
  # @@protoc_insertion_point(class_scope:models.GetCacheResponse)
  ))
_sym_db.RegisterMessage(GetCacheResponse)


_MAPMESSAGE_DATAENTRY.has_options = True
_MAPMESSAGE_DATAENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_RESULT_RESULTENTRY.has_options = True
_RESULT_RESULTENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class DatabaseServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.ExecuteSql = channel.unary_unary(
          '/models.DatabaseService/ExecuteSql',
          request_serializer=SqlRequest.SerializeToString,
          response_deserializer=SqlExecuteResponse.FromString,
          )
      self.QuerySql = channel.unary_unary(
          '/models.DatabaseService/QuerySql',
          request_serializer=SqlRequest.SerializeToString,
          response_deserializer=SqlQueryResponse.FromString,
          )
      self.ExecuteMeta = channel.unary_unary(
          '/models.DatabaseService/ExecuteMeta',
          request_serializer=MetaExecuteRequest.SerializeToString,
          response_deserializer=MetaExecuteResponse.FromString,
          )
      self.QueryMeta = channel.unary_unary(
          '/models.DatabaseService/QueryMeta',
          request_serializer=MetaQueryRequest.SerializeToString,
          response_deserializer=MetaQueryResponse.FromString,
          )
      self.SetCacheMeta = channel.unary_unary(
          '/models.DatabaseService/SetCacheMeta',
          request_serializer=SetCacheRequest.SerializeToString,
          response_deserializer=SetCacheResponse.FromString,
          )
      self.GetCachedFieldData = channel.unary_unary(
          '/models.DatabaseService/GetCachedFieldData',
          request_serializer=GetCacheRequest.SerializeToString,
          response_deserializer=GetCacheResponse.FromString,
          )


  class DatabaseServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def ExecuteSql(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def QuerySql(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ExecuteMeta(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def QueryMeta(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetCacheMeta(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetCachedFieldData(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ExecuteSql': grpc.unary_unary_rpc_method_handler(
            servicer.ExecuteSql,
            request_deserializer=SqlRequest.FromString,
            response_serializer=SqlExecuteResponse.SerializeToString,
        ),
        'QuerySql': grpc.unary_unary_rpc_method_handler(
            servicer.QuerySql,
            request_deserializer=SqlRequest.FromString,
            response_serializer=SqlQueryResponse.SerializeToString,
        ),
        'ExecuteMeta': grpc.unary_unary_rpc_method_handler(
            servicer.ExecuteMeta,
            request_deserializer=MetaExecuteRequest.FromString,
            response_serializer=MetaExecuteResponse.SerializeToString,
        ),
        'QueryMeta': grpc.unary_unary_rpc_method_handler(
            servicer.QueryMeta,
            request_deserializer=MetaQueryRequest.FromString,
            response_serializer=MetaQueryResponse.SerializeToString,
        ),
        'SetCacheMeta': grpc.unary_unary_rpc_method_handler(
            servicer.SetCacheMeta,
            request_deserializer=SetCacheRequest.FromString,
            response_serializer=SetCacheResponse.SerializeToString,
        ),
        'GetCachedFieldData': grpc.unary_unary_rpc_method_handler(
            servicer.GetCachedFieldData,
            request_deserializer=GetCacheRequest.FromString,
            response_serializer=GetCacheResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'models.DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaDatabaseServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def ExecuteSql(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def QuerySql(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ExecuteMeta(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def QueryMeta(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetCacheMeta(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetCachedFieldData(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDatabaseServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def ExecuteSql(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    ExecuteSql.future = None
    def QuerySql(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    QuerySql.future = None
    def ExecuteMeta(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    ExecuteMeta.future = None
    def QueryMeta(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    QueryMeta.future = None
    def SetCacheMeta(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    SetCacheMeta.future = None
    def GetCachedFieldData(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    GetCachedFieldData.future = None


  def beta_create_DatabaseService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('models.DatabaseService', 'ExecuteMeta'): MetaExecuteRequest.FromString,
      ('models.DatabaseService', 'ExecuteSql'): SqlRequest.FromString,
      ('models.DatabaseService', 'GetCachedFieldData'): GetCacheRequest.FromString,
      ('models.DatabaseService', 'QueryMeta'): MetaQueryRequest.FromString,
      ('models.DatabaseService', 'QuerySql'): SqlRequest.FromString,
      ('models.DatabaseService', 'SetCacheMeta'): SetCacheRequest.FromString,
    }
    response_serializers = {
      ('models.DatabaseService', 'ExecuteMeta'): MetaExecuteResponse.SerializeToString,
      ('models.DatabaseService', 'ExecuteSql'): SqlExecuteResponse.SerializeToString,
      ('models.DatabaseService', 'GetCachedFieldData'): GetCacheResponse.SerializeToString,
      ('models.DatabaseService', 'QueryMeta'): MetaQueryResponse.SerializeToString,
      ('models.DatabaseService', 'QuerySql'): SqlQueryResponse.SerializeToString,
      ('models.DatabaseService', 'SetCacheMeta'): SetCacheResponse.SerializeToString,
    }
    method_implementations = {
      ('models.DatabaseService', 'ExecuteMeta'): face_utilities.unary_unary_inline(servicer.ExecuteMeta),
      ('models.DatabaseService', 'ExecuteSql'): face_utilities.unary_unary_inline(servicer.ExecuteSql),
      ('models.DatabaseService', 'GetCachedFieldData'): face_utilities.unary_unary_inline(servicer.GetCachedFieldData),
      ('models.DatabaseService', 'QueryMeta'): face_utilities.unary_unary_inline(servicer.QueryMeta),
      ('models.DatabaseService', 'QuerySql'): face_utilities.unary_unary_inline(servicer.QuerySql),
      ('models.DatabaseService', 'SetCacheMeta'): face_utilities.unary_unary_inline(servicer.SetCacheMeta),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DatabaseService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('models.DatabaseService', 'ExecuteMeta'): MetaExecuteRequest.SerializeToString,
      ('models.DatabaseService', 'ExecuteSql'): SqlRequest.SerializeToString,
      ('models.DatabaseService', 'GetCachedFieldData'): GetCacheRequest.SerializeToString,
      ('models.DatabaseService', 'QueryMeta'): MetaQueryRequest.SerializeToString,
      ('models.DatabaseService', 'QuerySql'): SqlRequest.SerializeToString,
      ('models.DatabaseService', 'SetCacheMeta'): SetCacheRequest.SerializeToString,
    }
    response_deserializers = {
      ('models.DatabaseService', 'ExecuteMeta'): MetaExecuteResponse.FromString,
      ('models.DatabaseService', 'ExecuteSql'): SqlExecuteResponse.FromString,
      ('models.DatabaseService', 'GetCachedFieldData'): GetCacheResponse.FromString,
      ('models.DatabaseService', 'QueryMeta'): MetaQueryResponse.FromString,
      ('models.DatabaseService', 'QuerySql'): SqlQueryResponse.FromString,
      ('models.DatabaseService', 'SetCacheMeta'): SetCacheResponse.FromString,
    }
    cardinalities = {
      'ExecuteMeta': cardinality.Cardinality.UNARY_UNARY,
      'ExecuteSql': cardinality.Cardinality.UNARY_UNARY,
      'GetCachedFieldData': cardinality.Cardinality.UNARY_UNARY,
      'QueryMeta': cardinality.Cardinality.UNARY_UNARY,
      'QuerySql': cardinality.Cardinality.UNARY_UNARY,
      'SetCacheMeta': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'models.DatabaseService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
