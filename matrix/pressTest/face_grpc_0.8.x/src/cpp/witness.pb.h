// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: witness.proto

#ifndef PROTOBUF_witness_2eproto__INCLUDED
#define PROTOBUF_witness_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "localcommon.pb.h"
// @@protoc_insertion_point(includes)

namespace dg {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_witness_2eproto();
void protobuf_AssignDesc_witness_2eproto();
void protobuf_ShutdownFile_witness_2eproto();

class BrandIndex;
class BrandIndex_Item;
class CommonIndex;
class CommonIndex_Item;
class IndexRequest;
class IndexResponse;
class IndexTxtRequest;
class IndexTxtResponse;
class WitnessBatchRequest;
class WitnessBatchResponse;
class WitnessImage;
class WitnessMarginROI;
class WitnessRelativeROI;
class WitnessRequest;
class WitnessRequestContext;
class WitnessResponse;
class WitnessResponseContext;
class WitnessResult;
class WitnessUserObject;

enum IndexType {
  INDEX_DEFAULT = 0,
  INDEX_CAR_BRAND = 1,
  INDEX_CAR_TYPE = 2,
  INDEX_CAR_COLOR = 3,
  INDEX_CAR_MARKER = 4,
  INDEX_CAR_PLATE_TYPE = 5,
  INDEX_CAR_PLATE_COLOR = 6,
  INDEX_CAR_PEDESTRIAN_ATTR_TYPE = 7,
  INDEX_NONMOTORVEHICLE_ATTR_TYPE = 8,
  IndexType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IndexType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IndexType_IsValid(int value);
const IndexType IndexType_MIN = INDEX_DEFAULT;
const IndexType IndexType_MAX = INDEX_NONMOTORVEHICLE_ATTR_TYPE;
const int IndexType_ARRAYSIZE = IndexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IndexType_descriptor();
inline const ::std::string& IndexType_Name(IndexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IndexType_descriptor(), value);
}
inline bool IndexType_Parse(
    const ::std::string& name, IndexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IndexType>(
    IndexType_descriptor(), name, value);
}
enum WitnessUserObjectType {
  WITNESS_USER_OBJECT_INVALID = 0,
  WITNESS_USER_OBJECT_FACE = 1,
  WITNESS_USER_OBJECT_MOTOR = 2,
  WITNESS_USER_OBJECT_NONMOTOR = 3,
  WITNESS_USER_OBJECT_PEDESTRIAN = 4,
  WitnessUserObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WitnessUserObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WitnessUserObjectType_IsValid(int value);
const WitnessUserObjectType WitnessUserObjectType_MIN = WITNESS_USER_OBJECT_INVALID;
const WitnessUserObjectType WitnessUserObjectType_MAX = WITNESS_USER_OBJECT_PEDESTRIAN;
const int WitnessUserObjectType_ARRAYSIZE = WitnessUserObjectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WitnessUserObjectType_descriptor();
inline const ::std::string& WitnessUserObjectType_Name(WitnessUserObjectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WitnessUserObjectType_descriptor(), value);
}
inline bool WitnessUserObjectType_Parse(
    const ::std::string& name, WitnessUserObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WitnessUserObjectType>(
    WitnessUserObjectType_descriptor(), name, value);
}
// ===================================================================

class WitnessUserObject : public ::google::protobuf::Message {
 public:
  WitnessUserObject();
  virtual ~WitnessUserObject();

  WitnessUserObject(const WitnessUserObject& from);

  inline WitnessUserObject& operator=(const WitnessUserObject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessUserObject& default_instance();

  void Swap(WitnessUserObject* other);

  // implements Message ----------------------------------------------

  inline WitnessUserObject* New() const { return New(NULL); }

  WitnessUserObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessUserObject& from);
  void MergeFrom(const WitnessUserObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessUserObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.WitnessUserObjectType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::dg::model::WitnessUserObjectType type() const;
  void set_type(::dg::model::WitnessUserObjectType value);

  // optional string DetectResult = 2;
  void clear_detectresult();
  static const int kDetectResultFieldNumber = 2;
  const ::std::string& detectresult() const;
  void set_detectresult(const ::std::string& value);
  void set_detectresult(const char* value);
  void set_detectresult(const char* value, size_t size);
  ::std::string* mutable_detectresult();
  ::std::string* release_detectresult();
  void set_allocated_detectresult(::std::string* detectresult);

  // optional string AlignResult = 3;
  void clear_alignresult();
  static const int kAlignResultFieldNumber = 3;
  const ::std::string& alignresult() const;
  void set_alignresult(const ::std::string& value);
  void set_alignresult(const char* value);
  void set_alignresult(const char* value, size_t size);
  ::std::string* mutable_alignresult();
  ::std::string* release_alignresult();
  void set_allocated_alignresult(::std::string* alignresult);

  // @@protoc_insertion_point(class_scope:dg.model.WitnessUserObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr detectresult_;
  ::google::protobuf::internal::ArenaStringPtr alignresult_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessUserObject* default_instance_;
};
// -------------------------------------------------------------------

class IndexRequest : public ::google::protobuf::Message {
 public:
  IndexRequest();
  virtual ~IndexRequest();

  IndexRequest(const IndexRequest& from);

  inline IndexRequest& operator=(const IndexRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexRequest& default_instance();

  void Swap(IndexRequest* other);

  // implements Message ----------------------------------------------

  inline IndexRequest* New() const { return New(NULL); }

  IndexRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexRequest& from);
  void MergeFrom(const IndexRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndexRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.IndexType IndexType = 1;
  void clear_indextype();
  static const int kIndexTypeFieldNumber = 1;
  ::dg::model::IndexType indextype() const;
  void set_indextype(::dg::model::IndexType value);

  // @@protoc_insertion_point(class_scope:dg.model.IndexRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int indextype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static IndexRequest* default_instance_;
};
// -------------------------------------------------------------------

class IndexTxtRequest : public ::google::protobuf::Message {
 public:
  IndexTxtRequest();
  virtual ~IndexTxtRequest();

  IndexTxtRequest(const IndexTxtRequest& from);

  inline IndexTxtRequest& operator=(const IndexTxtRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexTxtRequest& default_instance();

  void Swap(IndexTxtRequest* other);

  // implements Message ----------------------------------------------

  inline IndexTxtRequest* New() const { return New(NULL); }

  IndexTxtRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexTxtRequest& from);
  void MergeFrom(const IndexTxtRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndexTxtRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.IndexType IndexType = 1;
  void clear_indextype();
  static const int kIndexTypeFieldNumber = 1;
  ::dg::model::IndexType indextype() const;
  void set_indextype(::dg::model::IndexType value);

  // @@protoc_insertion_point(class_scope:dg.model.IndexTxtRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int indextype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static IndexTxtRequest* default_instance_;
};
// -------------------------------------------------------------------

class IndexTxtResponse : public ::google::protobuf::Message {
 public:
  IndexTxtResponse();
  virtual ~IndexTxtResponse();

  IndexTxtResponse(const IndexTxtResponse& from);

  inline IndexTxtResponse& operator=(const IndexTxtResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexTxtResponse& default_instance();

  void Swap(IndexTxtResponse* other);

  // implements Message ----------------------------------------------

  inline IndexTxtResponse* New() const { return New(NULL); }

  IndexTxtResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexTxtResponse& from);
  void MergeFrom(const IndexTxtResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndexTxtResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Context = 1;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // @@protoc_insertion_point(class_scope:dg.model.IndexTxtResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static IndexTxtResponse* default_instance_;
};
// -------------------------------------------------------------------

class CommonIndex_Item : public ::google::protobuf::Message {
 public:
  CommonIndex_Item();
  virtual ~CommonIndex_Item();

  CommonIndex_Item(const CommonIndex_Item& from);

  inline CommonIndex_Item& operator=(const CommonIndex_Item& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonIndex_Item& default_instance();

  void Swap(CommonIndex_Item* other);

  // implements Message ----------------------------------------------

  inline CommonIndex_Item* New() const { return New(NULL); }

  CommonIndex_Item* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonIndex_Item& from);
  void MergeFrom(const CommonIndex_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommonIndex_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:dg.model.CommonIndex.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static CommonIndex_Item* default_instance_;
};
// -------------------------------------------------------------------

class CommonIndex : public ::google::protobuf::Message {
 public:
  CommonIndex();
  virtual ~CommonIndex();

  CommonIndex(const CommonIndex& from);

  inline CommonIndex& operator=(const CommonIndex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonIndex& default_instance();

  void Swap(CommonIndex* other);

  // implements Message ----------------------------------------------

  inline CommonIndex* New() const { return New(NULL); }

  CommonIndex* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonIndex& from);
  void MergeFrom(const CommonIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommonIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommonIndex_Item Item;

  // accessors -------------------------------------------------------

  // repeated .dg.model.CommonIndex.Item Items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::dg::model::CommonIndex_Item& items(int index) const;
  ::dg::model::CommonIndex_Item* mutable_items(int index);
  ::dg::model::CommonIndex_Item* add_items();
  ::google::protobuf::RepeatedPtrField< ::dg::model::CommonIndex_Item >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::CommonIndex_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:dg.model.CommonIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::CommonIndex_Item > items_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static CommonIndex* default_instance_;
};
// -------------------------------------------------------------------

class BrandIndex_Item : public ::google::protobuf::Message {
 public:
  BrandIndex_Item();
  virtual ~BrandIndex_Item();

  BrandIndex_Item(const BrandIndex_Item& from);

  inline BrandIndex_Item& operator=(const BrandIndex_Item& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrandIndex_Item& default_instance();

  void Swap(BrandIndex_Item* other);

  // implements Message ----------------------------------------------

  inline BrandIndex_Item* New() const { return New(NULL); }

  BrandIndex_Item* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrandIndex_Item& from);
  void MergeFrom(const BrandIndex_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrandIndex_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MainBrandId = 2;
  void clear_mainbrandid();
  static const int kMainBrandIdFieldNumber = 2;
  ::google::protobuf::int32 mainbrandid() const;
  void set_mainbrandid(::google::protobuf::int32 value);

  // optional int32 SubBrandId = 3;
  void clear_subbrandid();
  static const int kSubBrandIdFieldNumber = 3;
  ::google::protobuf::int32 subbrandid() const;
  void set_subbrandid(::google::protobuf::int32 value);

  // optional int32 YearModelId = 4;
  void clear_yearmodelid();
  static const int kYearModelIdFieldNumber = 4;
  ::google::protobuf::int32 yearmodelid() const;
  void set_yearmodelid(::google::protobuf::int32 value);

  // optional string MainBrandName = 5;
  void clear_mainbrandname();
  static const int kMainBrandNameFieldNumber = 5;
  const ::std::string& mainbrandname() const;
  void set_mainbrandname(const ::std::string& value);
  void set_mainbrandname(const char* value);
  void set_mainbrandname(const char* value, size_t size);
  ::std::string* mutable_mainbrandname();
  ::std::string* release_mainbrandname();
  void set_allocated_mainbrandname(::std::string* mainbrandname);

  // optional string SubBrandName = 6;
  void clear_subbrandname();
  static const int kSubBrandNameFieldNumber = 6;
  const ::std::string& subbrandname() const;
  void set_subbrandname(const ::std::string& value);
  void set_subbrandname(const char* value);
  void set_subbrandname(const char* value, size_t size);
  ::std::string* mutable_subbrandname();
  ::std::string* release_subbrandname();
  void set_allocated_subbrandname(::std::string* subbrandname);

  // optional string YearModelName = 7;
  void clear_yearmodelname();
  static const int kYearModelNameFieldNumber = 7;
  const ::std::string& yearmodelname() const;
  void set_yearmodelname(const ::std::string& value);
  void set_yearmodelname(const char* value);
  void set_yearmodelname(const char* value, size_t size);
  ::std::string* mutable_yearmodelname();
  ::std::string* release_yearmodelname();
  void set_allocated_yearmodelname(::std::string* yearmodelname);

  // @@protoc_insertion_point(class_scope:dg.model.BrandIndex.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 mainbrandid_;
  ::google::protobuf::int32 subbrandid_;
  ::google::protobuf::internal::ArenaStringPtr mainbrandname_;
  ::google::protobuf::internal::ArenaStringPtr subbrandname_;
  ::google::protobuf::internal::ArenaStringPtr yearmodelname_;
  ::google::protobuf::int32 yearmodelid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static BrandIndex_Item* default_instance_;
};
// -------------------------------------------------------------------

class BrandIndex : public ::google::protobuf::Message {
 public:
  BrandIndex();
  virtual ~BrandIndex();

  BrandIndex(const BrandIndex& from);

  inline BrandIndex& operator=(const BrandIndex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrandIndex& default_instance();

  void Swap(BrandIndex* other);

  // implements Message ----------------------------------------------

  inline BrandIndex* New() const { return New(NULL); }

  BrandIndex* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrandIndex& from);
  void MergeFrom(const BrandIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrandIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BrandIndex_Item Item;

  // accessors -------------------------------------------------------

  // repeated .dg.model.BrandIndex.Item Items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::dg::model::BrandIndex_Item& items(int index) const;
  ::dg::model::BrandIndex_Item* mutable_items(int index);
  ::dg::model::BrandIndex_Item* add_items();
  ::google::protobuf::RepeatedPtrField< ::dg::model::BrandIndex_Item >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::BrandIndex_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:dg.model.BrandIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::BrandIndex_Item > items_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static BrandIndex* default_instance_;
};
// -------------------------------------------------------------------

class IndexResponse : public ::google::protobuf::Message {
 public:
  IndexResponse();
  virtual ~IndexResponse();

  IndexResponse(const IndexResponse& from);

  inline IndexResponse& operator=(const IndexResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexResponse& default_instance();

  enum IndexContentCase {
    kIndex = 1,
    kBrandIndex = 2,
    INDEX_CONTENT_NOT_SET = 0,
  };

  void Swap(IndexResponse* other);

  // implements Message ----------------------------------------------

  inline IndexResponse* New() const { return New(NULL); }

  IndexResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexResponse& from);
  void MergeFrom(const IndexResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndexResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.CommonIndex Index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  const ::dg::model::CommonIndex& index() const;
  ::dg::model::CommonIndex* mutable_index();
  ::dg::model::CommonIndex* release_index();
  void set_allocated_index(::dg::model::CommonIndex* index);

  // optional .dg.model.BrandIndex BrandIndex = 2;
  bool has_brandindex() const;
  void clear_brandindex();
  static const int kBrandIndexFieldNumber = 2;
  const ::dg::model::BrandIndex& brandindex() const;
  ::dg::model::BrandIndex* mutable_brandindex();
  ::dg::model::BrandIndex* release_brandindex();
  void set_allocated_brandindex(::dg::model::BrandIndex* brandindex);

  IndexContentCase index_content_case() const;
  // @@protoc_insertion_point(class_scope:dg.model.IndexResponse)
 private:
  inline void set_has_index();
  inline void set_has_brandindex();

  inline bool has_index_content() const;
  void clear_index_content();
  inline void clear_has_index_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union IndexContentUnion {
    IndexContentUnion() {}
    ::dg::model::CommonIndex* index_;
    ::dg::model::BrandIndex* brandindex_;
  } index_content_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static IndexResponse* default_instance_;
};
// -------------------------------------------------------------------

class WitnessRequest : public ::google::protobuf::Message {
 public:
  WitnessRequest();
  virtual ~WitnessRequest();

  WitnessRequest(const WitnessRequest& from);

  inline WitnessRequest& operator=(const WitnessRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessRequest& default_instance();

  void Swap(WitnessRequest* other);

  // implements Message ----------------------------------------------

  inline WitnessRequest* New() const { return New(NULL); }

  WitnessRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessRequest& from);
  void MergeFrom(const WitnessRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.WitnessRequestContext Context = 1;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::dg::model::WitnessRequestContext& context() const;
  ::dg::model::WitnessRequestContext* mutable_context();
  ::dg::model::WitnessRequestContext* release_context();
  void set_allocated_context(::dg::model::WitnessRequestContext* context);

  // optional .dg.model.WitnessImage Image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::dg::model::WitnessImage& image() const;
  ::dg::model::WitnessImage* mutable_image();
  ::dg::model::WitnessImage* release_image();
  void set_allocated_image(::dg::model::WitnessImage* image);

  // @@protoc_insertion_point(class_scope:dg.model.WitnessRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::WitnessRequestContext* context_;
  ::dg::model::WitnessImage* image_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessRequest* default_instance_;
};
// -------------------------------------------------------------------

class WitnessBatchRequest : public ::google::protobuf::Message {
 public:
  WitnessBatchRequest();
  virtual ~WitnessBatchRequest();

  WitnessBatchRequest(const WitnessBatchRequest& from);

  inline WitnessBatchRequest& operator=(const WitnessBatchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessBatchRequest& default_instance();

  void Swap(WitnessBatchRequest* other);

  // implements Message ----------------------------------------------

  inline WitnessBatchRequest* New() const { return New(NULL); }

  WitnessBatchRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessBatchRequest& from);
  void MergeFrom(const WitnessBatchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessBatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.WitnessRequestContext Context = 1;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::dg::model::WitnessRequestContext& context() const;
  ::dg::model::WitnessRequestContext* mutable_context();
  ::dg::model::WitnessRequestContext* release_context();
  void set_allocated_context(::dg::model::WitnessRequestContext* context);

  // repeated .dg.model.WitnessImage Images = 2;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 2;
  const ::dg::model::WitnessImage& images(int index) const;
  ::dg::model::WitnessImage* mutable_images(int index);
  ::dg::model::WitnessImage* add_images();
  ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessImage >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessImage >&
      images() const;

  // @@protoc_insertion_point(class_scope:dg.model.WitnessBatchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::WitnessRequestContext* context_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessImage > images_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessBatchRequest* default_instance_;
};
// -------------------------------------------------------------------

class WitnessResponse : public ::google::protobuf::Message {
 public:
  WitnessResponse();
  virtual ~WitnessResponse();

  WitnessResponse(const WitnessResponse& from);

  inline WitnessResponse& operator=(const WitnessResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessResponse& default_instance();

  void Swap(WitnessResponse* other);

  // implements Message ----------------------------------------------

  inline WitnessResponse* New() const { return New(NULL); }

  WitnessResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessResponse& from);
  void MergeFrom(const WitnessResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.WitnessResponseContext Context = 1;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::dg::model::WitnessResponseContext& context() const;
  ::dg::model::WitnessResponseContext* mutable_context();
  ::dg::model::WitnessResponseContext* release_context();
  void set_allocated_context(::dg::model::WitnessResponseContext* context);

  // optional .dg.model.WitnessResult Result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::dg::model::WitnessResult& result() const;
  ::dg::model::WitnessResult* mutable_result();
  ::dg::model::WitnessResult* release_result();
  void set_allocated_result(::dg::model::WitnessResult* result);

  // @@protoc_insertion_point(class_scope:dg.model.WitnessResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::WitnessResponseContext* context_;
  ::dg::model::WitnessResult* result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessResponse* default_instance_;
};
// -------------------------------------------------------------------

class WitnessBatchResponse : public ::google::protobuf::Message {
 public:
  WitnessBatchResponse();
  virtual ~WitnessBatchResponse();

  WitnessBatchResponse(const WitnessBatchResponse& from);

  inline WitnessBatchResponse& operator=(const WitnessBatchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessBatchResponse& default_instance();

  void Swap(WitnessBatchResponse* other);

  // implements Message ----------------------------------------------

  inline WitnessBatchResponse* New() const { return New(NULL); }

  WitnessBatchResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessBatchResponse& from);
  void MergeFrom(const WitnessBatchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessBatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.WitnessResponseContext Context = 1;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::dg::model::WitnessResponseContext& context() const;
  ::dg::model::WitnessResponseContext* mutable_context();
  ::dg::model::WitnessResponseContext* release_context();
  void set_allocated_context(::dg::model::WitnessResponseContext* context);

  // repeated .dg.model.WitnessResult Results = 2;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  const ::dg::model::WitnessResult& results(int index) const;
  ::dg::model::WitnessResult* mutable_results(int index);
  ::dg::model::WitnessResult* add_results();
  ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessResult >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:dg.model.WitnessBatchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::WitnessResponseContext* context_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessResult > results_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessBatchResponse* default_instance_;
};
// -------------------------------------------------------------------

class WitnessRelativeROI : public ::google::protobuf::Message {
 public:
  WitnessRelativeROI();
  virtual ~WitnessRelativeROI();

  WitnessRelativeROI(const WitnessRelativeROI& from);

  inline WitnessRelativeROI& operator=(const WitnessRelativeROI& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessRelativeROI& default_instance();

  void Swap(WitnessRelativeROI* other);

  // implements Message ----------------------------------------------

  inline WitnessRelativeROI* New() const { return New(NULL); }

  WitnessRelativeROI* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessRelativeROI& from);
  void MergeFrom(const WitnessRelativeROI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessRelativeROI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PosX = 1;
  void clear_posx();
  static const int kPosXFieldNumber = 1;
  ::google::protobuf::int32 posx() const;
  void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 2;
  void clear_posy();
  static const int kPosYFieldNumber = 2;
  ::google::protobuf::int32 posy() const;
  void set_posy(::google::protobuf::int32 value);

  // optional int32 Width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 Height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dg.model.WitnessRelativeROI)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessRelativeROI* default_instance_;
};
// -------------------------------------------------------------------

class WitnessMarginROI : public ::google::protobuf::Message {
 public:
  WitnessMarginROI();
  virtual ~WitnessMarginROI();

  WitnessMarginROI(const WitnessMarginROI& from);

  inline WitnessMarginROI& operator=(const WitnessMarginROI& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessMarginROI& default_instance();

  void Swap(WitnessMarginROI* other);

  // implements Message ----------------------------------------------

  inline WitnessMarginROI* New() const { return New(NULL); }

  WitnessMarginROI* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessMarginROI& from);
  void MergeFrom(const WitnessMarginROI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessMarginROI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Left = 1;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // optional int32 Top = 2;
  void clear_top();
  static const int kTopFieldNumber = 2;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // optional int32 Right = 3;
  void clear_right();
  static const int kRightFieldNumber = 3;
  ::google::protobuf::int32 right() const;
  void set_right(::google::protobuf::int32 value);

  // optional int32 Bottom = 4;
  void clear_bottom();
  static const int kBottomFieldNumber = 4;
  ::google::protobuf::int32 bottom() const;
  void set_bottom(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dg.model.WitnessMarginROI)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 bottom_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessMarginROI* default_instance_;
};
// -------------------------------------------------------------------

class WitnessRequestContext : public ::google::protobuf::Message {
 public:
  WitnessRequestContext();
  virtual ~WitnessRequestContext();

  WitnessRequestContext(const WitnessRequestContext& from);

  inline WitnessRequestContext& operator=(const WitnessRequestContext& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessRequestContext& default_instance();

  void Swap(WitnessRequestContext* other);

  // implements Message ----------------------------------------------

  inline WitnessRequestContext* New() const { return New(NULL); }

  WitnessRequestContext* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessRequestContext& from);
  void MergeFrom(const WitnessRequestContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessRequestContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string SessionId = 1;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // optional string UserName = 2;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // repeated .dg.model.RecognizeFunctions Functions = 4;
  int functions_size() const;
  void clear_functions();
  static const int kFunctionsFieldNumber = 4;
  ::dg::model::RecognizeFunctions functions(int index) const;
  void set_functions(int index, ::dg::model::RecognizeFunctions value);
  void add_functions(::dg::model::RecognizeFunctions value);
  const ::google::protobuf::RepeatedField<int>& functions() const;
  ::google::protobuf::RepeatedField<int>* mutable_functions();

  // optional .dg.model.RecognizeType Type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::dg::model::RecognizeType type() const;
  void set_type(::dg::model::RecognizeType value);

  // repeated .dg.model.StorageConfig Storages = 6;
  int storages_size() const;
  void clear_storages();
  static const int kStoragesFieldNumber = 6;
  const ::dg::model::StorageConfig& storages(int index) const;
  ::dg::model::StorageConfig* mutable_storages(int index);
  ::dg::model::StorageConfig* add_storages();
  ::google::protobuf::RepeatedPtrField< ::dg::model::StorageConfig >*
      mutable_storages();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::StorageConfig >&
      storages() const;

  // map<string, string> Params = 7;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      params() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_params();

  // optional int32 MinFaceSize = 8;
  void clear_minfacesize();
  static const int kMinFaceSizeFieldNumber = 8;
  ::google::protobuf::int32 minfacesize() const;
  void set_minfacesize(::google::protobuf::int32 value);

  // optional int32 MaxFaceSize = 9;
  void clear_maxfacesize();
  static const int kMaxFaceSizeFieldNumber = 9;
  ::google::protobuf::int32 maxfacesize() const;
  void set_maxfacesize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dg.model.WitnessRequestContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::RepeatedField<int> functions_;
  mutable int _functions_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::StorageConfig > storages_;
  int type_;
  ::google::protobuf::int32 minfacesize_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      WitnessRequestContext_ParamsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::google::protobuf::int32 maxfacesize_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessRequestContext* default_instance_;
};
// -------------------------------------------------------------------

class WitnessImage : public ::google::protobuf::Message {
 public:
  WitnessImage();
  virtual ~WitnessImage();

  WitnessImage(const WitnessImage& from);

  inline WitnessImage& operator=(const WitnessImage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessImage& default_instance();

  void Swap(WitnessImage* other);

  // implements Message ----------------------------------------------

  inline WitnessImage* New() const { return New(NULL); }

  WitnessImage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessImage& from);
  void MergeFrom(const WitnessImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.Image Data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::dg::model::Image& data() const;
  ::dg::model::Image* mutable_data();
  ::dg::model::Image* release_data();
  void set_allocated_data(::dg::model::Image* data);

  // optional .dg.model.SrcMetadata WitnessMetaData = 2;
  bool has_witnessmetadata() const;
  void clear_witnessmetadata();
  static const int kWitnessMetaDataFieldNumber = 2;
  const ::dg::model::SrcMetadata& witnessmetadata() const;
  ::dg::model::SrcMetadata* mutable_witnessmetadata();
  ::dg::model::SrcMetadata* release_witnessmetadata();
  void set_allocated_witnessmetadata(::dg::model::SrcMetadata* witnessmetadata);

  // repeated .dg.model.WitnessRelativeROI RelativeRoi = 3;
  int relativeroi_size() const;
  void clear_relativeroi();
  static const int kRelativeRoiFieldNumber = 3;
  const ::dg::model::WitnessRelativeROI& relativeroi(int index) const;
  ::dg::model::WitnessRelativeROI* mutable_relativeroi(int index);
  ::dg::model::WitnessRelativeROI* add_relativeroi();
  ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessRelativeROI >*
      mutable_relativeroi();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessRelativeROI >&
      relativeroi() const;

  // repeated .dg.model.WitnessMarginROI MarginRoi = 4;
  int marginroi_size() const;
  void clear_marginroi();
  static const int kMarginRoiFieldNumber = 4;
  const ::dg::model::WitnessMarginROI& marginroi(int index) const;
  ::dg::model::WitnessMarginROI* mutable_marginroi(int index);
  ::dg::model::WitnessMarginROI* add_marginroi();
  ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessMarginROI >*
      mutable_marginroi();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessMarginROI >&
      marginroi() const;

  // repeated .dg.model.WitnessUserObject UserObject = 5;
  int userobject_size() const;
  void clear_userobject();
  static const int kUserObjectFieldNumber = 5;
  const ::dg::model::WitnessUserObject& userobject(int index) const;
  ::dg::model::WitnessUserObject* mutable_userobject(int index);
  ::dg::model::WitnessUserObject* add_userobject();
  ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessUserObject >*
      mutable_userobject();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessUserObject >&
      userobject() const;

  // @@protoc_insertion_point(class_scope:dg.model.WitnessImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::Image* data_;
  ::dg::model::SrcMetadata* witnessmetadata_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessRelativeROI > relativeroi_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessMarginROI > marginroi_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessUserObject > userobject_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessImage* default_instance_;
};
// -------------------------------------------------------------------

class WitnessResponseContext : public ::google::protobuf::Message {
 public:
  WitnessResponseContext();
  virtual ~WitnessResponseContext();

  WitnessResponseContext(const WitnessResponseContext& from);

  inline WitnessResponseContext& operator=(const WitnessResponseContext& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessResponseContext& default_instance();

  void Swap(WitnessResponseContext* other);

  // implements Message ----------------------------------------------

  inline WitnessResponseContext* New() const { return New(NULL); }

  WitnessResponseContext* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessResponseContext& from);
  void MergeFrom(const WitnessResponseContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessResponseContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string SessionId = 1;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // optional string Status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // optional string Message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .dg.model.Time RequestTs = 4;
  bool has_requestts() const;
  void clear_requestts();
  static const int kRequestTsFieldNumber = 4;
  const ::dg::model::Time& requestts() const;
  ::dg::model::Time* mutable_requestts();
  ::dg::model::Time* release_requestts();
  void set_allocated_requestts(::dg::model::Time* requestts);

  // optional .dg.model.Time ResponseTs = 5;
  bool has_responsets() const;
  void clear_responsets();
  static const int kResponseTsFieldNumber = 5;
  const ::dg::model::Time& responsets() const;
  ::dg::model::Time* mutable_responsets();
  ::dg::model::Time* release_responsets();
  void set_allocated_responsets(::dg::model::Time* responsets);

  // map<string, .dg.model.Time> DebugTs = 6;
  int debugts_size() const;
  void clear_debugts();
  static const int kDebugTsFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::dg::model::Time >&
      debugts() const;
  ::google::protobuf::Map< ::std::string, ::dg::model::Time >*
      mutable_debugts();

  // @@protoc_insertion_point(class_scope:dg.model.WitnessResponseContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::dg::model::Time* requestts_;
  ::dg::model::Time* responsets_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::dg::model::Time,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      WitnessResponseContext_DebugTsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::dg::model::Time,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > debugts_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessResponseContext* default_instance_;
};
// -------------------------------------------------------------------

class WitnessResult : public ::google::protobuf::Message {
 public:
  WitnessResult();
  virtual ~WitnessResult();

  WitnessResult(const WitnessResult& from);

  inline WitnessResult& operator=(const WitnessResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessResult& default_instance();

  void Swap(WitnessResult* other);

  // implements Message ----------------------------------------------

  inline WitnessResult* New() const { return New(NULL); }

  WitnessResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WitnessResult& from);
  void MergeFrom(const WitnessResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WitnessResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string InnerStatus = 1;
  void clear_innerstatus();
  static const int kInnerStatusFieldNumber = 1;
  const ::std::string& innerstatus() const;
  void set_innerstatus(const ::std::string& value);
  void set_innerstatus(const char* value);
  void set_innerstatus(const char* value, size_t size);
  ::std::string* mutable_innerstatus();
  ::std::string* release_innerstatus();
  void set_allocated_innerstatus(::std::string* innerstatus);

  // optional string InnerMessage = 2;
  void clear_innermessage();
  static const int kInnerMessageFieldNumber = 2;
  const ::std::string& innermessage() const;
  void set_innermessage(const ::std::string& value);
  void set_innermessage(const char* value);
  void set_innermessage(const char* value, size_t size);
  ::std::string* mutable_innermessage();
  ::std::string* release_innermessage();
  void set_allocated_innermessage(::std::string* innermessage);

  // optional .dg.model.WitnessImage Image = 3;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::dg::model::WitnessImage& image() const;
  ::dg::model::WitnessImage* mutable_image();
  ::dg::model::WitnessImage* release_image();
  void set_allocated_image(::dg::model::WitnessImage* image);

  // repeated .dg.model.RecVehicle Vehicles = 4;
  int vehicles_size() const;
  void clear_vehicles();
  static const int kVehiclesFieldNumber = 4;
  const ::dg::model::RecVehicle& vehicles(int index) const;
  ::dg::model::RecVehicle* mutable_vehicles(int index);
  ::dg::model::RecVehicle* add_vehicles();
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >*
      mutable_vehicles();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >&
      vehicles() const;

  // repeated .dg.model.RecPedestrian Pedestrian = 5;
  int pedestrian_size() const;
  void clear_pedestrian();
  static const int kPedestrianFieldNumber = 5;
  const ::dg::model::RecPedestrian& pedestrian(int index) const;
  ::dg::model::RecPedestrian* mutable_pedestrian(int index);
  ::dg::model::RecPedestrian* add_pedestrian();
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >*
      mutable_pedestrian();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >&
      pedestrian() const;

  // repeated .dg.model.RecNonMotorVehicle NonMotorVehicles = 6;
  int nonmotorvehicles_size() const;
  void clear_nonmotorvehicles();
  static const int kNonMotorVehiclesFieldNumber = 6;
  const ::dg::model::RecNonMotorVehicle& nonmotorvehicles(int index) const;
  ::dg::model::RecNonMotorVehicle* mutable_nonmotorvehicles(int index);
  ::dg::model::RecNonMotorVehicle* add_nonmotorvehicles();
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle >*
      mutable_nonmotorvehicles();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle >&
      nonmotorvehicles() const;

  // @@protoc_insertion_point(class_scope:dg.model.WitnessResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr innerstatus_;
  ::google::protobuf::internal::ArenaStringPtr innermessage_;
  ::dg::model::WitnessImage* image_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle > vehicles_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian > pedestrian_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle > nonmotorvehicles_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_witness_2eproto();
  friend void protobuf_AssignDesc_witness_2eproto();
  friend void protobuf_ShutdownFile_witness_2eproto();

  void InitAsDefaultInstance();
  static WitnessResult* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessUserObject

// optional .dg.model.WitnessUserObjectType Type = 1;
inline void WitnessUserObject::clear_type() {
  type_ = 0;
}
inline ::dg::model::WitnessUserObjectType WitnessUserObject::type() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessUserObject.Type)
  return static_cast< ::dg::model::WitnessUserObjectType >(type_);
}
inline void WitnessUserObject::set_type(::dg::model::WitnessUserObjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessUserObject.Type)
}

// optional string DetectResult = 2;
inline void WitnessUserObject::clear_detectresult() {
  detectresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessUserObject::detectresult() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessUserObject.DetectResult)
  return detectresult_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessUserObject::set_detectresult(const ::std::string& value) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessUserObject.DetectResult)
}
inline void WitnessUserObject::set_detectresult(const char* value) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessUserObject.DetectResult)
}
inline void WitnessUserObject::set_detectresult(const char* value, size_t size) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessUserObject.DetectResult)
}
inline ::std::string* WitnessUserObject::mutable_detectresult() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessUserObject.DetectResult)
  return detectresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessUserObject::release_detectresult() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessUserObject.DetectResult)
  
  return detectresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessUserObject::set_allocated_detectresult(::std::string* detectresult) {
  if (detectresult != NULL) {
    
  } else {
    
  }
  detectresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detectresult);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessUserObject.DetectResult)
}

// optional string AlignResult = 3;
inline void WitnessUserObject::clear_alignresult() {
  alignresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessUserObject::alignresult() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessUserObject.AlignResult)
  return alignresult_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessUserObject::set_alignresult(const ::std::string& value) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessUserObject.AlignResult)
}
inline void WitnessUserObject::set_alignresult(const char* value) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessUserObject.AlignResult)
}
inline void WitnessUserObject::set_alignresult(const char* value, size_t size) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessUserObject.AlignResult)
}
inline ::std::string* WitnessUserObject::mutable_alignresult() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessUserObject.AlignResult)
  return alignresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessUserObject::release_alignresult() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessUserObject.AlignResult)
  
  return alignresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessUserObject::set_allocated_alignresult(::std::string* alignresult) {
  if (alignresult != NULL) {
    
  } else {
    
  }
  alignresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alignresult);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessUserObject.AlignResult)
}

// -------------------------------------------------------------------

// IndexRequest

// optional .dg.model.IndexType IndexType = 1;
inline void IndexRequest::clear_indextype() {
  indextype_ = 0;
}
inline ::dg::model::IndexType IndexRequest::indextype() const {
  // @@protoc_insertion_point(field_get:dg.model.IndexRequest.IndexType)
  return static_cast< ::dg::model::IndexType >(indextype_);
}
inline void IndexRequest::set_indextype(::dg::model::IndexType value) {
  
  indextype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.IndexRequest.IndexType)
}

// -------------------------------------------------------------------

// IndexTxtRequest

// optional .dg.model.IndexType IndexType = 1;
inline void IndexTxtRequest::clear_indextype() {
  indextype_ = 0;
}
inline ::dg::model::IndexType IndexTxtRequest::indextype() const {
  // @@protoc_insertion_point(field_get:dg.model.IndexTxtRequest.IndexType)
  return static_cast< ::dg::model::IndexType >(indextype_);
}
inline void IndexTxtRequest::set_indextype(::dg::model::IndexType value) {
  
  indextype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.IndexTxtRequest.IndexType)
}

// -------------------------------------------------------------------

// IndexTxtResponse

// optional string Context = 1;
inline void IndexTxtResponse::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexTxtResponse::context() const {
  // @@protoc_insertion_point(field_get:dg.model.IndexTxtResponse.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexTxtResponse::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.IndexTxtResponse.Context)
}
inline void IndexTxtResponse::set_context(const char* value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.IndexTxtResponse.Context)
}
inline void IndexTxtResponse::set_context(const char* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.IndexTxtResponse.Context)
}
inline ::std::string* IndexTxtResponse::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.IndexTxtResponse.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexTxtResponse::release_context() {
  // @@protoc_insertion_point(field_release:dg.model.IndexTxtResponse.Context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexTxtResponse::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dg.model.IndexTxtResponse.Context)
}

// -------------------------------------------------------------------

// CommonIndex_Item

// optional int32 Id = 1;
inline void CommonIndex_Item::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 CommonIndex_Item::id() const {
  // @@protoc_insertion_point(field_get:dg.model.CommonIndex.Item.Id)
  return id_;
}
inline void CommonIndex_Item::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.CommonIndex.Item.Id)
}

// optional string Name = 2;
inline void CommonIndex_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonIndex_Item::name() const {
  // @@protoc_insertion_point(field_get:dg.model.CommonIndex.Item.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonIndex_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.CommonIndex.Item.Name)
}
inline void CommonIndex_Item::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.CommonIndex.Item.Name)
}
inline void CommonIndex_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.CommonIndex.Item.Name)
}
inline ::std::string* CommonIndex_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.CommonIndex.Item.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonIndex_Item::release_name() {
  // @@protoc_insertion_point(field_release:dg.model.CommonIndex.Item.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonIndex_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dg.model.CommonIndex.Item.Name)
}

// -------------------------------------------------------------------

// CommonIndex

// repeated .dg.model.CommonIndex.Item Items = 1;
inline int CommonIndex::items_size() const {
  return items_.size();
}
inline void CommonIndex::clear_items() {
  items_.Clear();
}
inline const ::dg::model::CommonIndex_Item& CommonIndex::items(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.CommonIndex.Items)
  return items_.Get(index);
}
inline ::dg::model::CommonIndex_Item* CommonIndex::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.CommonIndex.Items)
  return items_.Mutable(index);
}
inline ::dg::model::CommonIndex_Item* CommonIndex::add_items() {
  // @@protoc_insertion_point(field_add:dg.model.CommonIndex.Items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::CommonIndex_Item >*
CommonIndex::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.CommonIndex.Items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::CommonIndex_Item >&
CommonIndex::items() const {
  // @@protoc_insertion_point(field_list:dg.model.CommonIndex.Items)
  return items_;
}

// -------------------------------------------------------------------

// BrandIndex_Item

// optional int32 MainBrandId = 2;
inline void BrandIndex_Item::clear_mainbrandid() {
  mainbrandid_ = 0;
}
inline ::google::protobuf::int32 BrandIndex_Item::mainbrandid() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.MainBrandId)
  return mainbrandid_;
}
inline void BrandIndex_Item::set_mainbrandid(::google::protobuf::int32 value) {
  
  mainbrandid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.MainBrandId)
}

// optional int32 SubBrandId = 3;
inline void BrandIndex_Item::clear_subbrandid() {
  subbrandid_ = 0;
}
inline ::google::protobuf::int32 BrandIndex_Item::subbrandid() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.SubBrandId)
  return subbrandid_;
}
inline void BrandIndex_Item::set_subbrandid(::google::protobuf::int32 value) {
  
  subbrandid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.SubBrandId)
}

// optional int32 YearModelId = 4;
inline void BrandIndex_Item::clear_yearmodelid() {
  yearmodelid_ = 0;
}
inline ::google::protobuf::int32 BrandIndex_Item::yearmodelid() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.YearModelId)
  return yearmodelid_;
}
inline void BrandIndex_Item::set_yearmodelid(::google::protobuf::int32 value) {
  
  yearmodelid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.YearModelId)
}

// optional string MainBrandName = 5;
inline void BrandIndex_Item::clear_mainbrandname() {
  mainbrandname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BrandIndex_Item::mainbrandname() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.MainBrandName)
  return mainbrandname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrandIndex_Item::set_mainbrandname(const ::std::string& value) {
  
  mainbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.MainBrandName)
}
inline void BrandIndex_Item::set_mainbrandname(const char* value) {
  
  mainbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.BrandIndex.Item.MainBrandName)
}
inline void BrandIndex_Item::set_mainbrandname(const char* value, size_t size) {
  
  mainbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.BrandIndex.Item.MainBrandName)
}
inline ::std::string* BrandIndex_Item::mutable_mainbrandname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.BrandIndex.Item.MainBrandName)
  return mainbrandname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrandIndex_Item::release_mainbrandname() {
  // @@protoc_insertion_point(field_release:dg.model.BrandIndex.Item.MainBrandName)
  
  return mainbrandname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrandIndex_Item::set_allocated_mainbrandname(::std::string* mainbrandname) {
  if (mainbrandname != NULL) {
    
  } else {
    
  }
  mainbrandname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainbrandname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.BrandIndex.Item.MainBrandName)
}

// optional string SubBrandName = 6;
inline void BrandIndex_Item::clear_subbrandname() {
  subbrandname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BrandIndex_Item::subbrandname() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.SubBrandName)
  return subbrandname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrandIndex_Item::set_subbrandname(const ::std::string& value) {
  
  subbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.SubBrandName)
}
inline void BrandIndex_Item::set_subbrandname(const char* value) {
  
  subbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.BrandIndex.Item.SubBrandName)
}
inline void BrandIndex_Item::set_subbrandname(const char* value, size_t size) {
  
  subbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.BrandIndex.Item.SubBrandName)
}
inline ::std::string* BrandIndex_Item::mutable_subbrandname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.BrandIndex.Item.SubBrandName)
  return subbrandname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrandIndex_Item::release_subbrandname() {
  // @@protoc_insertion_point(field_release:dg.model.BrandIndex.Item.SubBrandName)
  
  return subbrandname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrandIndex_Item::set_allocated_subbrandname(::std::string* subbrandname) {
  if (subbrandname != NULL) {
    
  } else {
    
  }
  subbrandname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subbrandname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.BrandIndex.Item.SubBrandName)
}

// optional string YearModelName = 7;
inline void BrandIndex_Item::clear_yearmodelname() {
  yearmodelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BrandIndex_Item::yearmodelname() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.YearModelName)
  return yearmodelname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrandIndex_Item::set_yearmodelname(const ::std::string& value) {
  
  yearmodelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.YearModelName)
}
inline void BrandIndex_Item::set_yearmodelname(const char* value) {
  
  yearmodelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.BrandIndex.Item.YearModelName)
}
inline void BrandIndex_Item::set_yearmodelname(const char* value, size_t size) {
  
  yearmodelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.BrandIndex.Item.YearModelName)
}
inline ::std::string* BrandIndex_Item::mutable_yearmodelname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.BrandIndex.Item.YearModelName)
  return yearmodelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrandIndex_Item::release_yearmodelname() {
  // @@protoc_insertion_point(field_release:dg.model.BrandIndex.Item.YearModelName)
  
  return yearmodelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrandIndex_Item::set_allocated_yearmodelname(::std::string* yearmodelname) {
  if (yearmodelname != NULL) {
    
  } else {
    
  }
  yearmodelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yearmodelname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.BrandIndex.Item.YearModelName)
}

// -------------------------------------------------------------------

// BrandIndex

// repeated .dg.model.BrandIndex.Item Items = 1;
inline int BrandIndex::items_size() const {
  return items_.size();
}
inline void BrandIndex::clear_items() {
  items_.Clear();
}
inline const ::dg::model::BrandIndex_Item& BrandIndex::items(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Items)
  return items_.Get(index);
}
inline ::dg::model::BrandIndex_Item* BrandIndex::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.BrandIndex.Items)
  return items_.Mutable(index);
}
inline ::dg::model::BrandIndex_Item* BrandIndex::add_items() {
  // @@protoc_insertion_point(field_add:dg.model.BrandIndex.Items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::BrandIndex_Item >*
BrandIndex::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.BrandIndex.Items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::BrandIndex_Item >&
BrandIndex::items() const {
  // @@protoc_insertion_point(field_list:dg.model.BrandIndex.Items)
  return items_;
}

// -------------------------------------------------------------------

// IndexResponse

// optional .dg.model.CommonIndex Index = 1;
inline bool IndexResponse::has_index() const {
  return index_content_case() == kIndex;
}
inline void IndexResponse::set_has_index() {
  _oneof_case_[0] = kIndex;
}
inline void IndexResponse::clear_index() {
  if (has_index()) {
    delete index_content_.index_;
    clear_has_index_content();
  }
}
inline  const ::dg::model::CommonIndex& IndexResponse::index() const {
  // @@protoc_insertion_point(field_get:dg.model.IndexResponse.Index)
  return has_index()
      ? *index_content_.index_
      : ::dg::model::CommonIndex::default_instance();
}
inline ::dg::model::CommonIndex* IndexResponse::mutable_index() {
  if (!has_index()) {
    clear_index_content();
    set_has_index();
    index_content_.index_ = new ::dg::model::CommonIndex;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.IndexResponse.Index)
  return index_content_.index_;
}
inline ::dg::model::CommonIndex* IndexResponse::release_index() {
  // @@protoc_insertion_point(field_release:dg.model.IndexResponse.Index)
  if (has_index()) {
    clear_has_index_content();
    ::dg::model::CommonIndex* temp = index_content_.index_;
    index_content_.index_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void IndexResponse::set_allocated_index(::dg::model::CommonIndex* index) {
  clear_index_content();
  if (index) {
    set_has_index();
    index_content_.index_ = index;
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.IndexResponse.Index)
}

// optional .dg.model.BrandIndex BrandIndex = 2;
inline bool IndexResponse::has_brandindex() const {
  return index_content_case() == kBrandIndex;
}
inline void IndexResponse::set_has_brandindex() {
  _oneof_case_[0] = kBrandIndex;
}
inline void IndexResponse::clear_brandindex() {
  if (has_brandindex()) {
    delete index_content_.brandindex_;
    clear_has_index_content();
  }
}
inline  const ::dg::model::BrandIndex& IndexResponse::brandindex() const {
  // @@protoc_insertion_point(field_get:dg.model.IndexResponse.BrandIndex)
  return has_brandindex()
      ? *index_content_.brandindex_
      : ::dg::model::BrandIndex::default_instance();
}
inline ::dg::model::BrandIndex* IndexResponse::mutable_brandindex() {
  if (!has_brandindex()) {
    clear_index_content();
    set_has_brandindex();
    index_content_.brandindex_ = new ::dg::model::BrandIndex;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.IndexResponse.BrandIndex)
  return index_content_.brandindex_;
}
inline ::dg::model::BrandIndex* IndexResponse::release_brandindex() {
  // @@protoc_insertion_point(field_release:dg.model.IndexResponse.BrandIndex)
  if (has_brandindex()) {
    clear_has_index_content();
    ::dg::model::BrandIndex* temp = index_content_.brandindex_;
    index_content_.brandindex_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void IndexResponse::set_allocated_brandindex(::dg::model::BrandIndex* brandindex) {
  clear_index_content();
  if (brandindex) {
    set_has_brandindex();
    index_content_.brandindex_ = brandindex;
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.IndexResponse.BrandIndex)
}

inline bool IndexResponse::has_index_content() const {
  return index_content_case() != INDEX_CONTENT_NOT_SET;
}
inline void IndexResponse::clear_has_index_content() {
  _oneof_case_[0] = INDEX_CONTENT_NOT_SET;
}
inline IndexResponse::IndexContentCase IndexResponse::index_content_case() const {
  return IndexResponse::IndexContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WitnessRequest

// optional .dg.model.WitnessRequestContext Context = 1;
inline bool WitnessRequest::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
inline void WitnessRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
inline const ::dg::model::WitnessRequestContext& WitnessRequest::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequest.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::dg::model::WitnessRequestContext* WitnessRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessRequestContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequest.Context)
  return context_;
}
inline ::dg::model::WitnessRequestContext* WitnessRequest::release_context() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessRequest.Context)
  
  ::dg::model::WitnessRequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void WitnessRequest::set_allocated_context(::dg::model::WitnessRequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequest.Context)
}

// optional .dg.model.WitnessImage Image = 2;
inline bool WitnessRequest::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
inline void WitnessRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::dg::model::WitnessImage& WitnessRequest::image() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequest.Image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::dg::model::WitnessImage* WitnessRequest::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::dg::model::WitnessImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequest.Image)
  return image_;
}
inline ::dg::model::WitnessImage* WitnessRequest::release_image() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessRequest.Image)
  
  ::dg::model::WitnessImage* temp = image_;
  image_ = NULL;
  return temp;
}
inline void WitnessRequest::set_allocated_image(::dg::model::WitnessImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequest.Image)
}

// -------------------------------------------------------------------

// WitnessBatchRequest

// optional .dg.model.WitnessRequestContext Context = 1;
inline bool WitnessBatchRequest::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
inline void WitnessBatchRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
inline const ::dg::model::WitnessRequestContext& WitnessBatchRequest::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchRequest.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::dg::model::WitnessRequestContext* WitnessBatchRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessRequestContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchRequest.Context)
  return context_;
}
inline ::dg::model::WitnessRequestContext* WitnessBatchRequest::release_context() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessBatchRequest.Context)
  
  ::dg::model::WitnessRequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void WitnessBatchRequest::set_allocated_context(::dg::model::WitnessRequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessBatchRequest.Context)
}

// repeated .dg.model.WitnessImage Images = 2;
inline int WitnessBatchRequest::images_size() const {
  return images_.size();
}
inline void WitnessBatchRequest::clear_images() {
  images_.Clear();
}
inline const ::dg::model::WitnessImage& WitnessBatchRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchRequest.Images)
  return images_.Get(index);
}
inline ::dg::model::WitnessImage* WitnessBatchRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchRequest.Images)
  return images_.Mutable(index);
}
inline ::dg::model::WitnessImage* WitnessBatchRequest::add_images() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessBatchRequest.Images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessImage >*
WitnessBatchRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessBatchRequest.Images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessImage >&
WitnessBatchRequest::images() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessBatchRequest.Images)
  return images_;
}

// -------------------------------------------------------------------

// WitnessResponse

// optional .dg.model.WitnessResponseContext Context = 1;
inline bool WitnessResponse::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
inline void WitnessResponse::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
inline const ::dg::model::WitnessResponseContext& WitnessResponse::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponse.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::dg::model::WitnessResponseContext* WitnessResponse::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessResponseContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponse.Context)
  return context_;
}
inline ::dg::model::WitnessResponseContext* WitnessResponse::release_context() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponse.Context)
  
  ::dg::model::WitnessResponseContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void WitnessResponse::set_allocated_context(::dg::model::WitnessResponseContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponse.Context)
}

// optional .dg.model.WitnessResult Result = 2;
inline bool WitnessResponse::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
inline void WitnessResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
inline const ::dg::model::WitnessResult& WitnessResponse::result() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponse.Result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::dg::model::WitnessResult* WitnessResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::dg::model::WitnessResult;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponse.Result)
  return result_;
}
inline ::dg::model::WitnessResult* WitnessResponse::release_result() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponse.Result)
  
  ::dg::model::WitnessResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline void WitnessResponse::set_allocated_result(::dg::model::WitnessResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponse.Result)
}

// -------------------------------------------------------------------

// WitnessBatchResponse

// optional .dg.model.WitnessResponseContext Context = 1;
inline bool WitnessBatchResponse::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
inline void WitnessBatchResponse::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
inline const ::dg::model::WitnessResponseContext& WitnessBatchResponse::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchResponse.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::dg::model::WitnessResponseContext* WitnessBatchResponse::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessResponseContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchResponse.Context)
  return context_;
}
inline ::dg::model::WitnessResponseContext* WitnessBatchResponse::release_context() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessBatchResponse.Context)
  
  ::dg::model::WitnessResponseContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void WitnessBatchResponse::set_allocated_context(::dg::model::WitnessResponseContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessBatchResponse.Context)
}

// repeated .dg.model.WitnessResult Results = 2;
inline int WitnessBatchResponse::results_size() const {
  return results_.size();
}
inline void WitnessBatchResponse::clear_results() {
  results_.Clear();
}
inline const ::dg::model::WitnessResult& WitnessBatchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchResponse.Results)
  return results_.Get(index);
}
inline ::dg::model::WitnessResult* WitnessBatchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchResponse.Results)
  return results_.Mutable(index);
}
inline ::dg::model::WitnessResult* WitnessBatchResponse::add_results() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessBatchResponse.Results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessResult >*
WitnessBatchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessBatchResponse.Results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessResult >&
WitnessBatchResponse::results() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessBatchResponse.Results)
  return results_;
}

// -------------------------------------------------------------------

// WitnessRelativeROI

// optional int32 PosX = 1;
inline void WitnessRelativeROI::clear_posx() {
  posx_ = 0;
}
inline ::google::protobuf::int32 WitnessRelativeROI::posx() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRelativeROI.PosX)
  return posx_;
}
inline void WitnessRelativeROI::set_posx(::google::protobuf::int32 value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRelativeROI.PosX)
}

// optional int32 PosY = 2;
inline void WitnessRelativeROI::clear_posy() {
  posy_ = 0;
}
inline ::google::protobuf::int32 WitnessRelativeROI::posy() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRelativeROI.PosY)
  return posy_;
}
inline void WitnessRelativeROI::set_posy(::google::protobuf::int32 value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRelativeROI.PosY)
}

// optional int32 Width = 3;
inline void WitnessRelativeROI::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 WitnessRelativeROI::width() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRelativeROI.Width)
  return width_;
}
inline void WitnessRelativeROI::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRelativeROI.Width)
}

// optional int32 Height = 4;
inline void WitnessRelativeROI::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 WitnessRelativeROI::height() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRelativeROI.Height)
  return height_;
}
inline void WitnessRelativeROI::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRelativeROI.Height)
}

// -------------------------------------------------------------------

// WitnessMarginROI

// optional int32 Left = 1;
inline void WitnessMarginROI::clear_left() {
  left_ = 0;
}
inline ::google::protobuf::int32 WitnessMarginROI::left() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessMarginROI.Left)
  return left_;
}
inline void WitnessMarginROI::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessMarginROI.Left)
}

// optional int32 Top = 2;
inline void WitnessMarginROI::clear_top() {
  top_ = 0;
}
inline ::google::protobuf::int32 WitnessMarginROI::top() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessMarginROI.Top)
  return top_;
}
inline void WitnessMarginROI::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessMarginROI.Top)
}

// optional int32 Right = 3;
inline void WitnessMarginROI::clear_right() {
  right_ = 0;
}
inline ::google::protobuf::int32 WitnessMarginROI::right() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessMarginROI.Right)
  return right_;
}
inline void WitnessMarginROI::set_right(::google::protobuf::int32 value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessMarginROI.Right)
}

// optional int32 Bottom = 4;
inline void WitnessMarginROI::clear_bottom() {
  bottom_ = 0;
}
inline ::google::protobuf::int32 WitnessMarginROI::bottom() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessMarginROI.Bottom)
  return bottom_;
}
inline void WitnessMarginROI::set_bottom(::google::protobuf::int32 value) {
  
  bottom_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessMarginROI.Bottom)
}

// -------------------------------------------------------------------

// WitnessRequestContext

// optional string SessionId = 1;
inline void WitnessRequestContext::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessRequestContext::sessionid() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.SessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessRequestContext::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.SessionId)
}
inline void WitnessRequestContext::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessRequestContext.SessionId)
}
inline void WitnessRequestContext::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessRequestContext.SessionId)
}
inline ::std::string* WitnessRequestContext::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequestContext.SessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessRequestContext::release_sessionid() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessRequestContext.SessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessRequestContext::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequestContext.SessionId)
}

// optional string UserName = 2;
inline void WitnessRequestContext::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessRequestContext::username() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.UserName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessRequestContext::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.UserName)
}
inline void WitnessRequestContext::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessRequestContext.UserName)
}
inline void WitnessRequestContext::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessRequestContext.UserName)
}
inline ::std::string* WitnessRequestContext::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequestContext.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessRequestContext::release_username() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessRequestContext.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessRequestContext::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequestContext.UserName)
}

// optional string Token = 3;
inline void WitnessRequestContext::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessRequestContext::token() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessRequestContext::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.Token)
}
inline void WitnessRequestContext::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessRequestContext.Token)
}
inline void WitnessRequestContext::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessRequestContext.Token)
}
inline ::std::string* WitnessRequestContext::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequestContext.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessRequestContext::release_token() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessRequestContext.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessRequestContext::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequestContext.Token)
}

// repeated .dg.model.RecognizeFunctions Functions = 4;
inline int WitnessRequestContext::functions_size() const {
  return functions_.size();
}
inline void WitnessRequestContext::clear_functions() {
  functions_.Clear();
}
inline ::dg::model::RecognizeFunctions WitnessRequestContext::functions(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Functions)
  return static_cast< ::dg::model::RecognizeFunctions >(functions_.Get(index));
}
inline void WitnessRequestContext::set_functions(int index, ::dg::model::RecognizeFunctions value) {
  functions_.Set(index, value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.Functions)
}
inline void WitnessRequestContext::add_functions(::dg::model::RecognizeFunctions value) {
  functions_.Add(value);
  // @@protoc_insertion_point(field_add:dg.model.WitnessRequestContext.Functions)
}
inline const ::google::protobuf::RepeatedField<int>&
WitnessRequestContext::functions() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessRequestContext.Functions)
  return functions_;
}
inline ::google::protobuf::RepeatedField<int>*
WitnessRequestContext::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessRequestContext.Functions)
  return &functions_;
}

// optional .dg.model.RecognizeType Type = 5;
inline void WitnessRequestContext::clear_type() {
  type_ = 0;
}
inline ::dg::model::RecognizeType WitnessRequestContext::type() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Type)
  return static_cast< ::dg::model::RecognizeType >(type_);
}
inline void WitnessRequestContext::set_type(::dg::model::RecognizeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.Type)
}

// repeated .dg.model.StorageConfig Storages = 6;
inline int WitnessRequestContext::storages_size() const {
  return storages_.size();
}
inline void WitnessRequestContext::clear_storages() {
  storages_.Clear();
}
inline const ::dg::model::StorageConfig& WitnessRequestContext::storages(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Storages)
  return storages_.Get(index);
}
inline ::dg::model::StorageConfig* WitnessRequestContext::mutable_storages(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequestContext.Storages)
  return storages_.Mutable(index);
}
inline ::dg::model::StorageConfig* WitnessRequestContext::add_storages() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessRequestContext.Storages)
  return storages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::StorageConfig >*
WitnessRequestContext::mutable_storages() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessRequestContext.Storages)
  return &storages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::StorageConfig >&
WitnessRequestContext::storages() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessRequestContext.Storages)
  return storages_;
}

// map<string, string> Params = 7;
inline int WitnessRequestContext::params_size() const {
  return params_.size();
}
inline void WitnessRequestContext::clear_params() {
  params_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
WitnessRequestContext::params() const {
  // @@protoc_insertion_point(field_map:dg.model.WitnessRequestContext.Params)
  return params_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
WitnessRequestContext::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.WitnessRequestContext.Params)
  return params_.MutableMap();
}

// optional int32 MinFaceSize = 8;
inline void WitnessRequestContext::clear_minfacesize() {
  minfacesize_ = 0;
}
inline ::google::protobuf::int32 WitnessRequestContext::minfacesize() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.MinFaceSize)
  return minfacesize_;
}
inline void WitnessRequestContext::set_minfacesize(::google::protobuf::int32 value) {
  
  minfacesize_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.MinFaceSize)
}

// optional int32 MaxFaceSize = 9;
inline void WitnessRequestContext::clear_maxfacesize() {
  maxfacesize_ = 0;
}
inline ::google::protobuf::int32 WitnessRequestContext::maxfacesize() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.MaxFaceSize)
  return maxfacesize_;
}
inline void WitnessRequestContext::set_maxfacesize(::google::protobuf::int32 value) {
  
  maxfacesize_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.MaxFaceSize)
}

// -------------------------------------------------------------------

// WitnessImage

// optional .dg.model.Image Data = 1;
inline bool WitnessImage::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void WitnessImage::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::dg::model::Image& WitnessImage::data() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::dg::model::Image* WitnessImage::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.Data)
  return data_;
}
inline ::dg::model::Image* WitnessImage::release_data() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessImage.Data)
  
  ::dg::model::Image* temp = data_;
  data_ = NULL;
  return temp;
}
inline void WitnessImage::set_allocated_data(::dg::model::Image* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessImage.Data)
}

// optional .dg.model.SrcMetadata WitnessMetaData = 2;
inline bool WitnessImage::has_witnessmetadata() const {
  return !_is_default_instance_ && witnessmetadata_ != NULL;
}
inline void WitnessImage::clear_witnessmetadata() {
  if (GetArenaNoVirtual() == NULL && witnessmetadata_ != NULL) delete witnessmetadata_;
  witnessmetadata_ = NULL;
}
inline const ::dg::model::SrcMetadata& WitnessImage::witnessmetadata() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.WitnessMetaData)
  return witnessmetadata_ != NULL ? *witnessmetadata_ : *default_instance_->witnessmetadata_;
}
inline ::dg::model::SrcMetadata* WitnessImage::mutable_witnessmetadata() {
  
  if (witnessmetadata_ == NULL) {
    witnessmetadata_ = new ::dg::model::SrcMetadata;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.WitnessMetaData)
  return witnessmetadata_;
}
inline ::dg::model::SrcMetadata* WitnessImage::release_witnessmetadata() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessImage.WitnessMetaData)
  
  ::dg::model::SrcMetadata* temp = witnessmetadata_;
  witnessmetadata_ = NULL;
  return temp;
}
inline void WitnessImage::set_allocated_witnessmetadata(::dg::model::SrcMetadata* witnessmetadata) {
  delete witnessmetadata_;
  witnessmetadata_ = witnessmetadata;
  if (witnessmetadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessImage.WitnessMetaData)
}

// repeated .dg.model.WitnessRelativeROI RelativeRoi = 3;
inline int WitnessImage::relativeroi_size() const {
  return relativeroi_.size();
}
inline void WitnessImage::clear_relativeroi() {
  relativeroi_.Clear();
}
inline const ::dg::model::WitnessRelativeROI& WitnessImage::relativeroi(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.RelativeRoi)
  return relativeroi_.Get(index);
}
inline ::dg::model::WitnessRelativeROI* WitnessImage::mutable_relativeroi(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.RelativeRoi)
  return relativeroi_.Mutable(index);
}
inline ::dg::model::WitnessRelativeROI* WitnessImage::add_relativeroi() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessImage.RelativeRoi)
  return relativeroi_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessRelativeROI >*
WitnessImage::mutable_relativeroi() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessImage.RelativeRoi)
  return &relativeroi_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessRelativeROI >&
WitnessImage::relativeroi() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessImage.RelativeRoi)
  return relativeroi_;
}

// repeated .dg.model.WitnessMarginROI MarginRoi = 4;
inline int WitnessImage::marginroi_size() const {
  return marginroi_.size();
}
inline void WitnessImage::clear_marginroi() {
  marginroi_.Clear();
}
inline const ::dg::model::WitnessMarginROI& WitnessImage::marginroi(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.MarginRoi)
  return marginroi_.Get(index);
}
inline ::dg::model::WitnessMarginROI* WitnessImage::mutable_marginroi(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.MarginRoi)
  return marginroi_.Mutable(index);
}
inline ::dg::model::WitnessMarginROI* WitnessImage::add_marginroi() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessImage.MarginRoi)
  return marginroi_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessMarginROI >*
WitnessImage::mutable_marginroi() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessImage.MarginRoi)
  return &marginroi_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessMarginROI >&
WitnessImage::marginroi() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessImage.MarginRoi)
  return marginroi_;
}

// repeated .dg.model.WitnessUserObject UserObject = 5;
inline int WitnessImage::userobject_size() const {
  return userobject_.size();
}
inline void WitnessImage::clear_userobject() {
  userobject_.Clear();
}
inline const ::dg::model::WitnessUserObject& WitnessImage::userobject(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.UserObject)
  return userobject_.Get(index);
}
inline ::dg::model::WitnessUserObject* WitnessImage::mutable_userobject(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.UserObject)
  return userobject_.Mutable(index);
}
inline ::dg::model::WitnessUserObject* WitnessImage::add_userobject() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessImage.UserObject)
  return userobject_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessUserObject >*
WitnessImage::mutable_userobject() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessImage.UserObject)
  return &userobject_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessUserObject >&
WitnessImage::userobject() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessImage.UserObject)
  return userobject_;
}

// -------------------------------------------------------------------

// WitnessResponseContext

// optional string SessionId = 1;
inline void WitnessResponseContext::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessResponseContext::sessionid() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.SessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessResponseContext::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResponseContext.SessionId)
}
inline void WitnessResponseContext::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResponseContext.SessionId)
}
inline void WitnessResponseContext::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResponseContext.SessionId)
}
inline ::std::string* WitnessResponseContext::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.SessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessResponseContext::release_sessionid() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponseContext.SessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessResponseContext::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.SessionId)
}

// optional string Status = 2;
inline void WitnessResponseContext::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessResponseContext::status() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.Status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessResponseContext::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResponseContext.Status)
}
inline void WitnessResponseContext::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResponseContext.Status)
}
inline void WitnessResponseContext::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResponseContext.Status)
}
inline ::std::string* WitnessResponseContext::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.Status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessResponseContext::release_status() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponseContext.Status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessResponseContext::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.Status)
}

// optional string Message = 3;
inline void WitnessResponseContext::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessResponseContext::message() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessResponseContext::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResponseContext.Message)
}
inline void WitnessResponseContext::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResponseContext.Message)
}
inline void WitnessResponseContext::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResponseContext.Message)
}
inline ::std::string* WitnessResponseContext::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessResponseContext::release_message() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponseContext.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessResponseContext::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.Message)
}

// optional .dg.model.Time RequestTs = 4;
inline bool WitnessResponseContext::has_requestts() const {
  return !_is_default_instance_ && requestts_ != NULL;
}
inline void WitnessResponseContext::clear_requestts() {
  if (GetArenaNoVirtual() == NULL && requestts_ != NULL) delete requestts_;
  requestts_ = NULL;
}
inline const ::dg::model::Time& WitnessResponseContext::requestts() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.RequestTs)
  return requestts_ != NULL ? *requestts_ : *default_instance_->requestts_;
}
inline ::dg::model::Time* WitnessResponseContext::mutable_requestts() {
  
  if (requestts_ == NULL) {
    requestts_ = new ::dg::model::Time;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.RequestTs)
  return requestts_;
}
inline ::dg::model::Time* WitnessResponseContext::release_requestts() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponseContext.RequestTs)
  
  ::dg::model::Time* temp = requestts_;
  requestts_ = NULL;
  return temp;
}
inline void WitnessResponseContext::set_allocated_requestts(::dg::model::Time* requestts) {
  delete requestts_;
  requestts_ = requestts;
  if (requestts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.RequestTs)
}

// optional .dg.model.Time ResponseTs = 5;
inline bool WitnessResponseContext::has_responsets() const {
  return !_is_default_instance_ && responsets_ != NULL;
}
inline void WitnessResponseContext::clear_responsets() {
  if (GetArenaNoVirtual() == NULL && responsets_ != NULL) delete responsets_;
  responsets_ = NULL;
}
inline const ::dg::model::Time& WitnessResponseContext::responsets() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.ResponseTs)
  return responsets_ != NULL ? *responsets_ : *default_instance_->responsets_;
}
inline ::dg::model::Time* WitnessResponseContext::mutable_responsets() {
  
  if (responsets_ == NULL) {
    responsets_ = new ::dg::model::Time;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.ResponseTs)
  return responsets_;
}
inline ::dg::model::Time* WitnessResponseContext::release_responsets() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponseContext.ResponseTs)
  
  ::dg::model::Time* temp = responsets_;
  responsets_ = NULL;
  return temp;
}
inline void WitnessResponseContext::set_allocated_responsets(::dg::model::Time* responsets) {
  delete responsets_;
  responsets_ = responsets;
  if (responsets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.ResponseTs)
}

// map<string, .dg.model.Time> DebugTs = 6;
inline int WitnessResponseContext::debugts_size() const {
  return debugts_.size();
}
inline void WitnessResponseContext::clear_debugts() {
  debugts_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::dg::model::Time >&
WitnessResponseContext::debugts() const {
  // @@protoc_insertion_point(field_map:dg.model.WitnessResponseContext.DebugTs)
  return debugts_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::dg::model::Time >*
WitnessResponseContext::mutable_debugts() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.WitnessResponseContext.DebugTs)
  return debugts_.MutableMap();
}

// -------------------------------------------------------------------

// WitnessResult

// optional string InnerStatus = 1;
inline void WitnessResult::clear_innerstatus() {
  innerstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessResult::innerstatus() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.InnerStatus)
  return innerstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessResult::set_innerstatus(const ::std::string& value) {
  
  innerstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResult.InnerStatus)
}
inline void WitnessResult::set_innerstatus(const char* value) {
  
  innerstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResult.InnerStatus)
}
inline void WitnessResult::set_innerstatus(const char* value, size_t size) {
  
  innerstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResult.InnerStatus)
}
inline ::std::string* WitnessResult::mutable_innerstatus() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.InnerStatus)
  return innerstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessResult::release_innerstatus() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResult.InnerStatus)
  
  return innerstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessResult::set_allocated_innerstatus(::std::string* innerstatus) {
  if (innerstatus != NULL) {
    
  } else {
    
  }
  innerstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), innerstatus);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResult.InnerStatus)
}

// optional string InnerMessage = 2;
inline void WitnessResult::clear_innermessage() {
  innermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessResult::innermessage() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.InnerMessage)
  return innermessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessResult::set_innermessage(const ::std::string& value) {
  
  innermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResult.InnerMessage)
}
inline void WitnessResult::set_innermessage(const char* value) {
  
  innermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResult.InnerMessage)
}
inline void WitnessResult::set_innermessage(const char* value, size_t size) {
  
  innermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResult.InnerMessage)
}
inline ::std::string* WitnessResult::mutable_innermessage() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.InnerMessage)
  return innermessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessResult::release_innermessage() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResult.InnerMessage)
  
  return innermessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessResult::set_allocated_innermessage(::std::string* innermessage) {
  if (innermessage != NULL) {
    
  } else {
    
  }
  innermessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), innermessage);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResult.InnerMessage)
}

// optional .dg.model.WitnessImage Image = 3;
inline bool WitnessResult::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
inline void WitnessResult::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::dg::model::WitnessImage& WitnessResult::image() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.Image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::dg::model::WitnessImage* WitnessResult::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::dg::model::WitnessImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.Image)
  return image_;
}
inline ::dg::model::WitnessImage* WitnessResult::release_image() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResult.Image)
  
  ::dg::model::WitnessImage* temp = image_;
  image_ = NULL;
  return temp;
}
inline void WitnessResult::set_allocated_image(::dg::model::WitnessImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResult.Image)
}

// repeated .dg.model.RecVehicle Vehicles = 4;
inline int WitnessResult::vehicles_size() const {
  return vehicles_.size();
}
inline void WitnessResult::clear_vehicles() {
  vehicles_.Clear();
}
inline const ::dg::model::RecVehicle& WitnessResult::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.Vehicles)
  return vehicles_.Get(index);
}
inline ::dg::model::RecVehicle* WitnessResult::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.Vehicles)
  return vehicles_.Mutable(index);
}
inline ::dg::model::RecVehicle* WitnessResult::add_vehicles() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessResult.Vehicles)
  return vehicles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >*
WitnessResult::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessResult.Vehicles)
  return &vehicles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >&
WitnessResult::vehicles() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessResult.Vehicles)
  return vehicles_;
}

// repeated .dg.model.RecPedestrian Pedestrian = 5;
inline int WitnessResult::pedestrian_size() const {
  return pedestrian_.size();
}
inline void WitnessResult::clear_pedestrian() {
  pedestrian_.Clear();
}
inline const ::dg::model::RecPedestrian& WitnessResult::pedestrian(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.Pedestrian)
  return pedestrian_.Get(index);
}
inline ::dg::model::RecPedestrian* WitnessResult::mutable_pedestrian(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.Pedestrian)
  return pedestrian_.Mutable(index);
}
inline ::dg::model::RecPedestrian* WitnessResult::add_pedestrian() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessResult.Pedestrian)
  return pedestrian_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >*
WitnessResult::mutable_pedestrian() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessResult.Pedestrian)
  return &pedestrian_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >&
WitnessResult::pedestrian() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessResult.Pedestrian)
  return pedestrian_;
}

// repeated .dg.model.RecNonMotorVehicle NonMotorVehicles = 6;
inline int WitnessResult::nonmotorvehicles_size() const {
  return nonmotorvehicles_.size();
}
inline void WitnessResult::clear_nonmotorvehicles() {
  nonmotorvehicles_.Clear();
}
inline const ::dg::model::RecNonMotorVehicle& WitnessResult::nonmotorvehicles(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.NonMotorVehicles)
  return nonmotorvehicles_.Get(index);
}
inline ::dg::model::RecNonMotorVehicle* WitnessResult::mutable_nonmotorvehicles(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.NonMotorVehicles)
  return nonmotorvehicles_.Mutable(index);
}
inline ::dg::model::RecNonMotorVehicle* WitnessResult::add_nonmotorvehicles() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessResult.NonMotorVehicles)
  return nonmotorvehicles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle >*
WitnessResult::mutable_nonmotorvehicles() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessResult.NonMotorVehicles)
  return &nonmotorvehicles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle >&
WitnessResult::nonmotorvehicles() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessResult.NonMotorVehicles)
  return nonmotorvehicles_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace dg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dg::model::IndexType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::IndexType>() {
  return ::dg::model::IndexType_descriptor();
}
template <> struct is_proto_enum< ::dg::model::WitnessUserObjectType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::WitnessUserObjectType>() {
  return ::dg::model::WitnessUserObjectType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_witness_2eproto__INCLUDED
