// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#ifndef PROTOBUF_system_2eproto__INCLUDED
#define PROTOBUF_system_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "localcommon.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace dg {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_system_2eproto();
void protobuf_AssignDesc_system_2eproto();
void protobuf_ShutdownFile_system_2eproto();

class EngineStatus;
class GetInstancesRequest;
class InstanceConfig;
class InstanceConfigureRequest;
class InstanceConfigureResponse;
class PingRequest;
class PingResponse;
class RankFConfig;
class RankVConfig;
class RecImageFConfig;
class RecImageVConfig;
class RecVideoFConfig;
class RecVideoVConfig;
class SystemStatusRequest;
class SystemStatusResponse;

enum InstanceType {
  CFG_TYPE_VEHICLE_IMAGE = 0,
  CFG_TYPE_VEHICLE_VIDEO = 1,
  CFG_TYPE_VEHICLE_RANKER = 2,
  CFG_TYPE_FACE_IMAGE = 3,
  CFG_TYPE_FACE_VIDEO = 4,
  CFG_TYPE_FACE_RANKER = 5,
  InstanceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  InstanceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool InstanceType_IsValid(int value);
const InstanceType InstanceType_MIN = CFG_TYPE_VEHICLE_IMAGE;
const InstanceType InstanceType_MAX = CFG_TYPE_FACE_RANKER;
const int InstanceType_ARRAYSIZE = InstanceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InstanceType_descriptor();
inline const ::std::string& InstanceType_Name(InstanceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InstanceType_descriptor(), value);
}
inline bool InstanceType_Parse(
    const ::std::string& name, InstanceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstanceType>(
    InstanceType_descriptor(), name, value);
}
// ===================================================================

class PingRequest : public ::google::protobuf::Message {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  void Swap(PingRequest* other);

  // implements Message ----------------------------------------------

  inline PingRequest* New() const { return New(NULL); }

  PingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dg.model.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static PingRequest* default_instance_;
};
// -------------------------------------------------------------------

class PingResponse : public ::google::protobuf::Message {
 public:
  PingResponse();
  virtual ~PingResponse();

  PingResponse(const PingResponse& from);

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingResponse& default_instance();

  void Swap(PingResponse* other);

  // implements Message ----------------------------------------------

  inline PingResponse* New() const { return New(NULL); }

  PingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingResponse& from);
  void MergeFrom(const PingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:dg.model.PingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static PingResponse* default_instance_;
};
// -------------------------------------------------------------------

class SystemStatusRequest : public ::google::protobuf::Message {
 public:
  SystemStatusRequest();
  virtual ~SystemStatusRequest();

  SystemStatusRequest(const SystemStatusRequest& from);

  inline SystemStatusRequest& operator=(const SystemStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemStatusRequest& default_instance();

  void Swap(SystemStatusRequest* other);

  // implements Message ----------------------------------------------

  inline SystemStatusRequest* New() const { return New(NULL); }

  SystemStatusRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemStatusRequest& from);
  void MergeFrom(const SystemStatusRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dg.model.SystemStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static SystemStatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class SystemStatusResponse : public ::google::protobuf::Message {
 public:
  SystemStatusResponse();
  virtual ~SystemStatusResponse();

  SystemStatusResponse(const SystemStatusResponse& from);

  inline SystemStatusResponse& operator=(const SystemStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemStatusResponse& default_instance();

  void Swap(SystemStatusResponse* other);

  // implements Message ----------------------------------------------

  inline SystemStatusResponse* New() const { return New(NULL); }

  SystemStatusResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemStatusResponse& from);
  void MergeFrom(const SystemStatusResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ModelVer = 1;
  void clear_modelver();
  static const int kModelVerFieldNumber = 1;
  const ::std::string& modelver() const;
  void set_modelver(const ::std::string& value);
  void set_modelver(const char* value);
  void set_modelver(const char* value, size_t size);
  ::std::string* mutable_modelver();
  ::std::string* release_modelver();
  void set_allocated_modelver(::std::string* modelver);

  // optional string EngineVer = 2;
  void clear_enginever();
  static const int kEngineVerFieldNumber = 2;
  const ::std::string& enginever() const;
  void set_enginever(const ::std::string& value);
  void set_enginever(const char* value);
  void set_enginever(const char* value, size_t size);
  ::std::string* mutable_enginever();
  ::std::string* release_enginever();
  void set_allocated_enginever(::std::string* enginever);

  // optional string ServiceVer = 3;
  void clear_servicever();
  static const int kServiceVerFieldNumber = 3;
  const ::std::string& servicever() const;
  void set_servicever(const ::std::string& value);
  void set_servicever(const char* value);
  void set_servicever(const char* value, size_t size);
  ::std::string* mutable_servicever();
  ::std::string* release_servicever();
  void set_allocated_servicever(::std::string* servicever);

  // optional string CpuUsage = 4;
  void clear_cpuusage();
  static const int kCpuUsageFieldNumber = 4;
  const ::std::string& cpuusage() const;
  void set_cpuusage(const ::std::string& value);
  void set_cpuusage(const char* value);
  void set_cpuusage(const char* value, size_t size);
  ::std::string* mutable_cpuusage();
  ::std::string* release_cpuusage();
  void set_allocated_cpuusage(::std::string* cpuusage);

  // optional string AvailMem = 5;
  void clear_availmem();
  static const int kAvailMemFieldNumber = 5;
  const ::std::string& availmem() const;
  void set_availmem(const ::std::string& value);
  void set_availmem(const char* value);
  void set_availmem(const char* value, size_t size);
  ::std::string* mutable_availmem();
  ::std::string* release_availmem();
  void set_allocated_availmem(::std::string* availmem);

  // optional string TotalMem = 6;
  void clear_totalmem();
  static const int kTotalMemFieldNumber = 6;
  const ::std::string& totalmem() const;
  void set_totalmem(const ::std::string& value);
  void set_totalmem(const char* value);
  void set_totalmem(const char* value, size_t size);
  ::std::string* mutable_totalmem();
  ::std::string* release_totalmem();
  void set_allocated_totalmem(::std::string* totalmem);

  // optional string AvailDisk = 7;
  void clear_availdisk();
  static const int kAvailDiskFieldNumber = 7;
  const ::std::string& availdisk() const;
  void set_availdisk(const ::std::string& value);
  void set_availdisk(const char* value);
  void set_availdisk(const char* value, size_t size);
  ::std::string* mutable_availdisk();
  ::std::string* release_availdisk();
  void set_allocated_availdisk(::std::string* availdisk);

  // optional string TotalDisk = 8;
  void clear_totaldisk();
  static const int kTotalDiskFieldNumber = 8;
  const ::std::string& totaldisk() const;
  void set_totaldisk(const ::std::string& value);
  void set_totaldisk(const char* value);
  void set_totaldisk(const char* value, size_t size);
  ::std::string* mutable_totaldisk();
  ::std::string* release_totaldisk();
  void set_allocated_totaldisk(::std::string* totaldisk);

  // optional string NetIOSend = 9;
  void clear_netiosend();
  static const int kNetIOSendFieldNumber = 9;
  const ::std::string& netiosend() const;
  void set_netiosend(const ::std::string& value);
  void set_netiosend(const char* value);
  void set_netiosend(const char* value, size_t size);
  ::std::string* mutable_netiosend();
  ::std::string* release_netiosend();
  void set_allocated_netiosend(::std::string* netiosend);

  // optional string NetIORecv = 10;
  void clear_netiorecv();
  static const int kNetIORecvFieldNumber = 10;
  const ::std::string& netiorecv() const;
  void set_netiorecv(const ::std::string& value);
  void set_netiorecv(const char* value);
  void set_netiorecv(const char* value, size_t size);
  ::std::string* mutable_netiorecv();
  ::std::string* release_netiorecv();
  void set_allocated_netiorecv(::std::string* netiorecv);

  // optional string GpuUsage = 11;
  void clear_gpuusage();
  static const int kGpuUsageFieldNumber = 11;
  const ::std::string& gpuusage() const;
  void set_gpuusage(const ::std::string& value);
  void set_gpuusage(const char* value);
  void set_gpuusage(const char* value, size_t size);
  ::std::string* mutable_gpuusage();
  ::std::string* release_gpuusage();
  void set_allocated_gpuusage(::std::string* gpuusage);

  // optional string GpuAvailMem = 12;
  void clear_gpuavailmem();
  static const int kGpuAvailMemFieldNumber = 12;
  const ::std::string& gpuavailmem() const;
  void set_gpuavailmem(const ::std::string& value);
  void set_gpuavailmem(const char* value);
  void set_gpuavailmem(const char* value, size_t size);
  ::std::string* mutable_gpuavailmem();
  ::std::string* release_gpuavailmem();
  void set_allocated_gpuavailmem(::std::string* gpuavailmem);

  // optional string GpuTotalMem = 13;
  void clear_gputotalmem();
  static const int kGpuTotalMemFieldNumber = 13;
  const ::std::string& gputotalmem() const;
  void set_gputotalmem(const ::std::string& value);
  void set_gputotalmem(const char* value);
  void set_gputotalmem(const char* value, size_t size);
  ::std::string* mutable_gputotalmem();
  ::std::string* release_gputotalmem();
  void set_allocated_gputotalmem(::std::string* gputotalmem);

  // @@protoc_insertion_point(class_scope:dg.model.SystemStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr modelver_;
  ::google::protobuf::internal::ArenaStringPtr enginever_;
  ::google::protobuf::internal::ArenaStringPtr servicever_;
  ::google::protobuf::internal::ArenaStringPtr cpuusage_;
  ::google::protobuf::internal::ArenaStringPtr availmem_;
  ::google::protobuf::internal::ArenaStringPtr totalmem_;
  ::google::protobuf::internal::ArenaStringPtr availdisk_;
  ::google::protobuf::internal::ArenaStringPtr totaldisk_;
  ::google::protobuf::internal::ArenaStringPtr netiosend_;
  ::google::protobuf::internal::ArenaStringPtr netiorecv_;
  ::google::protobuf::internal::ArenaStringPtr gpuusage_;
  ::google::protobuf::internal::ArenaStringPtr gpuavailmem_;
  ::google::protobuf::internal::ArenaStringPtr gputotalmem_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static SystemStatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class InstanceConfigureRequest : public ::google::protobuf::Message {
 public:
  InstanceConfigureRequest();
  virtual ~InstanceConfigureRequest();

  InstanceConfigureRequest(const InstanceConfigureRequest& from);

  inline InstanceConfigureRequest& operator=(const InstanceConfigureRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceConfigureRequest& default_instance();

  void Swap(InstanceConfigureRequest* other);

  // implements Message ----------------------------------------------

  inline InstanceConfigureRequest* New() const { return New(NULL); }

  InstanceConfigureRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceConfigureRequest& from);
  void MergeFrom(const InstanceConfigureRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InstanceConfigureRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.RecImageVConfig RecImageVConfig = 1;
  bool has_recimagevconfig() const;
  void clear_recimagevconfig();
  static const int kRecImageVConfigFieldNumber = 1;
  const ::dg::model::RecImageVConfig& recimagevconfig() const;
  ::dg::model::RecImageVConfig* mutable_recimagevconfig();
  ::dg::model::RecImageVConfig* release_recimagevconfig();
  void set_allocated_recimagevconfig(::dg::model::RecImageVConfig* recimagevconfig);

  // optional .dg.model.RecImageFConfig RecImageFConfig = 2;
  bool has_recimagefconfig() const;
  void clear_recimagefconfig();
  static const int kRecImageFConfigFieldNumber = 2;
  const ::dg::model::RecImageFConfig& recimagefconfig() const;
  ::dg::model::RecImageFConfig* mutable_recimagefconfig();
  ::dg::model::RecImageFConfig* release_recimagefconfig();
  void set_allocated_recimagefconfig(::dg::model::RecImageFConfig* recimagefconfig);

  // optional .dg.model.RecVideoVConfig RecVideoVConfig = 3;
  bool has_recvideovconfig() const;
  void clear_recvideovconfig();
  static const int kRecVideoVConfigFieldNumber = 3;
  const ::dg::model::RecVideoVConfig& recvideovconfig() const;
  ::dg::model::RecVideoVConfig* mutable_recvideovconfig();
  ::dg::model::RecVideoVConfig* release_recvideovconfig();
  void set_allocated_recvideovconfig(::dg::model::RecVideoVConfig* recvideovconfig);

  // optional .dg.model.RecVideoFConfig RecVideoFConfig = 4;
  bool has_recvideofconfig() const;
  void clear_recvideofconfig();
  static const int kRecVideoFConfigFieldNumber = 4;
  const ::dg::model::RecVideoFConfig& recvideofconfig() const;
  ::dg::model::RecVideoFConfig* mutable_recvideofconfig();
  ::dg::model::RecVideoFConfig* release_recvideofconfig();
  void set_allocated_recvideofconfig(::dg::model::RecVideoFConfig* recvideofconfig);

  // optional .dg.model.RankVConfig RankVConfig = 5;
  bool has_rankvconfig() const;
  void clear_rankvconfig();
  static const int kRankVConfigFieldNumber = 5;
  const ::dg::model::RankVConfig& rankvconfig() const;
  ::dg::model::RankVConfig* mutable_rankvconfig();
  ::dg::model::RankVConfig* release_rankvconfig();
  void set_allocated_rankvconfig(::dg::model::RankVConfig* rankvconfig);

  // optional .dg.model.RankFConfig RankFConfig = 6;
  bool has_rankfconfig() const;
  void clear_rankfconfig();
  static const int kRankFConfigFieldNumber = 6;
  const ::dg::model::RankFConfig& rankfconfig() const;
  ::dg::model::RankFConfig* mutable_rankfconfig();
  ::dg::model::RankFConfig* release_rankfconfig();
  void set_allocated_rankfconfig(::dg::model::RankFConfig* rankfconfig);

  // @@protoc_insertion_point(class_scope:dg.model.InstanceConfigureRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::RecImageVConfig* recimagevconfig_;
  ::dg::model::RecImageFConfig* recimagefconfig_;
  ::dg::model::RecVideoVConfig* recvideovconfig_;
  ::dg::model::RecVideoFConfig* recvideofconfig_;
  ::dg::model::RankVConfig* rankvconfig_;
  ::dg::model::RankFConfig* rankfconfig_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static InstanceConfigureRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetInstancesRequest : public ::google::protobuf::Message {
 public:
  GetInstancesRequest();
  virtual ~GetInstancesRequest();

  GetInstancesRequest(const GetInstancesRequest& from);

  inline GetInstancesRequest& operator=(const GetInstancesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInstancesRequest& default_instance();

  void Swap(GetInstancesRequest* other);

  // implements Message ----------------------------------------------

  inline GetInstancesRequest* New() const { return New(NULL); }

  GetInstancesRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInstancesRequest& from);
  void MergeFrom(const GetInstancesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetInstancesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dg.model.GetInstancesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static GetInstancesRequest* default_instance_;
};
// -------------------------------------------------------------------

class InstanceConfigureResponse : public ::google::protobuf::Message {
 public:
  InstanceConfigureResponse();
  virtual ~InstanceConfigureResponse();

  InstanceConfigureResponse(const InstanceConfigureResponse& from);

  inline InstanceConfigureResponse& operator=(const InstanceConfigureResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceConfigureResponse& default_instance();

  void Swap(InstanceConfigureResponse* other);

  // implements Message ----------------------------------------------

  inline InstanceConfigureResponse* New() const { return New(NULL); }

  InstanceConfigureResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceConfigureResponse& from);
  void MergeFrom(const InstanceConfigureResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InstanceConfigureResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // optional string Message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // repeated .dg.model.EngineStatus Results = 3;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 3;
  const ::dg::model::EngineStatus& results(int index) const;
  ::dg::model::EngineStatus* mutable_results(int index);
  ::dg::model::EngineStatus* add_results();
  ::google::protobuf::RepeatedPtrField< ::dg::model::EngineStatus >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::EngineStatus >&
      results() const;

  // @@protoc_insertion_point(class_scope:dg.model.InstanceConfigureResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::EngineStatus > results_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static InstanceConfigureResponse* default_instance_;
};
// -------------------------------------------------------------------

class InstanceConfig : public ::google::protobuf::Message {
 public:
  InstanceConfig();
  virtual ~InstanceConfig();

  InstanceConfig(const InstanceConfig& from);

  inline InstanceConfig& operator=(const InstanceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceConfig& default_instance();

  void Swap(InstanceConfig* other);

  // implements Message ----------------------------------------------

  inline InstanceConfig* New() const { return New(NULL); }

  InstanceConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceConfig& from);
  void MergeFrom(const InstanceConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InstanceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.InstanceType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::dg::model::InstanceType type() const;
  void set_type(::dg::model::InstanceType value);

  // optional int32 Count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // repeated .dg.model.RecognizeFunctions Functions = 3;
  int functions_size() const;
  void clear_functions();
  static const int kFunctionsFieldNumber = 3;
  ::dg::model::RecognizeFunctions functions(int index) const;
  void set_functions(int index, ::dg::model::RecognizeFunctions value);
  void add_functions(::dg::model::RecognizeFunctions value);
  const ::google::protobuf::RepeatedField<int>& functions() const;
  ::google::protobuf::RepeatedField<int>* mutable_functions();

  // optional .dg.model.StorageConfig StorageConfig = 4;
  bool has_storageconfig() const;
  void clear_storageconfig();
  static const int kStorageConfigFieldNumber = 4;
  const ::dg::model::StorageConfig& storageconfig() const;
  ::dg::model::StorageConfig* mutable_storageconfig();
  ::dg::model::StorageConfig* release_storageconfig();
  void set_allocated_storageconfig(::dg::model::StorageConfig* storageconfig);

  // @@protoc_insertion_point(class_scope:dg.model.InstanceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int type_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedField<int> functions_;
  mutable int _functions_cached_byte_size_;
  ::dg::model::StorageConfig* storageconfig_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static InstanceConfig* default_instance_;
};
// -------------------------------------------------------------------

class RecImageVConfig : public ::google::protobuf::Message {
 public:
  RecImageVConfig();
  virtual ~RecImageVConfig();

  RecImageVConfig(const RecImageVConfig& from);

  inline RecImageVConfig& operator=(const RecImageVConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecImageVConfig& default_instance();

  void Swap(RecImageVConfig* other);

  // implements Message ----------------------------------------------

  inline RecImageVConfig* New() const { return New(NULL); }

  RecImageVConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecImageVConfig& from);
  void MergeFrom(const RecImageVConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecImageVConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.InstanceConfig Instances = 1;
  bool has_instances() const;
  void clear_instances();
  static const int kInstancesFieldNumber = 1;
  const ::dg::model::InstanceConfig& instances() const;
  ::dg::model::InstanceConfig* mutable_instances();
  ::dg::model::InstanceConfig* release_instances();
  void set_allocated_instances(::dg::model::InstanceConfig* instances);

  // @@protoc_insertion_point(class_scope:dg.model.RecImageVConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::InstanceConfig* instances_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static RecImageVConfig* default_instance_;
};
// -------------------------------------------------------------------

class RecImageFConfig : public ::google::protobuf::Message {
 public:
  RecImageFConfig();
  virtual ~RecImageFConfig();

  RecImageFConfig(const RecImageFConfig& from);

  inline RecImageFConfig& operator=(const RecImageFConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecImageFConfig& default_instance();

  void Swap(RecImageFConfig* other);

  // implements Message ----------------------------------------------

  inline RecImageFConfig* New() const { return New(NULL); }

  RecImageFConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecImageFConfig& from);
  void MergeFrom(const RecImageFConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecImageFConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.InstanceConfig Instances = 1;
  bool has_instances() const;
  void clear_instances();
  static const int kInstancesFieldNumber = 1;
  const ::dg::model::InstanceConfig& instances() const;
  ::dg::model::InstanceConfig* mutable_instances();
  ::dg::model::InstanceConfig* release_instances();
  void set_allocated_instances(::dg::model::InstanceConfig* instances);

  // @@protoc_insertion_point(class_scope:dg.model.RecImageFConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::InstanceConfig* instances_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static RecImageFConfig* default_instance_;
};
// -------------------------------------------------------------------

class RecVideoVConfig : public ::google::protobuf::Message {
 public:
  RecVideoVConfig();
  virtual ~RecVideoVConfig();

  RecVideoVConfig(const RecVideoVConfig& from);

  inline RecVideoVConfig& operator=(const RecVideoVConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecVideoVConfig& default_instance();

  void Swap(RecVideoVConfig* other);

  // implements Message ----------------------------------------------

  inline RecVideoVConfig* New() const { return New(NULL); }

  RecVideoVConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecVideoVConfig& from);
  void MergeFrom(const RecVideoVConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecVideoVConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.InstanceConfig Instances = 1;
  bool has_instances() const;
  void clear_instances();
  static const int kInstancesFieldNumber = 1;
  const ::dg::model::InstanceConfig& instances() const;
  ::dg::model::InstanceConfig* mutable_instances();
  ::dg::model::InstanceConfig* release_instances();
  void set_allocated_instances(::dg::model::InstanceConfig* instances);

  // optional int32 BufferSize = 2;
  void clear_buffersize();
  static const int kBufferSizeFieldNumber = 2;
  ::google::protobuf::int32 buffersize() const;
  void set_buffersize(::google::protobuf::int32 value);

  // optional int32 DetectInterval = 3;
  void clear_detectinterval();
  static const int kDetectIntervalFieldNumber = 3;
  ::google::protobuf::int32 detectinterval() const;
  void set_detectinterval(::google::protobuf::int32 value);

  // optional int32 ClassifyInterval = 4;
  void clear_classifyinterval();
  static const int kClassifyIntervalFieldNumber = 4;
  ::google::protobuf::int32 classifyinterval() const;
  void set_classifyinterval(::google::protobuf::int32 value);

  // optional int32 ClassifyBufferSize = 5;
  void clear_classifybuffersize();
  static const int kClassifyBufferSizeFieldNumber = 5;
  ::google::protobuf::int32 classifybuffersize() const;
  void set_classifybuffersize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dg.model.RecVideoVConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::InstanceConfig* instances_;
  ::google::protobuf::int32 buffersize_;
  ::google::protobuf::int32 detectinterval_;
  ::google::protobuf::int32 classifyinterval_;
  ::google::protobuf::int32 classifybuffersize_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static RecVideoVConfig* default_instance_;
};
// -------------------------------------------------------------------

class RecVideoFConfig : public ::google::protobuf::Message {
 public:
  RecVideoFConfig();
  virtual ~RecVideoFConfig();

  RecVideoFConfig(const RecVideoFConfig& from);

  inline RecVideoFConfig& operator=(const RecVideoFConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecVideoFConfig& default_instance();

  void Swap(RecVideoFConfig* other);

  // implements Message ----------------------------------------------

  inline RecVideoFConfig* New() const { return New(NULL); }

  RecVideoFConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecVideoFConfig& from);
  void MergeFrom(const RecVideoFConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecVideoFConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.InstanceConfig Instances = 1;
  bool has_instances() const;
  void clear_instances();
  static const int kInstancesFieldNumber = 1;
  const ::dg::model::InstanceConfig& instances() const;
  ::dg::model::InstanceConfig* mutable_instances();
  ::dg::model::InstanceConfig* release_instances();
  void set_allocated_instances(::dg::model::InstanceConfig* instances);

  // optional int32 BufferSize = 2;
  void clear_buffersize();
  static const int kBufferSizeFieldNumber = 2;
  ::google::protobuf::int32 buffersize() const;
  void set_buffersize(::google::protobuf::int32 value);

  // optional float DetectThreshold = 3;
  void clear_detectthreshold();
  static const int kDetectThresholdFieldNumber = 3;
  float detectthreshold() const;
  void set_detectthreshold(float value);

  // optional int32 DetectWidth = 4;
  void clear_detectwidth();
  static const int kDetectWidthFieldNumber = 4;
  ::google::protobuf::int32 detectwidth() const;
  void set_detectwidth(::google::protobuf::int32 value);

  // optional int32 DetectHeight = 5;
  void clear_detectheight();
  static const int kDetectHeightFieldNumber = 5;
  ::google::protobuf::int32 detectheight() const;
  void set_detectheight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dg.model.RecVideoFConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::InstanceConfig* instances_;
  ::google::protobuf::int32 buffersize_;
  float detectthreshold_;
  ::google::protobuf::int32 detectwidth_;
  ::google::protobuf::int32 detectheight_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static RecVideoFConfig* default_instance_;
};
// -------------------------------------------------------------------

class RankVConfig : public ::google::protobuf::Message {
 public:
  RankVConfig();
  virtual ~RankVConfig();

  RankVConfig(const RankVConfig& from);

  inline RankVConfig& operator=(const RankVConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankVConfig& default_instance();

  void Swap(RankVConfig* other);

  // implements Message ----------------------------------------------

  inline RankVConfig* New() const { return New(NULL); }

  RankVConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankVConfig& from);
  void MergeFrom(const RankVConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RankVConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.InstanceConfig Instances = 1;
  bool has_instances() const;
  void clear_instances();
  static const int kInstancesFieldNumber = 1;
  const ::dg::model::InstanceConfig& instances() const;
  ::dg::model::InstanceConfig* mutable_instances();
  ::dg::model::InstanceConfig* release_instances();
  void set_allocated_instances(::dg::model::InstanceConfig* instances);

  // @@protoc_insertion_point(class_scope:dg.model.RankVConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::InstanceConfig* instances_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static RankVConfig* default_instance_;
};
// -------------------------------------------------------------------

class RankFConfig : public ::google::protobuf::Message {
 public:
  RankFConfig();
  virtual ~RankFConfig();

  RankFConfig(const RankFConfig& from);

  inline RankFConfig& operator=(const RankFConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankFConfig& default_instance();

  void Swap(RankFConfig* other);

  // implements Message ----------------------------------------------

  inline RankFConfig* New() const { return New(NULL); }

  RankFConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankFConfig& from);
  void MergeFrom(const RankFConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RankFConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.InstanceConfig Instances = 1;
  bool has_instances() const;
  void clear_instances();
  static const int kInstancesFieldNumber = 1;
  const ::dg::model::InstanceConfig& instances() const;
  ::dg::model::InstanceConfig* mutable_instances();
  ::dg::model::InstanceConfig* release_instances();
  void set_allocated_instances(::dg::model::InstanceConfig* instances);

  // @@protoc_insertion_point(class_scope:dg.model.RankFConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::InstanceConfig* instances_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static RankFConfig* default_instance_;
};
// -------------------------------------------------------------------

class EngineStatus : public ::google::protobuf::Message {
 public:
  EngineStatus();
  virtual ~EngineStatus();

  EngineStatus(const EngineStatus& from);

  inline EngineStatus& operator=(const EngineStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EngineStatus& default_instance();

  void Swap(EngineStatus* other);

  // implements Message ----------------------------------------------

  inline EngineStatus* New() const { return New(NULL); }

  EngineStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EngineStatus& from);
  void MergeFrom(const EngineStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EngineStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Instances = 1;
  void clear_instances();
  static const int kInstancesFieldNumber = 1;
  ::google::protobuf::int32 instances() const;
  void set_instances(::google::protobuf::int32 value);

  // repeated int32 RpcPorts = 2;
  int rpcports_size() const;
  void clear_rpcports();
  static const int kRpcPortsFieldNumber = 2;
  ::google::protobuf::int32 rpcports(int index) const;
  void set_rpcports(int index, ::google::protobuf::int32 value);
  void add_rpcports(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rpcports() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rpcports();

  // @@protoc_insertion_point(class_scope:dg.model.EngineStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rpcports_;
  mutable int _rpcports_cached_byte_size_;
  ::google::protobuf::int32 instances_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static EngineStatus* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PingRequest

// -------------------------------------------------------------------

// PingResponse

// optional string Message = 1;
inline void PingResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingResponse::message() const {
  // @@protoc_insertion_point(field_get:dg.model.PingResponse.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.PingResponse.Message)
}
inline void PingResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.PingResponse.Message)
}
inline void PingResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.PingResponse.Message)
}
inline ::std::string* PingResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.PingResponse.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingResponse::release_message() {
  // @@protoc_insertion_point(field_release:dg.model.PingResponse.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:dg.model.PingResponse.Message)
}

// -------------------------------------------------------------------

// SystemStatusRequest

// -------------------------------------------------------------------

// SystemStatusResponse

// optional string ModelVer = 1;
inline void SystemStatusResponse::clear_modelver() {
  modelver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::modelver() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.ModelVer)
  return modelver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_modelver(const ::std::string& value) {
  
  modelver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.ModelVer)
}
inline void SystemStatusResponse::set_modelver(const char* value) {
  
  modelver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.ModelVer)
}
inline void SystemStatusResponse::set_modelver(const char* value, size_t size) {
  
  modelver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.ModelVer)
}
inline ::std::string* SystemStatusResponse::mutable_modelver() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.ModelVer)
  return modelver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_modelver() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.ModelVer)
  
  return modelver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_modelver(::std::string* modelver) {
  if (modelver != NULL) {
    
  } else {
    
  }
  modelver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelver);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.ModelVer)
}

// optional string EngineVer = 2;
inline void SystemStatusResponse::clear_enginever() {
  enginever_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::enginever() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.EngineVer)
  return enginever_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_enginever(const ::std::string& value) {
  
  enginever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.EngineVer)
}
inline void SystemStatusResponse::set_enginever(const char* value) {
  
  enginever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.EngineVer)
}
inline void SystemStatusResponse::set_enginever(const char* value, size_t size) {
  
  enginever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.EngineVer)
}
inline ::std::string* SystemStatusResponse::mutable_enginever() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.EngineVer)
  return enginever_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_enginever() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.EngineVer)
  
  return enginever_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_enginever(::std::string* enginever) {
  if (enginever != NULL) {
    
  } else {
    
  }
  enginever_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enginever);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.EngineVer)
}

// optional string ServiceVer = 3;
inline void SystemStatusResponse::clear_servicever() {
  servicever_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::servicever() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.ServiceVer)
  return servicever_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_servicever(const ::std::string& value) {
  
  servicever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.ServiceVer)
}
inline void SystemStatusResponse::set_servicever(const char* value) {
  
  servicever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.ServiceVer)
}
inline void SystemStatusResponse::set_servicever(const char* value, size_t size) {
  
  servicever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.ServiceVer)
}
inline ::std::string* SystemStatusResponse::mutable_servicever() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.ServiceVer)
  return servicever_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_servicever() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.ServiceVer)
  
  return servicever_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_servicever(::std::string* servicever) {
  if (servicever != NULL) {
    
  } else {
    
  }
  servicever_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicever);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.ServiceVer)
}

// optional string CpuUsage = 4;
inline void SystemStatusResponse::clear_cpuusage() {
  cpuusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::cpuusage() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.CpuUsage)
  return cpuusage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_cpuusage(const ::std::string& value) {
  
  cpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.CpuUsage)
}
inline void SystemStatusResponse::set_cpuusage(const char* value) {
  
  cpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.CpuUsage)
}
inline void SystemStatusResponse::set_cpuusage(const char* value, size_t size) {
  
  cpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.CpuUsage)
}
inline ::std::string* SystemStatusResponse::mutable_cpuusage() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.CpuUsage)
  return cpuusage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_cpuusage() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.CpuUsage)
  
  return cpuusage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_cpuusage(::std::string* cpuusage) {
  if (cpuusage != NULL) {
    
  } else {
    
  }
  cpuusage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpuusage);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.CpuUsage)
}

// optional string AvailMem = 5;
inline void SystemStatusResponse::clear_availmem() {
  availmem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::availmem() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.AvailMem)
  return availmem_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_availmem(const ::std::string& value) {
  
  availmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.AvailMem)
}
inline void SystemStatusResponse::set_availmem(const char* value) {
  
  availmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.AvailMem)
}
inline void SystemStatusResponse::set_availmem(const char* value, size_t size) {
  
  availmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.AvailMem)
}
inline ::std::string* SystemStatusResponse::mutable_availmem() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.AvailMem)
  return availmem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_availmem() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.AvailMem)
  
  return availmem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_availmem(::std::string* availmem) {
  if (availmem != NULL) {
    
  } else {
    
  }
  availmem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), availmem);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.AvailMem)
}

// optional string TotalMem = 6;
inline void SystemStatusResponse::clear_totalmem() {
  totalmem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::totalmem() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.TotalMem)
  return totalmem_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_totalmem(const ::std::string& value) {
  
  totalmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.TotalMem)
}
inline void SystemStatusResponse::set_totalmem(const char* value) {
  
  totalmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.TotalMem)
}
inline void SystemStatusResponse::set_totalmem(const char* value, size_t size) {
  
  totalmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.TotalMem)
}
inline ::std::string* SystemStatusResponse::mutable_totalmem() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.TotalMem)
  return totalmem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_totalmem() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.TotalMem)
  
  return totalmem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_totalmem(::std::string* totalmem) {
  if (totalmem != NULL) {
    
  } else {
    
  }
  totalmem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totalmem);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.TotalMem)
}

// optional string AvailDisk = 7;
inline void SystemStatusResponse::clear_availdisk() {
  availdisk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::availdisk() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.AvailDisk)
  return availdisk_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_availdisk(const ::std::string& value) {
  
  availdisk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.AvailDisk)
}
inline void SystemStatusResponse::set_availdisk(const char* value) {
  
  availdisk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.AvailDisk)
}
inline void SystemStatusResponse::set_availdisk(const char* value, size_t size) {
  
  availdisk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.AvailDisk)
}
inline ::std::string* SystemStatusResponse::mutable_availdisk() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.AvailDisk)
  return availdisk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_availdisk() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.AvailDisk)
  
  return availdisk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_availdisk(::std::string* availdisk) {
  if (availdisk != NULL) {
    
  } else {
    
  }
  availdisk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), availdisk);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.AvailDisk)
}

// optional string TotalDisk = 8;
inline void SystemStatusResponse::clear_totaldisk() {
  totaldisk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::totaldisk() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.TotalDisk)
  return totaldisk_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_totaldisk(const ::std::string& value) {
  
  totaldisk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.TotalDisk)
}
inline void SystemStatusResponse::set_totaldisk(const char* value) {
  
  totaldisk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.TotalDisk)
}
inline void SystemStatusResponse::set_totaldisk(const char* value, size_t size) {
  
  totaldisk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.TotalDisk)
}
inline ::std::string* SystemStatusResponse::mutable_totaldisk() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.TotalDisk)
  return totaldisk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_totaldisk() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.TotalDisk)
  
  return totaldisk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_totaldisk(::std::string* totaldisk) {
  if (totaldisk != NULL) {
    
  } else {
    
  }
  totaldisk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totaldisk);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.TotalDisk)
}

// optional string NetIOSend = 9;
inline void SystemStatusResponse::clear_netiosend() {
  netiosend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::netiosend() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.NetIOSend)
  return netiosend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_netiosend(const ::std::string& value) {
  
  netiosend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.NetIOSend)
}
inline void SystemStatusResponse::set_netiosend(const char* value) {
  
  netiosend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.NetIOSend)
}
inline void SystemStatusResponse::set_netiosend(const char* value, size_t size) {
  
  netiosend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.NetIOSend)
}
inline ::std::string* SystemStatusResponse::mutable_netiosend() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.NetIOSend)
  return netiosend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_netiosend() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.NetIOSend)
  
  return netiosend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_netiosend(::std::string* netiosend) {
  if (netiosend != NULL) {
    
  } else {
    
  }
  netiosend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), netiosend);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.NetIOSend)
}

// optional string NetIORecv = 10;
inline void SystemStatusResponse::clear_netiorecv() {
  netiorecv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::netiorecv() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.NetIORecv)
  return netiorecv_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_netiorecv(const ::std::string& value) {
  
  netiorecv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.NetIORecv)
}
inline void SystemStatusResponse::set_netiorecv(const char* value) {
  
  netiorecv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.NetIORecv)
}
inline void SystemStatusResponse::set_netiorecv(const char* value, size_t size) {
  
  netiorecv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.NetIORecv)
}
inline ::std::string* SystemStatusResponse::mutable_netiorecv() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.NetIORecv)
  return netiorecv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_netiorecv() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.NetIORecv)
  
  return netiorecv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_netiorecv(::std::string* netiorecv) {
  if (netiorecv != NULL) {
    
  } else {
    
  }
  netiorecv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), netiorecv);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.NetIORecv)
}

// optional string GpuUsage = 11;
inline void SystemStatusResponse::clear_gpuusage() {
  gpuusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::gpuusage() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.GpuUsage)
  return gpuusage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_gpuusage(const ::std::string& value) {
  
  gpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.GpuUsage)
}
inline void SystemStatusResponse::set_gpuusage(const char* value) {
  
  gpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.GpuUsage)
}
inline void SystemStatusResponse::set_gpuusage(const char* value, size_t size) {
  
  gpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.GpuUsage)
}
inline ::std::string* SystemStatusResponse::mutable_gpuusage() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.GpuUsage)
  return gpuusage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_gpuusage() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.GpuUsage)
  
  return gpuusage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_gpuusage(::std::string* gpuusage) {
  if (gpuusage != NULL) {
    
  } else {
    
  }
  gpuusage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpuusage);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.GpuUsage)
}

// optional string GpuAvailMem = 12;
inline void SystemStatusResponse::clear_gpuavailmem() {
  gpuavailmem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::gpuavailmem() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.GpuAvailMem)
  return gpuavailmem_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_gpuavailmem(const ::std::string& value) {
  
  gpuavailmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.GpuAvailMem)
}
inline void SystemStatusResponse::set_gpuavailmem(const char* value) {
  
  gpuavailmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.GpuAvailMem)
}
inline void SystemStatusResponse::set_gpuavailmem(const char* value, size_t size) {
  
  gpuavailmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.GpuAvailMem)
}
inline ::std::string* SystemStatusResponse::mutable_gpuavailmem() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.GpuAvailMem)
  return gpuavailmem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_gpuavailmem() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.GpuAvailMem)
  
  return gpuavailmem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_gpuavailmem(::std::string* gpuavailmem) {
  if (gpuavailmem != NULL) {
    
  } else {
    
  }
  gpuavailmem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpuavailmem);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.GpuAvailMem)
}

// optional string GpuTotalMem = 13;
inline void SystemStatusResponse::clear_gputotalmem() {
  gputotalmem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemStatusResponse::gputotalmem() const {
  // @@protoc_insertion_point(field_get:dg.model.SystemStatusResponse.GpuTotalMem)
  return gputotalmem_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_gputotalmem(const ::std::string& value) {
  
  gputotalmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SystemStatusResponse.GpuTotalMem)
}
inline void SystemStatusResponse::set_gputotalmem(const char* value) {
  
  gputotalmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SystemStatusResponse.GpuTotalMem)
}
inline void SystemStatusResponse::set_gputotalmem(const char* value, size_t size) {
  
  gputotalmem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SystemStatusResponse.GpuTotalMem)
}
inline ::std::string* SystemStatusResponse::mutable_gputotalmem() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SystemStatusResponse.GpuTotalMem)
  return gputotalmem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemStatusResponse::release_gputotalmem() {
  // @@protoc_insertion_point(field_release:dg.model.SystemStatusResponse.GpuTotalMem)
  
  return gputotalmem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatusResponse::set_allocated_gputotalmem(::std::string* gputotalmem) {
  if (gputotalmem != NULL) {
    
  } else {
    
  }
  gputotalmem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gputotalmem);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SystemStatusResponse.GpuTotalMem)
}

// -------------------------------------------------------------------

// InstanceConfigureRequest

// optional .dg.model.RecImageVConfig RecImageVConfig = 1;
inline bool InstanceConfigureRequest::has_recimagevconfig() const {
  return !_is_default_instance_ && recimagevconfig_ != NULL;
}
inline void InstanceConfigureRequest::clear_recimagevconfig() {
  if (GetArenaNoVirtual() == NULL && recimagevconfig_ != NULL) delete recimagevconfig_;
  recimagevconfig_ = NULL;
}
inline const ::dg::model::RecImageVConfig& InstanceConfigureRequest::recimagevconfig() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfigureRequest.RecImageVConfig)
  return recimagevconfig_ != NULL ? *recimagevconfig_ : *default_instance_->recimagevconfig_;
}
inline ::dg::model::RecImageVConfig* InstanceConfigureRequest::mutable_recimagevconfig() {
  
  if (recimagevconfig_ == NULL) {
    recimagevconfig_ = new ::dg::model::RecImageVConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.InstanceConfigureRequest.RecImageVConfig)
  return recimagevconfig_;
}
inline ::dg::model::RecImageVConfig* InstanceConfigureRequest::release_recimagevconfig() {
  // @@protoc_insertion_point(field_release:dg.model.InstanceConfigureRequest.RecImageVConfig)
  
  ::dg::model::RecImageVConfig* temp = recimagevconfig_;
  recimagevconfig_ = NULL;
  return temp;
}
inline void InstanceConfigureRequest::set_allocated_recimagevconfig(::dg::model::RecImageVConfig* recimagevconfig) {
  delete recimagevconfig_;
  recimagevconfig_ = recimagevconfig;
  if (recimagevconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.InstanceConfigureRequest.RecImageVConfig)
}

// optional .dg.model.RecImageFConfig RecImageFConfig = 2;
inline bool InstanceConfigureRequest::has_recimagefconfig() const {
  return !_is_default_instance_ && recimagefconfig_ != NULL;
}
inline void InstanceConfigureRequest::clear_recimagefconfig() {
  if (GetArenaNoVirtual() == NULL && recimagefconfig_ != NULL) delete recimagefconfig_;
  recimagefconfig_ = NULL;
}
inline const ::dg::model::RecImageFConfig& InstanceConfigureRequest::recimagefconfig() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfigureRequest.RecImageFConfig)
  return recimagefconfig_ != NULL ? *recimagefconfig_ : *default_instance_->recimagefconfig_;
}
inline ::dg::model::RecImageFConfig* InstanceConfigureRequest::mutable_recimagefconfig() {
  
  if (recimagefconfig_ == NULL) {
    recimagefconfig_ = new ::dg::model::RecImageFConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.InstanceConfigureRequest.RecImageFConfig)
  return recimagefconfig_;
}
inline ::dg::model::RecImageFConfig* InstanceConfigureRequest::release_recimagefconfig() {
  // @@protoc_insertion_point(field_release:dg.model.InstanceConfigureRequest.RecImageFConfig)
  
  ::dg::model::RecImageFConfig* temp = recimagefconfig_;
  recimagefconfig_ = NULL;
  return temp;
}
inline void InstanceConfigureRequest::set_allocated_recimagefconfig(::dg::model::RecImageFConfig* recimagefconfig) {
  delete recimagefconfig_;
  recimagefconfig_ = recimagefconfig;
  if (recimagefconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.InstanceConfigureRequest.RecImageFConfig)
}

// optional .dg.model.RecVideoVConfig RecVideoVConfig = 3;
inline bool InstanceConfigureRequest::has_recvideovconfig() const {
  return !_is_default_instance_ && recvideovconfig_ != NULL;
}
inline void InstanceConfigureRequest::clear_recvideovconfig() {
  if (GetArenaNoVirtual() == NULL && recvideovconfig_ != NULL) delete recvideovconfig_;
  recvideovconfig_ = NULL;
}
inline const ::dg::model::RecVideoVConfig& InstanceConfigureRequest::recvideovconfig() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfigureRequest.RecVideoVConfig)
  return recvideovconfig_ != NULL ? *recvideovconfig_ : *default_instance_->recvideovconfig_;
}
inline ::dg::model::RecVideoVConfig* InstanceConfigureRequest::mutable_recvideovconfig() {
  
  if (recvideovconfig_ == NULL) {
    recvideovconfig_ = new ::dg::model::RecVideoVConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.InstanceConfigureRequest.RecVideoVConfig)
  return recvideovconfig_;
}
inline ::dg::model::RecVideoVConfig* InstanceConfigureRequest::release_recvideovconfig() {
  // @@protoc_insertion_point(field_release:dg.model.InstanceConfigureRequest.RecVideoVConfig)
  
  ::dg::model::RecVideoVConfig* temp = recvideovconfig_;
  recvideovconfig_ = NULL;
  return temp;
}
inline void InstanceConfigureRequest::set_allocated_recvideovconfig(::dg::model::RecVideoVConfig* recvideovconfig) {
  delete recvideovconfig_;
  recvideovconfig_ = recvideovconfig;
  if (recvideovconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.InstanceConfigureRequest.RecVideoVConfig)
}

// optional .dg.model.RecVideoFConfig RecVideoFConfig = 4;
inline bool InstanceConfigureRequest::has_recvideofconfig() const {
  return !_is_default_instance_ && recvideofconfig_ != NULL;
}
inline void InstanceConfigureRequest::clear_recvideofconfig() {
  if (GetArenaNoVirtual() == NULL && recvideofconfig_ != NULL) delete recvideofconfig_;
  recvideofconfig_ = NULL;
}
inline const ::dg::model::RecVideoFConfig& InstanceConfigureRequest::recvideofconfig() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfigureRequest.RecVideoFConfig)
  return recvideofconfig_ != NULL ? *recvideofconfig_ : *default_instance_->recvideofconfig_;
}
inline ::dg::model::RecVideoFConfig* InstanceConfigureRequest::mutable_recvideofconfig() {
  
  if (recvideofconfig_ == NULL) {
    recvideofconfig_ = new ::dg::model::RecVideoFConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.InstanceConfigureRequest.RecVideoFConfig)
  return recvideofconfig_;
}
inline ::dg::model::RecVideoFConfig* InstanceConfigureRequest::release_recvideofconfig() {
  // @@protoc_insertion_point(field_release:dg.model.InstanceConfigureRequest.RecVideoFConfig)
  
  ::dg::model::RecVideoFConfig* temp = recvideofconfig_;
  recvideofconfig_ = NULL;
  return temp;
}
inline void InstanceConfigureRequest::set_allocated_recvideofconfig(::dg::model::RecVideoFConfig* recvideofconfig) {
  delete recvideofconfig_;
  recvideofconfig_ = recvideofconfig;
  if (recvideofconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.InstanceConfigureRequest.RecVideoFConfig)
}

// optional .dg.model.RankVConfig RankVConfig = 5;
inline bool InstanceConfigureRequest::has_rankvconfig() const {
  return !_is_default_instance_ && rankvconfig_ != NULL;
}
inline void InstanceConfigureRequest::clear_rankvconfig() {
  if (GetArenaNoVirtual() == NULL && rankvconfig_ != NULL) delete rankvconfig_;
  rankvconfig_ = NULL;
}
inline const ::dg::model::RankVConfig& InstanceConfigureRequest::rankvconfig() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfigureRequest.RankVConfig)
  return rankvconfig_ != NULL ? *rankvconfig_ : *default_instance_->rankvconfig_;
}
inline ::dg::model::RankVConfig* InstanceConfigureRequest::mutable_rankvconfig() {
  
  if (rankvconfig_ == NULL) {
    rankvconfig_ = new ::dg::model::RankVConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.InstanceConfigureRequest.RankVConfig)
  return rankvconfig_;
}
inline ::dg::model::RankVConfig* InstanceConfigureRequest::release_rankvconfig() {
  // @@protoc_insertion_point(field_release:dg.model.InstanceConfigureRequest.RankVConfig)
  
  ::dg::model::RankVConfig* temp = rankvconfig_;
  rankvconfig_ = NULL;
  return temp;
}
inline void InstanceConfigureRequest::set_allocated_rankvconfig(::dg::model::RankVConfig* rankvconfig) {
  delete rankvconfig_;
  rankvconfig_ = rankvconfig;
  if (rankvconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.InstanceConfigureRequest.RankVConfig)
}

// optional .dg.model.RankFConfig RankFConfig = 6;
inline bool InstanceConfigureRequest::has_rankfconfig() const {
  return !_is_default_instance_ && rankfconfig_ != NULL;
}
inline void InstanceConfigureRequest::clear_rankfconfig() {
  if (GetArenaNoVirtual() == NULL && rankfconfig_ != NULL) delete rankfconfig_;
  rankfconfig_ = NULL;
}
inline const ::dg::model::RankFConfig& InstanceConfigureRequest::rankfconfig() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfigureRequest.RankFConfig)
  return rankfconfig_ != NULL ? *rankfconfig_ : *default_instance_->rankfconfig_;
}
inline ::dg::model::RankFConfig* InstanceConfigureRequest::mutable_rankfconfig() {
  
  if (rankfconfig_ == NULL) {
    rankfconfig_ = new ::dg::model::RankFConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.InstanceConfigureRequest.RankFConfig)
  return rankfconfig_;
}
inline ::dg::model::RankFConfig* InstanceConfigureRequest::release_rankfconfig() {
  // @@protoc_insertion_point(field_release:dg.model.InstanceConfigureRequest.RankFConfig)
  
  ::dg::model::RankFConfig* temp = rankfconfig_;
  rankfconfig_ = NULL;
  return temp;
}
inline void InstanceConfigureRequest::set_allocated_rankfconfig(::dg::model::RankFConfig* rankfconfig) {
  delete rankfconfig_;
  rankfconfig_ = rankfconfig;
  if (rankfconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.InstanceConfigureRequest.RankFConfig)
}

// -------------------------------------------------------------------

// GetInstancesRequest

// -------------------------------------------------------------------

// InstanceConfigureResponse

// optional string Status = 1;
inline void InstanceConfigureResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstanceConfigureResponse::status() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfigureResponse.Status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstanceConfigureResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.InstanceConfigureResponse.Status)
}
inline void InstanceConfigureResponse::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.InstanceConfigureResponse.Status)
}
inline void InstanceConfigureResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.InstanceConfigureResponse.Status)
}
inline ::std::string* InstanceConfigureResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.InstanceConfigureResponse.Status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstanceConfigureResponse::release_status() {
  // @@protoc_insertion_point(field_release:dg.model.InstanceConfigureResponse.Status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstanceConfigureResponse::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:dg.model.InstanceConfigureResponse.Status)
}

// optional string Message = 2;
inline void InstanceConfigureResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstanceConfigureResponse::message() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfigureResponse.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstanceConfigureResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.InstanceConfigureResponse.Message)
}
inline void InstanceConfigureResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.InstanceConfigureResponse.Message)
}
inline void InstanceConfigureResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.InstanceConfigureResponse.Message)
}
inline ::std::string* InstanceConfigureResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.InstanceConfigureResponse.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstanceConfigureResponse::release_message() {
  // @@protoc_insertion_point(field_release:dg.model.InstanceConfigureResponse.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstanceConfigureResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:dg.model.InstanceConfigureResponse.Message)
}

// repeated .dg.model.EngineStatus Results = 3;
inline int InstanceConfigureResponse::results_size() const {
  return results_.size();
}
inline void InstanceConfigureResponse::clear_results() {
  results_.Clear();
}
inline const ::dg::model::EngineStatus& InstanceConfigureResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfigureResponse.Results)
  return results_.Get(index);
}
inline ::dg::model::EngineStatus* InstanceConfigureResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.InstanceConfigureResponse.Results)
  return results_.Mutable(index);
}
inline ::dg::model::EngineStatus* InstanceConfigureResponse::add_results() {
  // @@protoc_insertion_point(field_add:dg.model.InstanceConfigureResponse.Results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::EngineStatus >*
InstanceConfigureResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.InstanceConfigureResponse.Results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::EngineStatus >&
InstanceConfigureResponse::results() const {
  // @@protoc_insertion_point(field_list:dg.model.InstanceConfigureResponse.Results)
  return results_;
}

// -------------------------------------------------------------------

// InstanceConfig

// optional .dg.model.InstanceType Type = 1;
inline void InstanceConfig::clear_type() {
  type_ = 0;
}
inline ::dg::model::InstanceType InstanceConfig::type() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfig.Type)
  return static_cast< ::dg::model::InstanceType >(type_);
}
inline void InstanceConfig::set_type(::dg::model::InstanceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.model.InstanceConfig.Type)
}

// optional int32 Count = 2;
inline void InstanceConfig::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 InstanceConfig::count() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfig.Count)
  return count_;
}
inline void InstanceConfig::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dg.model.InstanceConfig.Count)
}

// repeated .dg.model.RecognizeFunctions Functions = 3;
inline int InstanceConfig::functions_size() const {
  return functions_.size();
}
inline void InstanceConfig::clear_functions() {
  functions_.Clear();
}
inline ::dg::model::RecognizeFunctions InstanceConfig::functions(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfig.Functions)
  return static_cast< ::dg::model::RecognizeFunctions >(functions_.Get(index));
}
inline void InstanceConfig::set_functions(int index, ::dg::model::RecognizeFunctions value) {
  functions_.Set(index, value);
  // @@protoc_insertion_point(field_set:dg.model.InstanceConfig.Functions)
}
inline void InstanceConfig::add_functions(::dg::model::RecognizeFunctions value) {
  functions_.Add(value);
  // @@protoc_insertion_point(field_add:dg.model.InstanceConfig.Functions)
}
inline const ::google::protobuf::RepeatedField<int>&
InstanceConfig::functions() const {
  // @@protoc_insertion_point(field_list:dg.model.InstanceConfig.Functions)
  return functions_;
}
inline ::google::protobuf::RepeatedField<int>*
InstanceConfig::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.InstanceConfig.Functions)
  return &functions_;
}

// optional .dg.model.StorageConfig StorageConfig = 4;
inline bool InstanceConfig::has_storageconfig() const {
  return !_is_default_instance_ && storageconfig_ != NULL;
}
inline void InstanceConfig::clear_storageconfig() {
  if (GetArenaNoVirtual() == NULL && storageconfig_ != NULL) delete storageconfig_;
  storageconfig_ = NULL;
}
inline const ::dg::model::StorageConfig& InstanceConfig::storageconfig() const {
  // @@protoc_insertion_point(field_get:dg.model.InstanceConfig.StorageConfig)
  return storageconfig_ != NULL ? *storageconfig_ : *default_instance_->storageconfig_;
}
inline ::dg::model::StorageConfig* InstanceConfig::mutable_storageconfig() {
  
  if (storageconfig_ == NULL) {
    storageconfig_ = new ::dg::model::StorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.InstanceConfig.StorageConfig)
  return storageconfig_;
}
inline ::dg::model::StorageConfig* InstanceConfig::release_storageconfig() {
  // @@protoc_insertion_point(field_release:dg.model.InstanceConfig.StorageConfig)
  
  ::dg::model::StorageConfig* temp = storageconfig_;
  storageconfig_ = NULL;
  return temp;
}
inline void InstanceConfig::set_allocated_storageconfig(::dg::model::StorageConfig* storageconfig) {
  delete storageconfig_;
  storageconfig_ = storageconfig;
  if (storageconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.InstanceConfig.StorageConfig)
}

// -------------------------------------------------------------------

// RecImageVConfig

// optional .dg.model.InstanceConfig Instances = 1;
inline bool RecImageVConfig::has_instances() const {
  return !_is_default_instance_ && instances_ != NULL;
}
inline void RecImageVConfig::clear_instances() {
  if (GetArenaNoVirtual() == NULL && instances_ != NULL) delete instances_;
  instances_ = NULL;
}
inline const ::dg::model::InstanceConfig& RecImageVConfig::instances() const {
  // @@protoc_insertion_point(field_get:dg.model.RecImageVConfig.Instances)
  return instances_ != NULL ? *instances_ : *default_instance_->instances_;
}
inline ::dg::model::InstanceConfig* RecImageVConfig::mutable_instances() {
  
  if (instances_ == NULL) {
    instances_ = new ::dg::model::InstanceConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecImageVConfig.Instances)
  return instances_;
}
inline ::dg::model::InstanceConfig* RecImageVConfig::release_instances() {
  // @@protoc_insertion_point(field_release:dg.model.RecImageVConfig.Instances)
  
  ::dg::model::InstanceConfig* temp = instances_;
  instances_ = NULL;
  return temp;
}
inline void RecImageVConfig::set_allocated_instances(::dg::model::InstanceConfig* instances) {
  delete instances_;
  instances_ = instances;
  if (instances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecImageVConfig.Instances)
}

// -------------------------------------------------------------------

// RecImageFConfig

// optional .dg.model.InstanceConfig Instances = 1;
inline bool RecImageFConfig::has_instances() const {
  return !_is_default_instance_ && instances_ != NULL;
}
inline void RecImageFConfig::clear_instances() {
  if (GetArenaNoVirtual() == NULL && instances_ != NULL) delete instances_;
  instances_ = NULL;
}
inline const ::dg::model::InstanceConfig& RecImageFConfig::instances() const {
  // @@protoc_insertion_point(field_get:dg.model.RecImageFConfig.Instances)
  return instances_ != NULL ? *instances_ : *default_instance_->instances_;
}
inline ::dg::model::InstanceConfig* RecImageFConfig::mutable_instances() {
  
  if (instances_ == NULL) {
    instances_ = new ::dg::model::InstanceConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecImageFConfig.Instances)
  return instances_;
}
inline ::dg::model::InstanceConfig* RecImageFConfig::release_instances() {
  // @@protoc_insertion_point(field_release:dg.model.RecImageFConfig.Instances)
  
  ::dg::model::InstanceConfig* temp = instances_;
  instances_ = NULL;
  return temp;
}
inline void RecImageFConfig::set_allocated_instances(::dg::model::InstanceConfig* instances) {
  delete instances_;
  instances_ = instances;
  if (instances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecImageFConfig.Instances)
}

// -------------------------------------------------------------------

// RecVideoVConfig

// optional .dg.model.InstanceConfig Instances = 1;
inline bool RecVideoVConfig::has_instances() const {
  return !_is_default_instance_ && instances_ != NULL;
}
inline void RecVideoVConfig::clear_instances() {
  if (GetArenaNoVirtual() == NULL && instances_ != NULL) delete instances_;
  instances_ = NULL;
}
inline const ::dg::model::InstanceConfig& RecVideoVConfig::instances() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVideoVConfig.Instances)
  return instances_ != NULL ? *instances_ : *default_instance_->instances_;
}
inline ::dg::model::InstanceConfig* RecVideoVConfig::mutable_instances() {
  
  if (instances_ == NULL) {
    instances_ = new ::dg::model::InstanceConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecVideoVConfig.Instances)
  return instances_;
}
inline ::dg::model::InstanceConfig* RecVideoVConfig::release_instances() {
  // @@protoc_insertion_point(field_release:dg.model.RecVideoVConfig.Instances)
  
  ::dg::model::InstanceConfig* temp = instances_;
  instances_ = NULL;
  return temp;
}
inline void RecVideoVConfig::set_allocated_instances(::dg::model::InstanceConfig* instances) {
  delete instances_;
  instances_ = instances;
  if (instances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVideoVConfig.Instances)
}

// optional int32 BufferSize = 2;
inline void RecVideoVConfig::clear_buffersize() {
  buffersize_ = 0;
}
inline ::google::protobuf::int32 RecVideoVConfig::buffersize() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVideoVConfig.BufferSize)
  return buffersize_;
}
inline void RecVideoVConfig::set_buffersize(::google::protobuf::int32 value) {
  
  buffersize_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVideoVConfig.BufferSize)
}

// optional int32 DetectInterval = 3;
inline void RecVideoVConfig::clear_detectinterval() {
  detectinterval_ = 0;
}
inline ::google::protobuf::int32 RecVideoVConfig::detectinterval() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVideoVConfig.DetectInterval)
  return detectinterval_;
}
inline void RecVideoVConfig::set_detectinterval(::google::protobuf::int32 value) {
  
  detectinterval_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVideoVConfig.DetectInterval)
}

// optional int32 ClassifyInterval = 4;
inline void RecVideoVConfig::clear_classifyinterval() {
  classifyinterval_ = 0;
}
inline ::google::protobuf::int32 RecVideoVConfig::classifyinterval() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVideoVConfig.ClassifyInterval)
  return classifyinterval_;
}
inline void RecVideoVConfig::set_classifyinterval(::google::protobuf::int32 value) {
  
  classifyinterval_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVideoVConfig.ClassifyInterval)
}

// optional int32 ClassifyBufferSize = 5;
inline void RecVideoVConfig::clear_classifybuffersize() {
  classifybuffersize_ = 0;
}
inline ::google::protobuf::int32 RecVideoVConfig::classifybuffersize() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVideoVConfig.ClassifyBufferSize)
  return classifybuffersize_;
}
inline void RecVideoVConfig::set_classifybuffersize(::google::protobuf::int32 value) {
  
  classifybuffersize_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVideoVConfig.ClassifyBufferSize)
}

// -------------------------------------------------------------------

// RecVideoFConfig

// optional .dg.model.InstanceConfig Instances = 1;
inline bool RecVideoFConfig::has_instances() const {
  return !_is_default_instance_ && instances_ != NULL;
}
inline void RecVideoFConfig::clear_instances() {
  if (GetArenaNoVirtual() == NULL && instances_ != NULL) delete instances_;
  instances_ = NULL;
}
inline const ::dg::model::InstanceConfig& RecVideoFConfig::instances() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVideoFConfig.Instances)
  return instances_ != NULL ? *instances_ : *default_instance_->instances_;
}
inline ::dg::model::InstanceConfig* RecVideoFConfig::mutable_instances() {
  
  if (instances_ == NULL) {
    instances_ = new ::dg::model::InstanceConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecVideoFConfig.Instances)
  return instances_;
}
inline ::dg::model::InstanceConfig* RecVideoFConfig::release_instances() {
  // @@protoc_insertion_point(field_release:dg.model.RecVideoFConfig.Instances)
  
  ::dg::model::InstanceConfig* temp = instances_;
  instances_ = NULL;
  return temp;
}
inline void RecVideoFConfig::set_allocated_instances(::dg::model::InstanceConfig* instances) {
  delete instances_;
  instances_ = instances;
  if (instances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVideoFConfig.Instances)
}

// optional int32 BufferSize = 2;
inline void RecVideoFConfig::clear_buffersize() {
  buffersize_ = 0;
}
inline ::google::protobuf::int32 RecVideoFConfig::buffersize() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVideoFConfig.BufferSize)
  return buffersize_;
}
inline void RecVideoFConfig::set_buffersize(::google::protobuf::int32 value) {
  
  buffersize_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVideoFConfig.BufferSize)
}

// optional float DetectThreshold = 3;
inline void RecVideoFConfig::clear_detectthreshold() {
  detectthreshold_ = 0;
}
inline float RecVideoFConfig::detectthreshold() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVideoFConfig.DetectThreshold)
  return detectthreshold_;
}
inline void RecVideoFConfig::set_detectthreshold(float value) {
  
  detectthreshold_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVideoFConfig.DetectThreshold)
}

// optional int32 DetectWidth = 4;
inline void RecVideoFConfig::clear_detectwidth() {
  detectwidth_ = 0;
}
inline ::google::protobuf::int32 RecVideoFConfig::detectwidth() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVideoFConfig.DetectWidth)
  return detectwidth_;
}
inline void RecVideoFConfig::set_detectwidth(::google::protobuf::int32 value) {
  
  detectwidth_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVideoFConfig.DetectWidth)
}

// optional int32 DetectHeight = 5;
inline void RecVideoFConfig::clear_detectheight() {
  detectheight_ = 0;
}
inline ::google::protobuf::int32 RecVideoFConfig::detectheight() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVideoFConfig.DetectHeight)
  return detectheight_;
}
inline void RecVideoFConfig::set_detectheight(::google::protobuf::int32 value) {
  
  detectheight_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVideoFConfig.DetectHeight)
}

// -------------------------------------------------------------------

// RankVConfig

// optional .dg.model.InstanceConfig Instances = 1;
inline bool RankVConfig::has_instances() const {
  return !_is_default_instance_ && instances_ != NULL;
}
inline void RankVConfig::clear_instances() {
  if (GetArenaNoVirtual() == NULL && instances_ != NULL) delete instances_;
  instances_ = NULL;
}
inline const ::dg::model::InstanceConfig& RankVConfig::instances() const {
  // @@protoc_insertion_point(field_get:dg.model.RankVConfig.Instances)
  return instances_ != NULL ? *instances_ : *default_instance_->instances_;
}
inline ::dg::model::InstanceConfig* RankVConfig::mutable_instances() {
  
  if (instances_ == NULL) {
    instances_ = new ::dg::model::InstanceConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RankVConfig.Instances)
  return instances_;
}
inline ::dg::model::InstanceConfig* RankVConfig::release_instances() {
  // @@protoc_insertion_point(field_release:dg.model.RankVConfig.Instances)
  
  ::dg::model::InstanceConfig* temp = instances_;
  instances_ = NULL;
  return temp;
}
inline void RankVConfig::set_allocated_instances(::dg::model::InstanceConfig* instances) {
  delete instances_;
  instances_ = instances;
  if (instances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RankVConfig.Instances)
}

// -------------------------------------------------------------------

// RankFConfig

// optional .dg.model.InstanceConfig Instances = 1;
inline bool RankFConfig::has_instances() const {
  return !_is_default_instance_ && instances_ != NULL;
}
inline void RankFConfig::clear_instances() {
  if (GetArenaNoVirtual() == NULL && instances_ != NULL) delete instances_;
  instances_ = NULL;
}
inline const ::dg::model::InstanceConfig& RankFConfig::instances() const {
  // @@protoc_insertion_point(field_get:dg.model.RankFConfig.Instances)
  return instances_ != NULL ? *instances_ : *default_instance_->instances_;
}
inline ::dg::model::InstanceConfig* RankFConfig::mutable_instances() {
  
  if (instances_ == NULL) {
    instances_ = new ::dg::model::InstanceConfig;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RankFConfig.Instances)
  return instances_;
}
inline ::dg::model::InstanceConfig* RankFConfig::release_instances() {
  // @@protoc_insertion_point(field_release:dg.model.RankFConfig.Instances)
  
  ::dg::model::InstanceConfig* temp = instances_;
  instances_ = NULL;
  return temp;
}
inline void RankFConfig::set_allocated_instances(::dg::model::InstanceConfig* instances) {
  delete instances_;
  instances_ = instances;
  if (instances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RankFConfig.Instances)
}

// -------------------------------------------------------------------

// EngineStatus

// optional int32 Instances = 1;
inline void EngineStatus::clear_instances() {
  instances_ = 0;
}
inline ::google::protobuf::int32 EngineStatus::instances() const {
  // @@protoc_insertion_point(field_get:dg.model.EngineStatus.Instances)
  return instances_;
}
inline void EngineStatus::set_instances(::google::protobuf::int32 value) {
  
  instances_ = value;
  // @@protoc_insertion_point(field_set:dg.model.EngineStatus.Instances)
}

// repeated int32 RpcPorts = 2;
inline int EngineStatus::rpcports_size() const {
  return rpcports_.size();
}
inline void EngineStatus::clear_rpcports() {
  rpcports_.Clear();
}
inline ::google::protobuf::int32 EngineStatus::rpcports(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.EngineStatus.RpcPorts)
  return rpcports_.Get(index);
}
inline void EngineStatus::set_rpcports(int index, ::google::protobuf::int32 value) {
  rpcports_.Set(index, value);
  // @@protoc_insertion_point(field_set:dg.model.EngineStatus.RpcPorts)
}
inline void EngineStatus::add_rpcports(::google::protobuf::int32 value) {
  rpcports_.Add(value);
  // @@protoc_insertion_point(field_add:dg.model.EngineStatus.RpcPorts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EngineStatus::rpcports() const {
  // @@protoc_insertion_point(field_list:dg.model.EngineStatus.RpcPorts)
  return rpcports_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EngineStatus::mutable_rpcports() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.EngineStatus.RpcPorts)
  return &rpcports_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace dg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dg::model::InstanceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::InstanceType>() {
  return ::dg::model::InstanceType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_2eproto__INCLUDED
