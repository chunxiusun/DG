// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: ranker.proto
#ifndef GRPC_ranker_2eproto__INCLUDED
#define GRPC_ranker_2eproto__INCLUDED

#include "ranker.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace dg {
namespace model {

class SimilarityService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RankImage(::grpc::ClientContext* context, const ::dg::model::RankImageRequest& request, ::dg::model::RankImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankImageResponse>> AsyncRankImage(::grpc::ClientContext* context, const ::dg::model::RankImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankImageResponse>>(AsyncRankImageRaw(context, request, cq));
    }
    virtual ::grpc::Status RankFeature(::grpc::ClientContext* context, const ::dg::model::RankFeatureRequest& request, ::dg::model::RankFeatureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankFeatureResponse>> AsyncRankFeature(::grpc::ClientContext* context, const ::dg::model::RankFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankFeatureResponse>>(AsyncRankFeatureRaw(context, request, cq));
    }
    virtual ::grpc::Status RankFeaturesPair(::grpc::ClientContext* context, const ::dg::model::RankFeaturesPairRequest& request, ::dg::model::RankFeaturesPairResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankFeaturesPairResponse>> AsyncRankFeaturesPair(::grpc::ClientContext* context, const ::dg::model::RankFeaturesPairRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankFeaturesPairResponse>>(AsyncRankFeaturesPairRaw(context, request, cq));
    }
    virtual ::grpc::Status AddFeatures(::grpc::ClientContext* context, const ::dg::model::AddFeaturesRequest& request, ::dg::model::AddFeaturesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::AddFeaturesResponse>> AsyncAddFeatures(::grpc::ClientContext* context, const ::dg::model::AddFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::AddFeaturesResponse>>(AsyncAddFeaturesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImageContent(::grpc::ClientContext* context, const ::dg::model::GetImageContentRequest& request, ::dg::model::GetImageContentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::GetImageContentResponse>> AsyncGetImageContent(::grpc::ClientContext* context, const ::dg::model::GetImageContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::GetImageContentResponse>>(AsyncGetImageContentRaw(context, request, cq));
    }
    virtual ::grpc::Status Search(::grpc::ClientContext* context, const ::dg::model::SearchRequest& request, ::dg::model::SearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::SearchResponse>> AsyncSearch(::grpc::ClientContext* context, const ::dg::model::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::SearchResponse>>(AsyncSearchRaw(context, request, cq));
    }
    virtual ::grpc::Status RankRepoSize(::grpc::ClientContext* context, const ::dg::model::RankRepoSizeRequest& request, ::dg::model::RankRepoSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankRepoSizeResponse>> AsyncRankRepoSize(::grpc::ClientContext* context, const ::dg::model::RankRepoSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankRepoSizeResponse>>(AsyncRankRepoSizeRaw(context, request, cq));
    }
    // Deprecated
    virtual ::grpc::Status GetRankedVector(::grpc::ClientContext* context, const ::dg::model::FeatureRankingRequest& request, ::dg::model::FeatureRankingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::FeatureRankingResponse>> AsyncGetRankedVector(::grpc::ClientContext* context, const ::dg::model::FeatureRankingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::FeatureRankingResponse>>(AsyncGetRankedVectorRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankImageResponse>* AsyncRankImageRaw(::grpc::ClientContext* context, const ::dg::model::RankImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankFeatureResponse>* AsyncRankFeatureRaw(::grpc::ClientContext* context, const ::dg::model::RankFeatureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankFeaturesPairResponse>* AsyncRankFeaturesPairRaw(::grpc::ClientContext* context, const ::dg::model::RankFeaturesPairRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::AddFeaturesResponse>* AsyncAddFeaturesRaw(::grpc::ClientContext* context, const ::dg::model::AddFeaturesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::GetImageContentResponse>* AsyncGetImageContentRaw(::grpc::ClientContext* context, const ::dg::model::GetImageContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::SearchResponse>* AsyncSearchRaw(::grpc::ClientContext* context, const ::dg::model::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::RankRepoSizeResponse>* AsyncRankRepoSizeRaw(::grpc::ClientContext* context, const ::dg::model::RankRepoSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dg::model::FeatureRankingResponse>* AsyncGetRankedVectorRaw(::grpc::ClientContext* context, const ::dg::model::FeatureRankingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RankImage(::grpc::ClientContext* context, const ::dg::model::RankImageRequest& request, ::dg::model::RankImageResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::RankImageResponse>> AsyncRankImage(::grpc::ClientContext* context, const ::dg::model::RankImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::RankImageResponse>>(AsyncRankImageRaw(context, request, cq));
    }
    ::grpc::Status RankFeature(::grpc::ClientContext* context, const ::dg::model::RankFeatureRequest& request, ::dg::model::RankFeatureResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::RankFeatureResponse>> AsyncRankFeature(::grpc::ClientContext* context, const ::dg::model::RankFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::RankFeatureResponse>>(AsyncRankFeatureRaw(context, request, cq));
    }
    ::grpc::Status RankFeaturesPair(::grpc::ClientContext* context, const ::dg::model::RankFeaturesPairRequest& request, ::dg::model::RankFeaturesPairResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::RankFeaturesPairResponse>> AsyncRankFeaturesPair(::grpc::ClientContext* context, const ::dg::model::RankFeaturesPairRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::RankFeaturesPairResponse>>(AsyncRankFeaturesPairRaw(context, request, cq));
    }
    ::grpc::Status AddFeatures(::grpc::ClientContext* context, const ::dg::model::AddFeaturesRequest& request, ::dg::model::AddFeaturesResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::AddFeaturesResponse>> AsyncAddFeatures(::grpc::ClientContext* context, const ::dg::model::AddFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::AddFeaturesResponse>>(AsyncAddFeaturesRaw(context, request, cq));
    }
    ::grpc::Status GetImageContent(::grpc::ClientContext* context, const ::dg::model::GetImageContentRequest& request, ::dg::model::GetImageContentResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::GetImageContentResponse>> AsyncGetImageContent(::grpc::ClientContext* context, const ::dg::model::GetImageContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::GetImageContentResponse>>(AsyncGetImageContentRaw(context, request, cq));
    }
    ::grpc::Status Search(::grpc::ClientContext* context, const ::dg::model::SearchRequest& request, ::dg::model::SearchResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::SearchResponse>> AsyncSearch(::grpc::ClientContext* context, const ::dg::model::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::SearchResponse>>(AsyncSearchRaw(context, request, cq));
    }
    ::grpc::Status RankRepoSize(::grpc::ClientContext* context, const ::dg::model::RankRepoSizeRequest& request, ::dg::model::RankRepoSizeResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::RankRepoSizeResponse>> AsyncRankRepoSize(::grpc::ClientContext* context, const ::dg::model::RankRepoSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::RankRepoSizeResponse>>(AsyncRankRepoSizeRaw(context, request, cq));
    }
    ::grpc::Status GetRankedVector(::grpc::ClientContext* context, const ::dg::model::FeatureRankingRequest& request, ::dg::model::FeatureRankingResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::FeatureRankingResponse>> AsyncGetRankedVector(::grpc::ClientContext* context, const ::dg::model::FeatureRankingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dg::model::FeatureRankingResponse>>(AsyncGetRankedVectorRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::dg::model::RankImageResponse>* AsyncRankImageRaw(::grpc::ClientContext* context, const ::dg::model::RankImageRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::dg::model::RankFeatureResponse>* AsyncRankFeatureRaw(::grpc::ClientContext* context, const ::dg::model::RankFeatureRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::dg::model::RankFeaturesPairResponse>* AsyncRankFeaturesPairRaw(::grpc::ClientContext* context, const ::dg::model::RankFeaturesPairRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::dg::model::AddFeaturesResponse>* AsyncAddFeaturesRaw(::grpc::ClientContext* context, const ::dg::model::AddFeaturesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::dg::model::GetImageContentResponse>* AsyncGetImageContentRaw(::grpc::ClientContext* context, const ::dg::model::GetImageContentRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::dg::model::SearchResponse>* AsyncSearchRaw(::grpc::ClientContext* context, const ::dg::model::SearchRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::dg::model::RankRepoSizeResponse>* AsyncRankRepoSizeRaw(::grpc::ClientContext* context, const ::dg::model::RankRepoSizeRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::dg::model::FeatureRankingResponse>* AsyncGetRankedVectorRaw(::grpc::ClientContext* context, const ::dg::model::FeatureRankingRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_RankImage_;
    const ::grpc::RpcMethod rpcmethod_RankFeature_;
    const ::grpc::RpcMethod rpcmethod_RankFeaturesPair_;
    const ::grpc::RpcMethod rpcmethod_AddFeatures_;
    const ::grpc::RpcMethod rpcmethod_GetImageContent_;
    const ::grpc::RpcMethod rpcmethod_Search_;
    const ::grpc::RpcMethod rpcmethod_RankRepoSize_;
    const ::grpc::RpcMethod rpcmethod_GetRankedVector_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RankImage(::grpc::ServerContext* context, const ::dg::model::RankImageRequest* request, ::dg::model::RankImageResponse* response);
    virtual ::grpc::Status RankFeature(::grpc::ServerContext* context, const ::dg::model::RankFeatureRequest* request, ::dg::model::RankFeatureResponse* response);
    virtual ::grpc::Status RankFeaturesPair(::grpc::ServerContext* context, const ::dg::model::RankFeaturesPairRequest* request, ::dg::model::RankFeaturesPairResponse* response);
    virtual ::grpc::Status AddFeatures(::grpc::ServerContext* context, const ::dg::model::AddFeaturesRequest* request, ::dg::model::AddFeaturesResponse* response);
    virtual ::grpc::Status GetImageContent(::grpc::ServerContext* context, const ::dg::model::GetImageContentRequest* request, ::dg::model::GetImageContentResponse* response);
    virtual ::grpc::Status Search(::grpc::ServerContext* context, const ::dg::model::SearchRequest* request, ::dg::model::SearchResponse* response);
    virtual ::grpc::Status RankRepoSize(::grpc::ServerContext* context, const ::dg::model::RankRepoSizeRequest* request, ::dg::model::RankRepoSizeResponse* response);
    // Deprecated
    virtual ::grpc::Status GetRankedVector(::grpc::ServerContext* context, const ::dg::model::FeatureRankingRequest* request, ::dg::model::FeatureRankingResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RankImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RankImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RankImage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankImage(::grpc::ServerContext* context, const ::dg::model::RankImageRequest* request, ::dg::model::RankImageResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRankImage(::grpc::ServerContext* context, ::dg::model::RankImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::dg::model::RankImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RankFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RankFeature() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RankFeature() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankFeature(::grpc::ServerContext* context, const ::dg::model::RankFeatureRequest* request, ::dg::model::RankFeatureResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRankFeature(::grpc::ServerContext* context, ::dg::model::RankFeatureRequest* request, ::grpc::ServerAsyncResponseWriter< ::dg::model::RankFeatureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RankFeaturesPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RankFeaturesPair() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RankFeaturesPair() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankFeaturesPair(::grpc::ServerContext* context, const ::dg::model::RankFeaturesPairRequest* request, ::dg::model::RankFeaturesPairResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRankFeaturesPair(::grpc::ServerContext* context, ::dg::model::RankFeaturesPairRequest* request, ::grpc::ServerAsyncResponseWriter< ::dg::model::RankFeaturesPairResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddFeatures() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddFeatures() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFeatures(::grpc::ServerContext* context, const ::dg::model::AddFeaturesRequest* request, ::dg::model::AddFeaturesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFeatures(::grpc::ServerContext* context, ::dg::model::AddFeaturesRequest* request, ::grpc::ServerAsyncResponseWriter< ::dg::model::AddFeaturesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImageContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetImageContent() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetImageContent() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImageContent(::grpc::ServerContext* context, const ::dg::model::GetImageContentRequest* request, ::dg::model::GetImageContentResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImageContent(::grpc::ServerContext* context, ::dg::model::GetImageContentRequest* request, ::grpc::ServerAsyncResponseWriter< ::dg::model::GetImageContentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Search() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Search() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::dg::model::SearchRequest* request, ::dg::model::SearchResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::dg::model::SearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::dg::model::SearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RankRepoSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RankRepoSize() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RankRepoSize() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankRepoSize(::grpc::ServerContext* context, const ::dg::model::RankRepoSizeRequest* request, ::dg::model::RankRepoSizeResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRankRepoSize(::grpc::ServerContext* context, ::dg::model::RankRepoSizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::dg::model::RankRepoSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRankedVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRankedVector() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetRankedVector() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRankedVector(::grpc::ServerContext* context, const ::dg::model::FeatureRankingRequest* request, ::dg::model::FeatureRankingResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRankedVector(::grpc::ServerContext* context, ::dg::model::FeatureRankingRequest* request, ::grpc::ServerAsyncResponseWriter< ::dg::model::FeatureRankingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RankImage<WithAsyncMethod_RankFeature<WithAsyncMethod_RankFeaturesPair<WithAsyncMethod_AddFeatures<WithAsyncMethod_GetImageContent<WithAsyncMethod_Search<WithAsyncMethod_RankRepoSize<WithAsyncMethod_GetRankedVector<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_RankImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RankImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RankImage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankImage(::grpc::ServerContext* context, const ::dg::model::RankImageRequest* request, ::dg::model::RankImageResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RankFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RankFeature() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RankFeature() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankFeature(::grpc::ServerContext* context, const ::dg::model::RankFeatureRequest* request, ::dg::model::RankFeatureResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RankFeaturesPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RankFeaturesPair() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RankFeaturesPair() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankFeaturesPair(::grpc::ServerContext* context, const ::dg::model::RankFeaturesPairRequest* request, ::dg::model::RankFeaturesPairResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddFeatures() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddFeatures() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFeatures(::grpc::ServerContext* context, const ::dg::model::AddFeaturesRequest* request, ::dg::model::AddFeaturesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImageContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetImageContent() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetImageContent() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImageContent(::grpc::ServerContext* context, const ::dg::model::GetImageContentRequest* request, ::dg::model::GetImageContentResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Search() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Search() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::dg::model::SearchRequest* request, ::dg::model::SearchResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RankRepoSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RankRepoSize() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RankRepoSize() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankRepoSize(::grpc::ServerContext* context, const ::dg::model::RankRepoSizeRequest* request, ::dg::model::RankRepoSizeResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRankedVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRankedVector() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetRankedVector() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRankedVector(::grpc::ServerContext* context, const ::dg::model::FeatureRankingRequest* request, ::dg::model::FeatureRankingResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace model
}  // namespace dg


#endif  // GRPC_ranker_2eproto__INCLUDED
