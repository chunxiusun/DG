// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dg {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class CategoryAndFeature;
class Color;
class Cutboard;
class CutboardImage;
class FaceAttribute;
class FeatureVector;
class Image;
class LicensePlate;
class NameAndConfidence;
class NullMessage;
class Passenger;
class PedestrianObj;
class PeopleAttr;
class RecFace;
class RecNonMotorVehicle;
class RecNonMotorVehicle_NonMotorPedestrian;
class RecPedestrian;
class RecVehicle;
class SrcMetadata;
class StorageConfig;
class Symbol;
class VehicleModelType;
class VehicleObj;
class VehicleSymbol;

enum ObjType {
  OBJ_TYPE_UNKNOWN = 0,
  OBJ_TYPE_CAR = 1,
  OBJ_TYPE_BICYCLE = 2,
  OBJ_TYPE_TRICYCLE = 3,
  OBJ_TYPE_PEDESTRIAN = 4,
  OBJ_TYPE_FACE = 1024,
  OBJ_TYPE_VEHICLE_VECTOR = 2048,
  OBJ_TYPE_BICYCLE_VECTOR = 2049,
  OBJ_TYPE_TRICYCLE_VECTOR = 2050,
  OBJ_TYPE_PEDESTRIAN_VECTOR = 2051,
  OBJ_TYPE_FACE_VECTOR = 3072,
  OBJ_TYPE_VEHICLE_CUTBOARD = 4096,
  OBJ_TYPE_BICYCLE_CUTBOARD = 4097,
  OBJ_TYPE_TRICYCLE_CUTBOARD = 4098,
  OBJ_TYPE_PEDESTRIAN_CUTBOARD = 4099,
  OBJ_TYPE_FACE_CUTBOARD = 5120,
  ObjType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjType_IsValid(int value);
const ObjType ObjType_MIN = OBJ_TYPE_UNKNOWN;
const ObjType ObjType_MAX = OBJ_TYPE_FACE_CUTBOARD;
const int ObjType_ARRAYSIZE = ObjType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjType_descriptor();
inline const ::std::string& ObjType_Name(ObjType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjType_descriptor(), value);
}
inline bool ObjType_Parse(
    const ::std::string& name, ObjType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjType>(
    ObjType_descriptor(), name, value);
}
enum DataFmtType {
  UNKNOWNFMT = 0,
  JSON = 1,
  PROTOBUF = 2,
  CSV = 3,
  PDF = 4,
  DataFmtType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataFmtType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataFmtType_IsValid(int value);
const DataFmtType DataFmtType_MIN = UNKNOWNFMT;
const DataFmtType DataFmtType_MAX = PDF;
const int DataFmtType_ARRAYSIZE = DataFmtType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataFmtType_descriptor();
inline const ::std::string& DataFmtType_Name(DataFmtType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataFmtType_descriptor(), value);
}
inline bool DataFmtType_Parse(
    const ::std::string& name, DataFmtType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataFmtType>(
    DataFmtType_descriptor(), name, value);
}
enum SexType {
  SEX_TYPE_UNKNOWN = 0,
  SEX_TYPE_MALE = 1,
  SEX_TYPE_FEMALE = 2,
  SexType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SexType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SexType_IsValid(int value);
const SexType SexType_MIN = SEX_TYPE_UNKNOWN;
const SexType SexType_MAX = SEX_TYPE_FEMALE;
const int SexType_ARRAYSIZE = SexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SexType_descriptor();
inline const ::std::string& SexType_Name(SexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SexType_descriptor(), value);
}
inline bool SexType_Parse(
    const ::std::string& name, SexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SexType>(
    SexType_descriptor(), name, value);
}
enum NationalType {
  NATIONAL_TYPE_UNKNOWN = 0,
  NATIONAL_TYPE_HAN = 1,
  NATIONAL_TYPE_MINORITY = 2,
  NationalType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NationalType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NationalType_IsValid(int value);
const NationalType NationalType_MIN = NATIONAL_TYPE_UNKNOWN;
const NationalType NationalType_MAX = NATIONAL_TYPE_MINORITY;
const int NationalType_ARRAYSIZE = NationalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NationalType_descriptor();
inline const ::std::string& NationalType_Name(NationalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NationalType_descriptor(), value);
}
inline bool NationalType_Parse(
    const ::std::string& name, NationalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NationalType>(
    NationalType_descriptor(), name, value);
}
enum AgeType {
  AGE_TYPE_UNKNOWN = 0,
  AGE_TYPE_LT15 = 1,
  AGE_TYPE_1530 = 2,
  AGE_TYPE_3050 = 3,
  AGE_TYPE_50UP = 4,
  AgeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AgeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AgeType_IsValid(int value);
const AgeType AgeType_MIN = AGE_TYPE_UNKNOWN;
const AgeType AgeType_MAX = AGE_TYPE_50UP;
const int AgeType_ARRAYSIZE = AgeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AgeType_descriptor();
inline const ::std::string& AgeType_Name(AgeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AgeType_descriptor(), value);
}
inline bool AgeType_Parse(
    const ::std::string& name, AgeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AgeType>(
    AgeType_descriptor(), name, value);
}
enum NonMotorVehicleGesture {
  ATTITUDE_POSITIVE = 0,
  ATTITUDE_RIGHT = 1,
  ATTITUDE_LEFT = 2,
  ATTITUDE_BACK = 3,
  NonMotorVehicleGesture_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NonMotorVehicleGesture_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NonMotorVehicleGesture_IsValid(int value);
const NonMotorVehicleGesture NonMotorVehicleGesture_MIN = ATTITUDE_POSITIVE;
const NonMotorVehicleGesture NonMotorVehicleGesture_MAX = ATTITUDE_BACK;
const int NonMotorVehicleGesture_ARRAYSIZE = NonMotorVehicleGesture_MAX + 1;

const ::google::protobuf::EnumDescriptor* NonMotorVehicleGesture_descriptor();
inline const ::std::string& NonMotorVehicleGesture_Name(NonMotorVehicleGesture value) {
  return ::google::protobuf::internal::NameOfEnum(
    NonMotorVehicleGesture_descriptor(), value);
}
inline bool NonMotorVehicleGesture_Parse(
    const ::std::string& name, NonMotorVehicleGesture* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NonMotorVehicleGesture>(
    NonMotorVehicleGesture_descriptor(), name, value);
}
enum DBType {
  KAFKA = 0,
  POSTGRES = 1,
  FILEIMAGE = 2,
  DBType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DBType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DBType_IsValid(int value);
const DBType DBType_MIN = KAFKA;
const DBType DBType_MAX = FILEIMAGE;
const int DBType_ARRAYSIZE = DBType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DBType_descriptor();
inline const ::std::string& DBType_Name(DBType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DBType_descriptor(), value);
}
inline bool DBType_Parse(
    const ::std::string& name, DBType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DBType>(
    DBType_descriptor(), name, value);
}
// ===================================================================

class SrcMetadata : public ::google::protobuf::Message {
 public:
  SrcMetadata();
  virtual ~SrcMetadata();

  SrcMetadata(const SrcMetadata& from);

  inline SrcMetadata& operator=(const SrcMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrcMetadata& default_instance();

  void Swap(SrcMetadata* other);

  // implements Message ----------------------------------------------

  inline SrcMetadata* New() const { return New(NULL); }

  SrcMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrcMetadata& from);
  void MergeFrom(const SrcMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SrcMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 Duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 SensorId = 3;
  void clear_sensorid();
  static const int kSensorIdFieldNumber = 3;
  ::google::protobuf::int32 sensorid() const;
  void set_sensorid(::google::protobuf::int32 value);

  // optional string SensorName = 4;
  void clear_sensorname();
  static const int kSensorNameFieldNumber = 4;
  const ::std::string& sensorname() const;
  void set_sensorname(const ::std::string& value);
  void set_sensorname(const char* value);
  void set_sensorname(const char* value, size_t size);
  ::std::string* mutable_sensorname();
  ::std::string* release_sensorname();
  void set_allocated_sensorname(::std::string* sensorname);

  // optional string SensorUrl = 5;
  void clear_sensorurl();
  static const int kSensorUrlFieldNumber = 5;
  const ::std::string& sensorurl() const;
  void set_sensorurl(const ::std::string& value);
  void set_sensorurl(const char* value);
  void set_sensorurl(const char* value, size_t size);
  ::std::string* mutable_sensorurl();
  ::std::string* release_sensorurl();
  void set_allocated_sensorurl(::std::string* sensorurl);

  // optional int32 RepoId = 6;
  void clear_repoid();
  static const int kRepoIdFieldNumber = 6;
  ::google::protobuf::int32 repoid() const;
  void set_repoid(::google::protobuf::int32 value);

  // optional string RepoInfo = 7;
  void clear_repoinfo();
  static const int kRepoInfoFieldNumber = 7;
  const ::std::string& repoinfo() const;
  void set_repoinfo(const ::std::string& value);
  void set_repoinfo(const char* value);
  void set_repoinfo(const char* value, size_t size);
  ::std::string* mutable_repoinfo();
  ::std::string* release_repoinfo();
  void set_allocated_repoinfo(::std::string* repoinfo);

  // optional .dg.model.ObjType ObjType = 8;
  void clear_objtype();
  static const int kObjTypeFieldNumber = 8;
  ::dg::model::ObjType objtype() const;
  void set_objtype(::dg::model::ObjType value);

  // optional string SensorIdStr = 9;
  void clear_sensoridstr();
  static const int kSensorIdStrFieldNumber = 9;
  const ::std::string& sensoridstr() const;
  void set_sensoridstr(const ::std::string& value);
  void set_sensoridstr(const char* value);
  void set_sensoridstr(const char* value, size_t size);
  ::std::string* mutable_sensoridstr();
  ::std::string* release_sensoridstr();
  void set_allocated_sensoridstr(::std::string* sensoridstr);

  // @@protoc_insertion_point(class_scope:dg.model.SrcMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 sensorid_;
  ::google::protobuf::internal::ArenaStringPtr sensorname_;
  ::google::protobuf::internal::ArenaStringPtr sensorurl_;
  ::google::protobuf::internal::ArenaStringPtr repoinfo_;
  ::google::protobuf::int32 repoid_;
  int objtype_;
  ::google::protobuf::internal::ArenaStringPtr sensoridstr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static SrcMetadata* default_instance_;
};
// -------------------------------------------------------------------

class Cutboard : public ::google::protobuf::Message {
 public:
  Cutboard();
  virtual ~Cutboard();

  Cutboard(const Cutboard& from);

  inline Cutboard& operator=(const Cutboard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cutboard& default_instance();

  void Swap(Cutboard* other);

  // implements Message ----------------------------------------------

  inline Cutboard* New() const { return New(NULL); }

  Cutboard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cutboard& from);
  void MergeFrom(const Cutboard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Cutboard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // optional uint32 Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // optional uint32 Width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 Height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 ResWidth = 5;
  void clear_reswidth();
  static const int kResWidthFieldNumber = 5;
  ::google::protobuf::uint32 reswidth() const;
  void set_reswidth(::google::protobuf::uint32 value);

  // optional uint32 ResHeight = 6;
  void clear_resheight();
  static const int kResHeightFieldNumber = 6;
  ::google::protobuf::uint32 resheight() const;
  void set_resheight(::google::protobuf::uint32 value);

  // optional float Confidence = 7;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 7;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:dg.model.Cutboard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 reswidth_;
  ::google::protobuf::uint32 resheight_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Cutboard* default_instance_;
};
// -------------------------------------------------------------------

class CutboardImage : public ::google::protobuf::Message {
 public:
  CutboardImage();
  virtual ~CutboardImage();

  CutboardImage(const CutboardImage& from);

  inline CutboardImage& operator=(const CutboardImage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CutboardImage& default_instance();

  void Swap(CutboardImage* other);

  // implements Message ----------------------------------------------

  inline CutboardImage* New() const { return New(NULL); }

  CutboardImage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CutboardImage& from);
  void MergeFrom(const CutboardImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CutboardImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.Cutboard Cutboard = 1;
  bool has_cutboard() const;
  void clear_cutboard();
  static const int kCutboardFieldNumber = 1;
  const ::dg::model::Cutboard& cutboard() const;
  ::dg::model::Cutboard* mutable_cutboard();
  ::dg::model::Cutboard* release_cutboard();
  void set_allocated_cutboard(::dg::model::Cutboard* cutboard);

  // optional .dg.model.Image Img = 2;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 2;
  const ::dg::model::Image& img() const;
  ::dg::model::Image* mutable_img();
  ::dg::model::Image* release_img();
  void set_allocated_img(::dg::model::Image* img);

  // @@protoc_insertion_point(class_scope:dg.model.CutboardImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::Cutboard* cutboard_;
  ::dg::model::Image* img_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static CutboardImage* default_instance_;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  inline Color* New() const { return New(NULL); }

  Color* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ColorId = 1;
  void clear_colorid();
  static const int kColorIdFieldNumber = 1;
  ::google::protobuf::int32 colorid() const;
  void set_colorid(::google::protobuf::int32 value);

  // optional float Confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // optional string ColorName = 3;
  void clear_colorname();
  static const int kColorNameFieldNumber = 3;
  const ::std::string& colorname() const;
  void set_colorname(const ::std::string& value);
  void set_colorname(const char* value);
  void set_colorname(const char* value, size_t size);
  ::std::string* mutable_colorname();
  ::std::string* release_colorname();
  void set_allocated_colorname(::std::string* colorname);

  // @@protoc_insertion_point(class_scope:dg.model.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 colorid_;
  float confidence_;
  ::google::protobuf::internal::ArenaStringPtr colorname_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class FeatureVector : public ::google::protobuf::Message {
 public:
  FeatureVector();
  virtual ~FeatureVector();

  FeatureVector(const FeatureVector& from);

  inline FeatureVector& operator=(const FeatureVector& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureVector& default_instance();

  void Swap(FeatureVector* other);

  // implements Message ----------------------------------------------

  inline FeatureVector* New() const { return New(NULL); }

  FeatureVector* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureVector& from);
  void MergeFrom(const FeatureVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string Feature = 2;
  void clear_feature();
  static const int kFeatureFieldNumber = 2;
  const ::std::string& feature() const;
  void set_feature(const ::std::string& value);
  void set_feature(const char* value);
  void set_feature(const char* value, size_t size);
  ::std::string* mutable_feature();
  ::std::string* release_feature();
  void set_allocated_feature(::std::string* feature);

  // @@protoc_insertion_point(class_scope:dg.model.FeatureVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr feature_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FeatureVector* default_instance_;
};
// -------------------------------------------------------------------

class NullMessage : public ::google::protobuf::Message {
 public:
  NullMessage();
  virtual ~NullMessage();

  NullMessage(const NullMessage& from);

  inline NullMessage& operator=(const NullMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NullMessage& default_instance();

  void Swap(NullMessage* other);

  // implements Message ----------------------------------------------

  inline NullMessage* New() const { return New(NULL); }

  NullMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NullMessage& from);
  void MergeFrom(const NullMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NullMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dg.model.NullMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static NullMessage* default_instance_;
};
// -------------------------------------------------------------------

class FaceAttribute : public ::google::protobuf::Message {
 public:
  FaceAttribute();
  virtual ~FaceAttribute();

  FaceAttribute(const FaceAttribute& from);

  inline FaceAttribute& operator=(const FaceAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceAttribute& default_instance();

  enum ValueCase {
    kValueBool = 9,
    kValueInt = 10,
    kValueFloat = 11,
    kValueString = 12,
    VALUE_NOT_SET = 0,
  };

  void Swap(FaceAttribute* other);

  // implements Message ----------------------------------------------

  inline FaceAttribute* New() const { return New(NULL); }

  FaceAttribute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceAttribute& from);
  void MergeFrom(const FaceAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional float confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // optional string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool ValueBool = 9;
  private:
  bool has_valuebool() const;
  public:
  void clear_valuebool();
  static const int kValueBoolFieldNumber = 9;
  bool valuebool() const;
  void set_valuebool(bool value);

  // optional int32 ValueInt = 10;
  private:
  bool has_valueint() const;
  public:
  void clear_valueint();
  static const int kValueIntFieldNumber = 10;
  ::google::protobuf::int32 valueint() const;
  void set_valueint(::google::protobuf::int32 value);

  // optional float ValueFloat = 11;
  private:
  bool has_valuefloat() const;
  public:
  void clear_valuefloat();
  static const int kValueFloatFieldNumber = 11;
  float valuefloat() const;
  void set_valuefloat(float value);

  // optional string ValueString = 12;
  private:
  bool has_valuestring() const;
  public:
  void clear_valuestring();
  static const int kValueStringFieldNumber = 12;
  const ::std::string& valuestring() const;
  void set_valuestring(const ::std::string& value);
  void set_valuestring(const char* value);
  void set_valuestring(const char* value, size_t size);
  ::std::string* mutable_valuestring();
  ::std::string* release_valuestring();
  void set_allocated_valuestring(::std::string* valuestring);

  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:dg.model.FaceAttribute)
 private:
  inline void set_has_valuebool();
  inline void set_has_valueint();
  inline void set_has_valuefloat();
  inline void set_has_valuestring();

  inline bool has_Value() const;
  void clear_Value();
  inline void clear_has_Value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  float confidence_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    bool valuebool_;
    ::google::protobuf::int32 valueint_;
    float valuefloat_;
    ::google::protobuf::internal::ArenaStringPtr valuestring_;
  } Value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FaceAttribute* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  inline Image* New() const { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional int32 Width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 Height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional string URI = 4;
  void clear_uri();
  static const int kURIFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string BinData = 5;
  void clear_bindata();
  static const int kBinDataFieldNumber = 5;
  const ::std::string& bindata() const;
  void set_bindata(const ::std::string& value);
  void set_bindata(const char* value);
  void set_bindata(const char* value, size_t size);
  ::std::string* mutable_bindata();
  ::std::string* release_bindata();
  void set_allocated_bindata(::std::string* bindata);

  // @@protoc_insertion_point(class_scope:dg.model.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr bindata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class RecFace : public ::google::protobuf::Message {
 public:
  RecFace();
  virtual ~RecFace();

  RecFace(const RecFace& from);

  inline RecFace& operator=(const RecFace& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecFace& default_instance();

  void Swap(RecFace* other);

  // implements Message ----------------------------------------------

  inline RecFace* New() const { return New(NULL); }

  RecFace* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecFace& from);
  void MergeFrom(const RecFace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecFace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .dg.model.CutboardImage Img = 2;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 2;
  const ::dg::model::CutboardImage& img() const;
  ::dg::model::CutboardImage* mutable_img();
  ::dg::model::CutboardImage* release_img();
  void set_allocated_img(::dg::model::CutboardImage* img);

  // optional string Features = 3;
  void clear_features();
  static const int kFeaturesFieldNumber = 3;
  const ::std::string& features() const;
  void set_features(const ::std::string& value);
  void set_features(const char* value);
  void set_features(const char* value, size_t size);
  ::std::string* mutable_features();
  ::std::string* release_features();
  void set_allocated_features(::std::string* features);

  // optional float Confidence = 4;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 4;
  float confidence() const;
  void set_confidence(float value);

  // map<string, float> AlignScores = 5;
  int alignscores_size() const;
  void clear_alignscores();
  static const int kAlignScoresFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, float >&
      alignscores() const;
  ::google::protobuf::Map< ::std::string, float >*
      mutable_alignscores();

  // map<string, float> Qualities = 6;
  int qualities_size() const;
  void clear_qualities();
  static const int kQualitiesFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, float >&
      qualities() const;
  ::google::protobuf::Map< ::std::string, float >*
      mutable_qualities();

  // repeated .dg.model.FaceAttribute Attributes = 7;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 7;
  const ::dg::model::FaceAttribute& attributes(int index) const;
  ::dg::model::FaceAttribute* mutable_attributes(int index);
  ::dg::model::FaceAttribute* add_attributes();
  ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >*
      mutable_attributes();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >&
      attributes() const;

  // optional string DetectResult = 8;
  void clear_detectresult();
  static const int kDetectResultFieldNumber = 8;
  const ::std::string& detectresult() const;
  void set_detectresult(const ::std::string& value);
  void set_detectresult(const char* value);
  void set_detectresult(const char* value, size_t size);
  ::std::string* mutable_detectresult();
  ::std::string* release_detectresult();
  void set_allocated_detectresult(::std::string* detectresult);

  // optional string AlignResult = 9;
  void clear_alignresult();
  static const int kAlignResultFieldNumber = 9;
  const ::std::string& alignresult() const;
  void set_alignresult(const ::std::string& value);
  void set_alignresult(const char* value);
  void set_alignresult(const char* value, size_t size);
  ::std::string* mutable_alignresult();
  ::std::string* release_alignresult();
  void set_allocated_alignresult(::std::string* alignresult);

  // @@protoc_insertion_point(class_scope:dg.model.RecFace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::dg::model::CutboardImage* img_;
  ::google::protobuf::internal::ArenaStringPtr features_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 >
      RecFace_AlignScoresEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 > alignscores_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 >
      RecFace_QualitiesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 > qualities_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute > attributes_;
  ::google::protobuf::internal::ArenaStringPtr detectresult_;
  ::google::protobuf::internal::ArenaStringPtr alignresult_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static RecFace* default_instance_;
};
// -------------------------------------------------------------------

class NameAndConfidence : public ::google::protobuf::Message {
 public:
  NameAndConfidence();
  virtual ~NameAndConfidence();

  NameAndConfidence(const NameAndConfidence& from);

  inline NameAndConfidence& operator=(const NameAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameAndConfidence& default_instance();

  void Swap(NameAndConfidence* other);

  // implements Message ----------------------------------------------

  inline NameAndConfidence* New() const { return New(NULL); }

  NameAndConfidence* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameAndConfidence& from);
  void MergeFrom(const NameAndConfidence& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NameAndConfidence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float Confidence = 3;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:dg.model.NameAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static NameAndConfidence* default_instance_;
};
// -------------------------------------------------------------------

class CategoryAndFeature : public ::google::protobuf::Message {
 public:
  CategoryAndFeature();
  virtual ~CategoryAndFeature();

  CategoryAndFeature(const CategoryAndFeature& from);

  inline CategoryAndFeature& operator=(const CategoryAndFeature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CategoryAndFeature& default_instance();

  void Swap(CategoryAndFeature* other);

  // implements Message ----------------------------------------------

  inline CategoryAndFeature* New() const { return New(NULL); }

  CategoryAndFeature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CategoryAndFeature& from);
  void MergeFrom(const CategoryAndFeature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CategoryAndFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string CategoryName = 2;
  void clear_categoryname();
  static const int kCategoryNameFieldNumber = 2;
  const ::std::string& categoryname() const;
  void set_categoryname(const ::std::string& value);
  void set_categoryname(const char* value);
  void set_categoryname(const char* value, size_t size);
  ::std::string* mutable_categoryname();
  ::std::string* release_categoryname();
  void set_allocated_categoryname(::std::string* categoryname);

  // repeated .dg.model.NameAndConfidence Items = 3;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 3;
  const ::dg::model::NameAndConfidence& items(int index) const;
  ::dg::model::NameAndConfidence* mutable_items(int index);
  ::dg::model::NameAndConfidence* add_items();
  ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >&
      items() const;

  // @@protoc_insertion_point(class_scope:dg.model.CategoryAndFeature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr categoryname_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence > items_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static CategoryAndFeature* default_instance_;
};
// -------------------------------------------------------------------

class PeopleAttr : public ::google::protobuf::Message {
 public:
  PeopleAttr();
  virtual ~PeopleAttr();

  PeopleAttr(const PeopleAttr& from);

  inline PeopleAttr& operator=(const PeopleAttr& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeopleAttr& default_instance();

  void Swap(PeopleAttr* other);

  // implements Message ----------------------------------------------

  inline PeopleAttr* New() const { return New(NULL); }

  PeopleAttr* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeopleAttr& from);
  void MergeFrom(const PeopleAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeopleAttr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.NameAndConfidence Sex = 1;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 1;
  const ::dg::model::NameAndConfidence& sex() const;
  ::dg::model::NameAndConfidence* mutable_sex();
  ::dg::model::NameAndConfidence* release_sex();
  void set_allocated_sex(::dg::model::NameAndConfidence* sex);

  // optional .dg.model.NameAndConfidence Age = 2;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  const ::dg::model::NameAndConfidence& age() const;
  ::dg::model::NameAndConfidence* mutable_age();
  ::dg::model::NameAndConfidence* release_age();
  void set_allocated_age(::dg::model::NameAndConfidence* age);

  // optional .dg.model.NameAndConfidence National = 3;
  bool has_national() const;
  void clear_national();
  static const int kNationalFieldNumber = 3;
  const ::dg::model::NameAndConfidence& national() const;
  ::dg::model::NameAndConfidence* mutable_national();
  ::dg::model::NameAndConfidence* release_national();
  void set_allocated_national(::dg::model::NameAndConfidence* national);

  // repeated .dg.model.CategoryAndFeature Category = 4;
  int category_size() const;
  void clear_category();
  static const int kCategoryFieldNumber = 4;
  const ::dg::model::CategoryAndFeature& category(int index) const;
  ::dg::model::CategoryAndFeature* mutable_category(int index);
  ::dg::model::CategoryAndFeature* add_category();
  ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >*
      mutable_category();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >&
      category() const;

  // @@protoc_insertion_point(class_scope:dg.model.PeopleAttr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::NameAndConfidence* sex_;
  ::dg::model::NameAndConfidence* age_;
  ::dg::model::NameAndConfidence* national_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature > category_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static PeopleAttr* default_instance_;
};
// -------------------------------------------------------------------

class RecVehicle : public ::google::protobuf::Message {
 public:
  RecVehicle();
  virtual ~RecVehicle();

  RecVehicle(const RecVehicle& from);

  inline RecVehicle& operator=(const RecVehicle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecVehicle& default_instance();

  void Swap(RecVehicle* other);

  // implements Message ----------------------------------------------

  inline RecVehicle* New() const { return New(NULL); }

  RecVehicle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecVehicle& from);
  void MergeFrom(const RecVehicle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecVehicle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .dg.model.VehicleModelType ModelType = 2;
  bool has_modeltype() const;
  void clear_modeltype();
  static const int kModelTypeFieldNumber = 2;
  const ::dg::model::VehicleModelType& modeltype() const;
  ::dg::model::VehicleModelType* mutable_modeltype();
  ::dg::model::VehicleModelType* release_modeltype();
  void set_allocated_modeltype(::dg::model::VehicleModelType* modeltype);

  // optional .dg.model.Color Color = 3;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  const ::dg::model::Color& color() const;
  ::dg::model::Color* mutable_color();
  ::dg::model::Color* release_color();
  void set_allocated_color(::dg::model::Color* color);

  // optional .dg.model.LicensePlate Plate = 4;
  bool has_plate() const;
  void clear_plate();
  static const int kPlateFieldNumber = 4;
  const ::dg::model::LicensePlate& plate() const;
  ::dg::model::LicensePlate* mutable_plate();
  ::dg::model::LicensePlate* release_plate();
  void set_allocated_plate(::dg::model::LicensePlate* plate);

  // optional .dg.model.CutboardImage Img = 5;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 5;
  const ::dg::model::CutboardImage& img() const;
  ::dg::model::CutboardImage* mutable_img();
  ::dg::model::CutboardImage* release_img();
  void set_allocated_img(::dg::model::CutboardImage* img);

  // repeated .dg.model.VehicleSymbol Symbols = 6;
  int symbols_size() const;
  void clear_symbols();
  static const int kSymbolsFieldNumber = 6;
  const ::dg::model::VehicleSymbol& symbols(int index) const;
  ::dg::model::VehicleSymbol* mutable_symbols(int index);
  ::dg::model::VehicleSymbol* add_symbols();
  ::google::protobuf::RepeatedPtrField< ::dg::model::VehicleSymbol >*
      mutable_symbols();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::VehicleSymbol >&
      symbols() const;

  // optional string Features = 7;
  void clear_features();
  static const int kFeaturesFieldNumber = 7;
  const ::std::string& features() const;
  void set_features(const ::std::string& value);
  void set_features(const char* value);
  void set_features(const char* value, size_t size);
  ::std::string* mutable_features();
  ::std::string* release_features();
  void set_allocated_features(::std::string* features);

  // optional .dg.model.ObjType VehicleType = 8;
  void clear_vehicletype();
  static const int kVehicleTypeFieldNumber = 8;
  ::dg::model::ObjType vehicletype() const;
  void set_vehicletype(::dg::model::ObjType value);

  // optional string VehicleTypeName = 9;
  void clear_vehicletypename();
  static const int kVehicleTypeNameFieldNumber = 9;
  const ::std::string& vehicletypename() const;
  void set_vehicletypename(const ::std::string& value);
  void set_vehicletypename(const char* value);
  void set_vehicletypename(const char* value, size_t size);
  ::std::string* mutable_vehicletypename();
  ::std::string* release_vehicletypename();
  void set_allocated_vehicletypename(::std::string* vehicletypename);

  // repeated .dg.model.LicensePlate Plates = 10;
  int plates_size() const;
  void clear_plates();
  static const int kPlatesFieldNumber = 10;
  const ::dg::model::LicensePlate& plates(int index) const;
  ::dg::model::LicensePlate* mutable_plates(int index);
  ::dg::model::LicensePlate* add_plates();
  ::google::protobuf::RepeatedPtrField< ::dg::model::LicensePlate >*
      mutable_plates();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::LicensePlate >&
      plates() const;

  // repeated .dg.model.Passenger Passengers = 11;
  int passengers_size() const;
  void clear_passengers();
  static const int kPassengersFieldNumber = 11;
  const ::dg::model::Passenger& passengers(int index) const;
  ::dg::model::Passenger* mutable_passengers(int index);
  ::dg::model::Passenger* add_passengers();
  ::google::protobuf::RepeatedPtrField< ::dg::model::Passenger >*
      mutable_passengers();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::Passenger >&
      passengers() const;

  // @@protoc_insertion_point(class_scope:dg.model.RecVehicle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::dg::model::VehicleModelType* modeltype_;
  ::dg::model::Color* color_;
  ::dg::model::LicensePlate* plate_;
  ::dg::model::CutboardImage* img_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::VehicleSymbol > symbols_;
  ::google::protobuf::internal::ArenaStringPtr features_;
  ::google::protobuf::internal::ArenaStringPtr vehicletypename_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::LicensePlate > plates_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::Passenger > passengers_;
  int vehicletype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static RecVehicle* default_instance_;
};
// -------------------------------------------------------------------

class RecNonMotorVehicle_NonMotorPedestrian : public ::google::protobuf::Message {
 public:
  RecNonMotorVehicle_NonMotorPedestrian();
  virtual ~RecNonMotorVehicle_NonMotorPedestrian();

  RecNonMotorVehicle_NonMotorPedestrian(const RecNonMotorVehicle_NonMotorPedestrian& from);

  inline RecNonMotorVehicle_NonMotorPedestrian& operator=(const RecNonMotorVehicle_NonMotorPedestrian& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecNonMotorVehicle_NonMotorPedestrian& default_instance();

  void Swap(RecNonMotorVehicle_NonMotorPedestrian* other);

  // implements Message ----------------------------------------------

  inline RecNonMotorVehicle_NonMotorPedestrian* New() const { return New(NULL); }

  RecNonMotorVehicle_NonMotorPedestrian* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecNonMotorVehicle_NonMotorPedestrian& from);
  void MergeFrom(const RecNonMotorVehicle_NonMotorPedestrian& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecNonMotorVehicle_NonMotorPedestrian* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .dg.model.NameAndConfidence Sex = 2;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 2;
  const ::dg::model::NameAndConfidence& sex() const;
  ::dg::model::NameAndConfidence* mutable_sex();
  ::dg::model::NameAndConfidence* release_sex();
  void set_allocated_sex(::dg::model::NameAndConfidence* sex);

  // repeated .dg.model.CategoryAndFeature Attribute = 3;
  int attribute_size() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  const ::dg::model::CategoryAndFeature& attribute(int index) const;
  ::dg::model::CategoryAndFeature* mutable_attribute(int index);
  ::dg::model::CategoryAndFeature* add_attribute();
  ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >*
      mutable_attribute();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >&
      attribute() const;

  // @@protoc_insertion_point(class_scope:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::dg::model::NameAndConfidence* sex_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature > attribute_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static RecNonMotorVehicle_NonMotorPedestrian* default_instance_;
};
// -------------------------------------------------------------------

class RecNonMotorVehicle : public ::google::protobuf::Message {
 public:
  RecNonMotorVehicle();
  virtual ~RecNonMotorVehicle();

  RecNonMotorVehicle(const RecNonMotorVehicle& from);

  inline RecNonMotorVehicle& operator=(const RecNonMotorVehicle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecNonMotorVehicle& default_instance();

  void Swap(RecNonMotorVehicle* other);

  // implements Message ----------------------------------------------

  inline RecNonMotorVehicle* New() const { return New(NULL); }

  RecNonMotorVehicle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecNonMotorVehicle& from);
  void MergeFrom(const RecNonMotorVehicle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecNonMotorVehicle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RecNonMotorVehicle_NonMotorPedestrian NonMotorPedestrian;

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 NMVehicleType = 2;
  void clear_nmvehicletype();
  static const int kNMVehicleTypeFieldNumber = 2;
  ::google::protobuf::int64 nmvehicletype() const;
  void set_nmvehicletype(::google::protobuf::int64 value);

  // optional string NMVehicleTypeName = 3;
  void clear_nmvehicletypename();
  static const int kNMVehicleTypeNameFieldNumber = 3;
  const ::std::string& nmvehicletypename() const;
  void set_nmvehicletypename(const ::std::string& value);
  void set_nmvehicletypename(const char* value);
  void set_nmvehicletypename(const char* value, size_t size);
  ::std::string* mutable_nmvehicletypename();
  ::std::string* release_nmvehicletypename();
  void set_allocated_nmvehicletypename(::std::string* nmvehicletypename);

  // optional .dg.model.CutboardImage Img = 4;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 4;
  const ::dg::model::CutboardImage& img() const;
  ::dg::model::CutboardImage* mutable_img();
  ::dg::model::CutboardImage* release_img();
  void set_allocated_img(::dg::model::CutboardImage* img);

  // optional .dg.model.NonMotorVehicleGesture NMVehicleGesture = 5;
  void clear_nmvehiclegesture();
  static const int kNMVehicleGestureFieldNumber = 5;
  ::dg::model::NonMotorVehicleGesture nmvehiclegesture() const;
  void set_nmvehiclegesture(::dg::model::NonMotorVehicleGesture value);

  // repeated .dg.model.RecNonMotorVehicle.NonMotorPedestrian Passenger = 6;
  int passenger_size() const;
  void clear_passenger();
  static const int kPassengerFieldNumber = 6;
  const ::dg::model::RecNonMotorVehicle_NonMotorPedestrian& passenger(int index) const;
  ::dg::model::RecNonMotorVehicle_NonMotorPedestrian* mutable_passenger(int index);
  ::dg::model::RecNonMotorVehicle_NonMotorPedestrian* add_passenger();
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle_NonMotorPedestrian >*
      mutable_passenger();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle_NonMotorPedestrian >&
      passenger() const;

  // repeated .dg.model.CategoryAndFeature NMVehicle = 7;
  int nmvehicle_size() const;
  void clear_nmvehicle();
  static const int kNMVehicleFieldNumber = 7;
  const ::dg::model::CategoryAndFeature& nmvehicle(int index) const;
  ::dg::model::CategoryAndFeature* mutable_nmvehicle(int index);
  ::dg::model::CategoryAndFeature* add_nmvehicle();
  ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >*
      mutable_nmvehicle();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >&
      nmvehicle() const;

  // @@protoc_insertion_point(class_scope:dg.model.RecNonMotorVehicle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 nmvehicletype_;
  ::google::protobuf::internal::ArenaStringPtr nmvehicletypename_;
  ::dg::model::CutboardImage* img_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle_NonMotorPedestrian > passenger_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature > nmvehicle_;
  int nmvehiclegesture_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static RecNonMotorVehicle* default_instance_;
};
// -------------------------------------------------------------------

class Passenger : public ::google::protobuf::Message {
 public:
  Passenger();
  virtual ~Passenger();

  Passenger(const Passenger& from);

  inline Passenger& operator=(const Passenger& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Passenger& default_instance();

  void Swap(Passenger* other);

  // implements Message ----------------------------------------------

  inline Passenger* New() const { return New(NULL); }

  Passenger* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Passenger& from);
  void MergeFrom(const Passenger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Passenger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .dg.model.PeopleAttr PassengerAttr = 2;
  bool has_passengerattr() const;
  void clear_passengerattr();
  static const int kPassengerAttrFieldNumber = 2;
  const ::dg::model::PeopleAttr& passengerattr() const;
  ::dg::model::PeopleAttr* mutable_passengerattr();
  ::dg::model::PeopleAttr* release_passengerattr();
  void set_allocated_passengerattr(::dg::model::PeopleAttr* passengerattr);

  // optional .dg.model.RecFace Face = 3;
  bool has_face() const;
  void clear_face();
  static const int kFaceFieldNumber = 3;
  const ::dg::model::RecFace& face() const;
  ::dg::model::RecFace* mutable_face();
  ::dg::model::RecFace* release_face();
  void set_allocated_face(::dg::model::RecFace* face);

  // optional bool Driver = 4;
  void clear_driver();
  static const int kDriverFieldNumber = 4;
  bool driver() const;
  void set_driver(bool value);

  // optional .dg.model.CutboardImage Img = 5;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 5;
  const ::dg::model::CutboardImage& img() const;
  ::dg::model::CutboardImage* mutable_img();
  ::dg::model::CutboardImage* release_img();
  void set_allocated_img(::dg::model::CutboardImage* img);

  // @@protoc_insertion_point(class_scope:dg.model.Passenger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::dg::model::PeopleAttr* passengerattr_;
  ::dg::model::RecFace* face_;
  ::dg::model::CutboardImage* img_;
  bool driver_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Passenger* default_instance_;
};
// -------------------------------------------------------------------

class RecPedestrian : public ::google::protobuf::Message {
 public:
  RecPedestrian();
  virtual ~RecPedestrian();

  RecPedestrian(const RecPedestrian& from);

  inline RecPedestrian& operator=(const RecPedestrian& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecPedestrian& default_instance();

  void Swap(RecPedestrian* other);

  // implements Message ----------------------------------------------

  inline RecPedestrian* New() const { return New(NULL); }

  RecPedestrian* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecPedestrian& from);
  void MergeFrom(const RecPedestrian& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecPedestrian* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .dg.model.CutboardImage Img = 2;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 2;
  const ::dg::model::CutboardImage& img() const;
  ::dg::model::CutboardImage* mutable_img();
  ::dg::model::CutboardImage* release_img();
  void set_allocated_img(::dg::model::CutboardImage* img);

  // optional float Confidence = 3;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  float confidence() const;
  void set_confidence(float value);

  // optional .dg.model.PeopleAttr PedesAttr = 4;
  bool has_pedesattr() const;
  void clear_pedesattr();
  static const int kPedesAttrFieldNumber = 4;
  const ::dg::model::PeopleAttr& pedesattr() const;
  ::dg::model::PeopleAttr* mutable_pedesattr();
  ::dg::model::PeopleAttr* release_pedesattr();
  void set_allocated_pedesattr(::dg::model::PeopleAttr* pedesattr);

  // optional .dg.model.RecFace Face = 5;
  bool has_face() const;
  void clear_face();
  static const int kFaceFieldNumber = 5;
  const ::dg::model::RecFace& face() const;
  ::dg::model::RecFace* mutable_face();
  ::dg::model::RecFace* release_face();
  void set_allocated_face(::dg::model::RecFace* face);

  // @@protoc_insertion_point(class_scope:dg.model.RecPedestrian)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::dg::model::CutboardImage* img_;
  ::dg::model::PeopleAttr* pedesattr_;
  ::dg::model::RecFace* face_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static RecPedestrian* default_instance_;
};
// -------------------------------------------------------------------

class VehicleModelType : public ::google::protobuf::Message {
 public:
  VehicleModelType();
  virtual ~VehicleModelType();

  VehicleModelType(const VehicleModelType& from);

  inline VehicleModelType& operator=(const VehicleModelType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleModelType& default_instance();

  void Swap(VehicleModelType* other);

  // implements Message ----------------------------------------------

  inline VehicleModelType* New() const { return New(NULL); }

  VehicleModelType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleModelType& from);
  void MergeFrom(const VehicleModelType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleModelType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int32 BrandId = 2;
  void clear_brandid();
  static const int kBrandIdFieldNumber = 2;
  ::google::protobuf::int32 brandid() const;
  void set_brandid(::google::protobuf::int32 value);

  // optional int32 SubBrandId = 3;
  void clear_subbrandid();
  static const int kSubBrandIdFieldNumber = 3;
  ::google::protobuf::int32 subbrandid() const;
  void set_subbrandid(::google::protobuf::int32 value);

  // optional int32 ModelYearId = 4;
  void clear_modelyearid();
  static const int kModelYearIdFieldNumber = 4;
  ::google::protobuf::int32 modelyearid() const;
  void set_modelyearid(::google::protobuf::int32 value);

  // optional float Confidence = 5;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 5;
  float confidence() const;
  void set_confidence(float value);

  // optional string Type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string Brand = 7;
  void clear_brand();
  static const int kBrandFieldNumber = 7;
  const ::std::string& brand() const;
  void set_brand(const ::std::string& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  ::std::string* mutable_brand();
  ::std::string* release_brand();
  void set_allocated_brand(::std::string* brand);

  // optional string SubBrand = 8;
  void clear_subbrand();
  static const int kSubBrandFieldNumber = 8;
  const ::std::string& subbrand() const;
  void set_subbrand(const ::std::string& value);
  void set_subbrand(const char* value);
  void set_subbrand(const char* value, size_t size);
  ::std::string* mutable_subbrand();
  ::std::string* release_subbrand();
  void set_allocated_subbrand(::std::string* subbrand);

  // optional string ModelYear = 9;
  void clear_modelyear();
  static const int kModelYearFieldNumber = 9;
  const ::std::string& modelyear() const;
  void set_modelyear(const ::std::string& value);
  void set_modelyear(const char* value);
  void set_modelyear(const char* value, size_t size);
  ::std::string* mutable_modelyear();
  ::std::string* release_modelyear();
  void set_allocated_modelyear(::std::string* modelyear);

  // optional int32 TypeId = 10;
  void clear_typeid_();
  static const int kTypeIdFieldNumber = 10;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // optional string Model = 11;
  void clear_model();
  static const int kModelFieldNumber = 11;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // optional int32 IsHead = 12;
  void clear_ishead();
  static const int kIsHeadFieldNumber = 12;
  ::google::protobuf::int32 ishead() const;
  void set_ishead(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dg.model.VehicleModelType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 brandid_;
  ::google::protobuf::int32 subbrandid_;
  ::google::protobuf::int32 modelyearid_;
  float confidence_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr brand_;
  ::google::protobuf::internal::ArenaStringPtr subbrand_;
  ::google::protobuf::internal::ArenaStringPtr modelyear_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 ishead_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static VehicleModelType* default_instance_;
};
// -------------------------------------------------------------------

class LicensePlate : public ::google::protobuf::Message {
 public:
  LicensePlate();
  virtual ~LicensePlate();

  LicensePlate(const LicensePlate& from);

  inline LicensePlate& operator=(const LicensePlate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LicensePlate& default_instance();

  void Swap(LicensePlate* other);

  // implements Message ----------------------------------------------

  inline LicensePlate* New() const { return New(NULL); }

  LicensePlate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LicensePlate& from);
  void MergeFrom(const LicensePlate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LicensePlate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PlateText = 1;
  void clear_platetext();
  static const int kPlateTextFieldNumber = 1;
  const ::std::string& platetext() const;
  void set_platetext(const ::std::string& value);
  void set_platetext(const char* value);
  void set_platetext(const char* value, size_t size);
  ::std::string* mutable_platetext();
  ::std::string* release_platetext();
  void set_allocated_platetext(::std::string* platetext);

  // optional .dg.model.Color Color = 2;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 2;
  const ::dg::model::Color& color() const;
  ::dg::model::Color* mutable_color();
  ::dg::model::Color* release_color();
  void set_allocated_color(::dg::model::Color* color);

  // optional int32 TypeId = 3;
  void clear_typeid_();
  static const int kTypeIdFieldNumber = 3;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // optional string TypeName = 4;
  void clear_typename_();
  static const int kTypeNameFieldNumber = 4;
  const ::std::string& typename_() const;
  void set_typename_(const ::std::string& value);
  void set_typename_(const char* value);
  void set_typename_(const char* value, size_t size);
  ::std::string* mutable_typename_();
  ::std::string* release_typename_();
  void set_allocated_typename_(::std::string* typename_);

  // optional float Confidence = 5;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 5;
  float confidence() const;
  void set_confidence(float value);

  // optional .dg.model.Cutboard Cutboard = 6;
  bool has_cutboard() const;
  void clear_cutboard();
  static const int kCutboardFieldNumber = 6;
  const ::dg::model::Cutboard& cutboard() const;
  ::dg::model::Cutboard* mutable_cutboard();
  ::dg::model::Cutboard* release_cutboard();
  void set_allocated_cutboard(::dg::model::Cutboard* cutboard);

  // optional float LocalProvinceConfidence = 7;
  void clear_localprovinceconfidence();
  static const int kLocalProvinceConfidenceFieldNumber = 7;
  float localprovinceconfidence() const;
  void set_localprovinceconfidence(float value);

  // @@protoc_insertion_point(class_scope:dg.model.LicensePlate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr platetext_;
  ::dg::model::Color* color_;
  ::google::protobuf::internal::ArenaStringPtr typename__;
  ::google::protobuf::int32 typeid__;
  float confidence_;
  ::dg::model::Cutboard* cutboard_;
  float localprovinceconfidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static LicensePlate* default_instance_;
};
// -------------------------------------------------------------------

class VehicleSymbol : public ::google::protobuf::Message {
 public:
  VehicleSymbol();
  virtual ~VehicleSymbol();

  VehicleSymbol(const VehicleSymbol& from);

  inline VehicleSymbol& operator=(const VehicleSymbol& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleSymbol& default_instance();

  void Swap(VehicleSymbol* other);

  // implements Message ----------------------------------------------

  inline VehicleSymbol* New() const { return New(NULL); }

  VehicleSymbol* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleSymbol& from);
  void MergeFrom(const VehicleSymbol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleSymbol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SymbolId = 1;
  void clear_symbolid();
  static const int kSymbolIdFieldNumber = 1;
  ::google::protobuf::int32 symbolid() const;
  void set_symbolid(::google::protobuf::int32 value);

  // optional string SymbolName = 2;
  void clear_symbolname();
  static const int kSymbolNameFieldNumber = 2;
  const ::std::string& symbolname() const;
  void set_symbolname(const ::std::string& value);
  void set_symbolname(const char* value);
  void set_symbolname(const char* value, size_t size);
  ::std::string* mutable_symbolname();
  ::std::string* release_symbolname();
  void set_allocated_symbolname(::std::string* symbolname);

  // repeated .dg.model.Symbol Symbols = 3;
  int symbols_size() const;
  void clear_symbols();
  static const int kSymbolsFieldNumber = 3;
  const ::dg::model::Symbol& symbols(int index) const;
  ::dg::model::Symbol* mutable_symbols(int index);
  ::dg::model::Symbol* add_symbols();
  ::google::protobuf::RepeatedPtrField< ::dg::model::Symbol >*
      mutable_symbols();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::Symbol >&
      symbols() const;

  // @@protoc_insertion_point(class_scope:dg.model.VehicleSymbol)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbolname_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::Symbol > symbols_;
  ::google::protobuf::int32 symbolid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static VehicleSymbol* default_instance_;
};
// -------------------------------------------------------------------

class Symbol : public ::google::protobuf::Message {
 public:
  Symbol();
  virtual ~Symbol();

  Symbol(const Symbol& from);

  inline Symbol& operator=(const Symbol& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Symbol& default_instance();

  void Swap(Symbol* other);

  // implements Message ----------------------------------------------

  inline Symbol* New() const { return New(NULL); }

  Symbol* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Symbol& from);
  void MergeFrom(const Symbol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Symbol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.Cutboard Cutboard = 1;
  bool has_cutboard() const;
  void clear_cutboard();
  static const int kCutboardFieldNumber = 1;
  const ::dg::model::Cutboard& cutboard() const;
  ::dg::model::Cutboard* mutable_cutboard();
  ::dg::model::Cutboard* release_cutboard();
  void set_allocated_cutboard(::dg::model::Cutboard* cutboard);

  // optional float Confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:dg.model.Symbol)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::Cutboard* cutboard_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Symbol* default_instance_;
};
// -------------------------------------------------------------------

class StorageConfig : public ::google::protobuf::Message {
 public:
  StorageConfig();
  virtual ~StorageConfig();

  StorageConfig(const StorageConfig& from);

  inline StorageConfig& operator=(const StorageConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageConfig& default_instance();

  void Swap(StorageConfig* other);

  // implements Message ----------------------------------------------

  inline StorageConfig* New() const { return New(NULL); }

  StorageConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StorageConfig& from);
  void MergeFrom(const StorageConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional .dg.model.DBType Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::dg::model::DBType type() const;
  void set_type(::dg::model::DBType value);

  // repeated string Tags = 3;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 3;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // @@protoc_insertion_point(class_scope:dg.model.StorageConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static StorageConfig* default_instance_;
};
// -------------------------------------------------------------------

class VehicleObj : public ::google::protobuf::Message {
 public:
  VehicleObj();
  virtual ~VehicleObj();

  VehicleObj(const VehicleObj& from);

  inline VehicleObj& operator=(const VehicleObj& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleObj& default_instance();

  void Swap(VehicleObj* other);

  // implements Message ----------------------------------------------

  inline VehicleObj* New() const { return New(NULL); }

  VehicleObj* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleObj& from);
  void MergeFrom(const VehicleObj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.SrcMetadata Metadata = 1;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::dg::model::SrcMetadata& metadata() const;
  ::dg::model::SrcMetadata* mutable_metadata();
  ::dg::model::SrcMetadata* release_metadata();
  void set_allocated_metadata(::dg::model::SrcMetadata* metadata);

  // optional .dg.model.Image Img = 2;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 2;
  const ::dg::model::Image& img() const;
  ::dg::model::Image* mutable_img();
  ::dg::model::Image* release_img();
  void set_allocated_img(::dg::model::Image* img);

  // repeated .dg.model.RecVehicle Vehicle = 3;
  int vehicle_size() const;
  void clear_vehicle();
  static const int kVehicleFieldNumber = 3;
  const ::dg::model::RecVehicle& vehicle(int index) const;
  ::dg::model::RecVehicle* mutable_vehicle(int index);
  ::dg::model::RecVehicle* add_vehicle();
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >*
      mutable_vehicle();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >&
      vehicle() const;

  // @@protoc_insertion_point(class_scope:dg.model.VehicleObj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::SrcMetadata* metadata_;
  ::dg::model::Image* img_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle > vehicle_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static VehicleObj* default_instance_;
};
// -------------------------------------------------------------------

class PedestrianObj : public ::google::protobuf::Message {
 public:
  PedestrianObj();
  virtual ~PedestrianObj();

  PedestrianObj(const PedestrianObj& from);

  inline PedestrianObj& operator=(const PedestrianObj& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PedestrianObj& default_instance();

  void Swap(PedestrianObj* other);

  // implements Message ----------------------------------------------

  inline PedestrianObj* New() const { return New(NULL); }

  PedestrianObj* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PedestrianObj& from);
  void MergeFrom(const PedestrianObj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PedestrianObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.SrcMetadata Metadata = 1;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::dg::model::SrcMetadata& metadata() const;
  ::dg::model::SrcMetadata* mutable_metadata();
  ::dg::model::SrcMetadata* release_metadata();
  void set_allocated_metadata(::dg::model::SrcMetadata* metadata);

  // optional .dg.model.Image Img = 2;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 2;
  const ::dg::model::Image& img() const;
  ::dg::model::Image* mutable_img();
  ::dg::model::Image* release_img();
  void set_allocated_img(::dg::model::Image* img);

  // repeated .dg.model.RecPedestrian Pedestrian = 3;
  int pedestrian_size() const;
  void clear_pedestrian();
  static const int kPedestrianFieldNumber = 3;
  const ::dg::model::RecPedestrian& pedestrian(int index) const;
  ::dg::model::RecPedestrian* mutable_pedestrian(int index);
  ::dg::model::RecPedestrian* add_pedestrian();
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >*
      mutable_pedestrian();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >&
      pedestrian() const;

  // @@protoc_insertion_point(class_scope:dg.model.PedestrianObj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::SrcMetadata* metadata_;
  ::dg::model::Image* img_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian > pedestrian_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static PedestrianObj* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SrcMetadata

// optional int64 Timestamp = 1;
inline void SrcMetadata::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SrcMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.Timestamp)
  return timestamp_;
}
inline void SrcMetadata::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.Timestamp)
}

// optional int32 Duration = 2;
inline void SrcMetadata::clear_duration() {
  duration_ = 0;
}
inline ::google::protobuf::int32 SrcMetadata::duration() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.Duration)
  return duration_;
}
inline void SrcMetadata::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.Duration)
}

// optional int32 SensorId = 3;
inline void SrcMetadata::clear_sensorid() {
  sensorid_ = 0;
}
inline ::google::protobuf::int32 SrcMetadata::sensorid() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorId)
  return sensorid_;
}
inline void SrcMetadata::set_sensorid(::google::protobuf::int32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorId)
}

// optional string SensorName = 4;
inline void SrcMetadata::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrcMetadata::sensorname() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorName)
  return sensorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_sensorname(const ::std::string& value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorName)
}
inline void SrcMetadata::set_sensorname(const char* value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorName)
}
inline void SrcMetadata::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorName)
}
inline ::std::string* SrcMetadata::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorName)
  return sensorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrcMetadata::release_sensorname() {
  // @@protoc_insertion_point(field_release:dg.model.SrcMetadata.SensorName)
  
  return sensorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname != NULL) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorName)
}

// optional string SensorUrl = 5;
inline void SrcMetadata::clear_sensorurl() {
  sensorurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrcMetadata::sensorurl() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorUrl)
  return sensorurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_sensorurl(const ::std::string& value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorUrl)
}
inline void SrcMetadata::set_sensorurl(const char* value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorUrl)
}
inline void SrcMetadata::set_sensorurl(const char* value, size_t size) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorUrl)
}
inline ::std::string* SrcMetadata::mutable_sensorurl() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorUrl)
  return sensorurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrcMetadata::release_sensorurl() {
  // @@protoc_insertion_point(field_release:dg.model.SrcMetadata.SensorUrl)
  
  return sensorurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_allocated_sensorurl(::std::string* sensorurl) {
  if (sensorurl != NULL) {
    
  } else {
    
  }
  sensorurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorurl);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorUrl)
}

// optional int32 RepoId = 6;
inline void SrcMetadata::clear_repoid() {
  repoid_ = 0;
}
inline ::google::protobuf::int32 SrcMetadata::repoid() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.RepoId)
  return repoid_;
}
inline void SrcMetadata::set_repoid(::google::protobuf::int32 value) {
  
  repoid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.RepoId)
}

// optional string RepoInfo = 7;
inline void SrcMetadata::clear_repoinfo() {
  repoinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrcMetadata::repoinfo() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.RepoInfo)
  return repoinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_repoinfo(const ::std::string& value) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.RepoInfo)
}
inline void SrcMetadata::set_repoinfo(const char* value) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.RepoInfo)
}
inline void SrcMetadata::set_repoinfo(const char* value, size_t size) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.RepoInfo)
}
inline ::std::string* SrcMetadata::mutable_repoinfo() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.RepoInfo)
  return repoinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrcMetadata::release_repoinfo() {
  // @@protoc_insertion_point(field_release:dg.model.SrcMetadata.RepoInfo)
  
  return repoinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_allocated_repoinfo(::std::string* repoinfo) {
  if (repoinfo != NULL) {
    
  } else {
    
  }
  repoinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repoinfo);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.RepoInfo)
}

// optional .dg.model.ObjType ObjType = 8;
inline void SrcMetadata::clear_objtype() {
  objtype_ = 0;
}
inline ::dg::model::ObjType SrcMetadata::objtype() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.ObjType)
  return static_cast< ::dg::model::ObjType >(objtype_);
}
inline void SrcMetadata::set_objtype(::dg::model::ObjType value) {
  
  objtype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.ObjType)
}

// optional string SensorIdStr = 9;
inline void SrcMetadata::clear_sensoridstr() {
  sensoridstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrcMetadata::sensoridstr() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorIdStr)
  return sensoridstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_sensoridstr(const ::std::string& value) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorIdStr)
}
inline void SrcMetadata::set_sensoridstr(const char* value) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorIdStr)
}
inline void SrcMetadata::set_sensoridstr(const char* value, size_t size) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorIdStr)
}
inline ::std::string* SrcMetadata::mutable_sensoridstr() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorIdStr)
  return sensoridstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrcMetadata::release_sensoridstr() {
  // @@protoc_insertion_point(field_release:dg.model.SrcMetadata.SensorIdStr)
  
  return sensoridstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_allocated_sensoridstr(::std::string* sensoridstr) {
  if (sensoridstr != NULL) {
    
  } else {
    
  }
  sensoridstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensoridstr);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorIdStr)
}

// -------------------------------------------------------------------

// Cutboard

// optional uint32 X = 1;
inline void Cutboard::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::x() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.X)
  return x_;
}
inline void Cutboard::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.X)
}

// optional uint32 Y = 2;
inline void Cutboard::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::y() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Y)
  return y_;
}
inline void Cutboard::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Y)
}

// optional uint32 Width = 3;
inline void Cutboard::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::width() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Width)
  return width_;
}
inline void Cutboard::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Width)
}

// optional uint32 Height = 4;
inline void Cutboard::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::height() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Height)
  return height_;
}
inline void Cutboard::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Height)
}

// optional uint32 ResWidth = 5;
inline void Cutboard::clear_reswidth() {
  reswidth_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::reswidth() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.ResWidth)
  return reswidth_;
}
inline void Cutboard::set_reswidth(::google::protobuf::uint32 value) {
  
  reswidth_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.ResWidth)
}

// optional uint32 ResHeight = 6;
inline void Cutboard::clear_resheight() {
  resheight_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::resheight() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.ResHeight)
  return resheight_;
}
inline void Cutboard::set_resheight(::google::protobuf::uint32 value) {
  
  resheight_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.ResHeight)
}

// optional float Confidence = 7;
inline void Cutboard::clear_confidence() {
  confidence_ = 0;
}
inline float Cutboard::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Confidence)
  return confidence_;
}
inline void Cutboard::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Confidence)
}

// -------------------------------------------------------------------

// CutboardImage

// optional .dg.model.Cutboard Cutboard = 1;
inline bool CutboardImage::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
inline void CutboardImage::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
inline const ::dg::model::Cutboard& CutboardImage::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.CutboardImage.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
inline ::dg::model::Cutboard* CutboardImage::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.CutboardImage.Cutboard)
  return cutboard_;
}
inline ::dg::model::Cutboard* CutboardImage::release_cutboard() {
  // @@protoc_insertion_point(field_release:dg.model.CutboardImage.Cutboard)
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.CutboardImage.Cutboard)
}

// optional .dg.model.Image Img = 2;
inline bool CutboardImage::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void CutboardImage::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::dg::model::Image& CutboardImage::img() const {
  // @@protoc_insertion_point(field_get:dg.model.CutboardImage.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::dg::model::Image* CutboardImage::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.CutboardImage.Img)
  return img_;
}
inline ::dg::model::Image* CutboardImage::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.CutboardImage.Img)
  
  ::dg::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_img(::dg::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.CutboardImage.Img)
}

// -------------------------------------------------------------------

// Color

// optional int32 ColorId = 1;
inline void Color::clear_colorid() {
  colorid_ = 0;
}
inline ::google::protobuf::int32 Color::colorid() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.ColorId)
  return colorid_;
}
inline void Color::set_colorid(::google::protobuf::int32 value) {
  
  colorid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Color.ColorId)
}

// optional float Confidence = 2;
inline void Color::clear_confidence() {
  confidence_ = 0;
}
inline float Color::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.Confidence)
  return confidence_;
}
inline void Color::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Color.Confidence)
}

// optional string ColorName = 3;
inline void Color::clear_colorname() {
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Color::colorname() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.ColorName)
  return colorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_colorname(const ::std::string& value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Color.ColorName)
}
inline void Color::set_colorname(const char* value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Color.ColorName)
}
inline void Color::set_colorname(const char* value, size_t size) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Color.ColorName)
}
inline ::std::string* Color::mutable_colorname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Color.ColorName)
  return colorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Color::release_colorname() {
  // @@protoc_insertion_point(field_release:dg.model.Color.ColorName)
  
  return colorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_allocated_colorname(::std::string* colorname) {
  if (colorname != NULL) {
    
  } else {
    
  }
  colorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colorname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Color.ColorName)
}

// -------------------------------------------------------------------

// FeatureVector

// optional int64 Id = 1;
inline void FeatureVector::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FeatureVector::id() const {
  // @@protoc_insertion_point(field_get:dg.model.FeatureVector.Id)
  return id_;
}
inline void FeatureVector::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FeatureVector.Id)
}

// optional string Feature = 2;
inline void FeatureVector::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureVector::feature() const {
  // @@protoc_insertion_point(field_get:dg.model.FeatureVector.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureVector::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FeatureVector.Feature)
}
inline void FeatureVector::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FeatureVector.Feature)
}
inline void FeatureVector::set_feature(const char* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FeatureVector.Feature)
}
inline ::std::string* FeatureVector::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.FeatureVector.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureVector::release_feature() {
  // @@protoc_insertion_point(field_release:dg.model.FeatureVector.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureVector::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:dg.model.FeatureVector.Feature)
}

// -------------------------------------------------------------------

// NullMessage

// -------------------------------------------------------------------

// FaceAttribute

// optional int32 Id = 1;
inline void FaceAttribute::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::id() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.Id)
  return id_;
}
inline void FaceAttribute::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.Id)
}

// optional float confidence = 2;
inline void FaceAttribute::clear_confidence() {
  confidence_ = 0;
}
inline float FaceAttribute::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.confidence)
  return confidence_;
}
inline void FaceAttribute::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.confidence)
}

// optional string Name = 3;
inline void FaceAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FaceAttribute::name() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaceAttribute::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.Name)
}
inline void FaceAttribute::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FaceAttribute.Name)
}
inline void FaceAttribute::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FaceAttribute.Name)
}
inline ::std::string* FaceAttribute::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAttribute.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaceAttribute::release_name() {
  // @@protoc_insertion_point(field_release:dg.model.FaceAttribute.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaceAttribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dg.model.FaceAttribute.Name)
}

// optional bool ValueBool = 9;
inline bool FaceAttribute::has_valuebool() const {
  return Value_case() == kValueBool;
}
inline void FaceAttribute::set_has_valuebool() {
  _oneof_case_[0] = kValueBool;
}
inline void FaceAttribute::clear_valuebool() {
  if (has_valuebool()) {
    Value_.valuebool_ = false;
    clear_has_Value();
  }
}
inline bool FaceAttribute::valuebool() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueBool)
  if (has_valuebool()) {
    return Value_.valuebool_;
  }
  return false;
}
inline void FaceAttribute::set_valuebool(bool value) {
  if (!has_valuebool()) {
    clear_Value();
    set_has_valuebool();
  }
  Value_.valuebool_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueBool)
}

// optional int32 ValueInt = 10;
inline bool FaceAttribute::has_valueint() const {
  return Value_case() == kValueInt;
}
inline void FaceAttribute::set_has_valueint() {
  _oneof_case_[0] = kValueInt;
}
inline void FaceAttribute::clear_valueint() {
  if (has_valueint()) {
    Value_.valueint_ = 0;
    clear_has_Value();
  }
}
inline ::google::protobuf::int32 FaceAttribute::valueint() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueInt)
  if (has_valueint()) {
    return Value_.valueint_;
  }
  return 0;
}
inline void FaceAttribute::set_valueint(::google::protobuf::int32 value) {
  if (!has_valueint()) {
    clear_Value();
    set_has_valueint();
  }
  Value_.valueint_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueInt)
}

// optional float ValueFloat = 11;
inline bool FaceAttribute::has_valuefloat() const {
  return Value_case() == kValueFloat;
}
inline void FaceAttribute::set_has_valuefloat() {
  _oneof_case_[0] = kValueFloat;
}
inline void FaceAttribute::clear_valuefloat() {
  if (has_valuefloat()) {
    Value_.valuefloat_ = 0;
    clear_has_Value();
  }
}
inline float FaceAttribute::valuefloat() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueFloat)
  if (has_valuefloat()) {
    return Value_.valuefloat_;
  }
  return 0;
}
inline void FaceAttribute::set_valuefloat(float value) {
  if (!has_valuefloat()) {
    clear_Value();
    set_has_valuefloat();
  }
  Value_.valuefloat_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueFloat)
}

// optional string ValueString = 12;
inline bool FaceAttribute::has_valuestring() const {
  return Value_case() == kValueString;
}
inline void FaceAttribute::set_has_valuestring() {
  _oneof_case_[0] = kValueString;
}
inline void FaceAttribute::clear_valuestring() {
  if (has_valuestring()) {
    Value_.valuestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Value();
  }
}
inline const ::std::string& FaceAttribute::valuestring() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueString)
  if (has_valuestring()) {
    return Value_.valuestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void FaceAttribute::set_valuestring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueString)
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueString)
}
inline void FaceAttribute::set_valuestring(const char* value) {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FaceAttribute.ValueString)
}
inline void FaceAttribute::set_valuestring(const char* value, size_t size) {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FaceAttribute.ValueString)
}
inline ::std::string* FaceAttribute::mutable_valuestring() {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAttribute.ValueString)
  return Value_.valuestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaceAttribute::release_valuestring() {
  // @@protoc_insertion_point(field_release:dg.model.FaceAttribute.ValueString)
  if (has_valuestring()) {
    clear_has_Value();
    return Value_.valuestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void FaceAttribute::set_allocated_valuestring(::std::string* valuestring) {
  if (!has_valuestring()) {
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Value();
  if (valuestring != NULL) {
    set_has_valuestring();
    Value_.valuestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        valuestring);
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.FaceAttribute.ValueString)
}

inline bool FaceAttribute::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void FaceAttribute::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline FaceAttribute::ValueCase FaceAttribute::Value_case() const {
  return FaceAttribute::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Image

// optional string Id = 1;
inline void Image::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::id() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.Id)
}
inline void Image::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.Id)
}
inline void Image::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.Id)
}
inline ::std::string* Image::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_id() {
  // @@protoc_insertion_point(field_release:dg.model.Image.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.Id)
}

// optional int32 Width = 2;
inline void Image::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Width)
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Image.Width)
}

// optional int32 Height = 3;
inline void Image::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Height)
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Image.Height)
}

// optional string URI = 4;
inline void Image::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::uri() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.URI)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.URI)
}
inline void Image::set_uri(const char* value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.URI)
}
inline void Image::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.URI)
}
inline ::std::string* Image::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.URI)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_uri() {
  // @@protoc_insertion_point(field_release:dg.model.Image.URI)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.URI)
}

// optional string BinData = 5;
inline void Image::clear_bindata() {
  bindata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::bindata() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.BinData)
  return bindata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_bindata(const ::std::string& value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.BinData)
}
inline void Image::set_bindata(const char* value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.BinData)
}
inline void Image::set_bindata(const char* value, size_t size) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.BinData)
}
inline ::std::string* Image::mutable_bindata() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.BinData)
  return bindata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_bindata() {
  // @@protoc_insertion_point(field_release:dg.model.Image.BinData)
  
  return bindata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_bindata(::std::string* bindata) {
  if (bindata != NULL) {
    
  } else {
    
  }
  bindata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindata);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.BinData)
}

// -------------------------------------------------------------------

// RecFace

// optional int64 Id = 1;
inline void RecFace::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RecFace::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Id)
  return id_;
}
inline void RecFace::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Id)
}

// optional .dg.model.CutboardImage Img = 2;
inline bool RecFace::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void RecFace::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::dg::model::CutboardImage& RecFace::img() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::dg::model::CutboardImage* RecFace::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Img)
  return img_;
}
inline ::dg::model::CutboardImage* RecFace::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.RecFace.Img)
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void RecFace::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.Img)
}

// optional string Features = 3;
inline void RecFace::clear_features() {
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecFace::features() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Features)
  return features_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecFace::set_features(const ::std::string& value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Features)
}
inline void RecFace::set_features(const char* value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecFace.Features)
}
inline void RecFace::set_features(const char* value, size_t size) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecFace.Features)
}
inline ::std::string* RecFace::mutable_features() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Features)
  return features_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecFace::release_features() {
  // @@protoc_insertion_point(field_release:dg.model.RecFace.Features)
  
  return features_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecFace::set_allocated_features(::std::string* features) {
  if (features != NULL) {
    
  } else {
    
  }
  features_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), features);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.Features)
}

// optional float Confidence = 4;
inline void RecFace::clear_confidence() {
  confidence_ = 0;
}
inline float RecFace::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Confidence)
  return confidence_;
}
inline void RecFace::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Confidence)
}

// map<string, float> AlignScores = 5;
inline int RecFace::alignscores_size() const {
  return alignscores_.size();
}
inline void RecFace::clear_alignscores() {
  alignscores_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, float >&
RecFace::alignscores() const {
  // @@protoc_insertion_point(field_map:dg.model.RecFace.AlignScores)
  return alignscores_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, float >*
RecFace::mutable_alignscores() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.RecFace.AlignScores)
  return alignscores_.MutableMap();
}

// map<string, float> Qualities = 6;
inline int RecFace::qualities_size() const {
  return qualities_.size();
}
inline void RecFace::clear_qualities() {
  qualities_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, float >&
RecFace::qualities() const {
  // @@protoc_insertion_point(field_map:dg.model.RecFace.Qualities)
  return qualities_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, float >*
RecFace::mutable_qualities() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.RecFace.Qualities)
  return qualities_.MutableMap();
}

// repeated .dg.model.FaceAttribute Attributes = 7;
inline int RecFace::attributes_size() const {
  return attributes_.size();
}
inline void RecFace::clear_attributes() {
  attributes_.Clear();
}
inline const ::dg::model::FaceAttribute& RecFace::attributes(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Attributes)
  return attributes_.Get(index);
}
inline ::dg::model::FaceAttribute* RecFace::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Attributes)
  return attributes_.Mutable(index);
}
inline ::dg::model::FaceAttribute* RecFace::add_attributes() {
  // @@protoc_insertion_point(field_add:dg.model.RecFace.Attributes)
  return attributes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >*
RecFace::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecFace.Attributes)
  return &attributes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >&
RecFace::attributes() const {
  // @@protoc_insertion_point(field_list:dg.model.RecFace.Attributes)
  return attributes_;
}

// optional string DetectResult = 8;
inline void RecFace::clear_detectresult() {
  detectresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecFace::detectresult() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.DetectResult)
  return detectresult_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecFace::set_detectresult(const ::std::string& value) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecFace.DetectResult)
}
inline void RecFace::set_detectresult(const char* value) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecFace.DetectResult)
}
inline void RecFace::set_detectresult(const char* value, size_t size) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecFace.DetectResult)
}
inline ::std::string* RecFace::mutable_detectresult() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.DetectResult)
  return detectresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecFace::release_detectresult() {
  // @@protoc_insertion_point(field_release:dg.model.RecFace.DetectResult)
  
  return detectresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecFace::set_allocated_detectresult(::std::string* detectresult) {
  if (detectresult != NULL) {
    
  } else {
    
  }
  detectresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detectresult);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.DetectResult)
}

// optional string AlignResult = 9;
inline void RecFace::clear_alignresult() {
  alignresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecFace::alignresult() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.AlignResult)
  return alignresult_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecFace::set_alignresult(const ::std::string& value) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecFace.AlignResult)
}
inline void RecFace::set_alignresult(const char* value) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecFace.AlignResult)
}
inline void RecFace::set_alignresult(const char* value, size_t size) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecFace.AlignResult)
}
inline ::std::string* RecFace::mutable_alignresult() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.AlignResult)
  return alignresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecFace::release_alignresult() {
  // @@protoc_insertion_point(field_release:dg.model.RecFace.AlignResult)
  
  return alignresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecFace::set_allocated_alignresult(::std::string* alignresult) {
  if (alignresult != NULL) {
    
  } else {
    
  }
  alignresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alignresult);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.AlignResult)
}

// -------------------------------------------------------------------

// NameAndConfidence

// optional int32 Id = 1;
inline void NameAndConfidence::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 NameAndConfidence::id() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Id)
  return id_;
}
inline void NameAndConfidence::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Id)
}

// optional string Name = 2;
inline void NameAndConfidence::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NameAndConfidence::name() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameAndConfidence::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Name)
}
inline void NameAndConfidence::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.NameAndConfidence.Name)
}
inline void NameAndConfidence::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.NameAndConfidence.Name)
}
inline ::std::string* NameAndConfidence::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.NameAndConfidence.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameAndConfidence::release_name() {
  // @@protoc_insertion_point(field_release:dg.model.NameAndConfidence.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameAndConfidence::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dg.model.NameAndConfidence.Name)
}

// optional float Confidence = 3;
inline void NameAndConfidence::clear_confidence() {
  confidence_ = 0;
}
inline float NameAndConfidence::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Confidence)
  return confidence_;
}
inline void NameAndConfidence::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Confidence)
}

// -------------------------------------------------------------------

// CategoryAndFeature

// optional int32 Id = 1;
inline void CategoryAndFeature::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 CategoryAndFeature::id() const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.Id)
  return id_;
}
inline void CategoryAndFeature::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.CategoryAndFeature.Id)
}

// optional string CategoryName = 2;
inline void CategoryAndFeature::clear_categoryname() {
  categoryname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoryAndFeature::categoryname() const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.CategoryName)
  return categoryname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryAndFeature::set_categoryname(const ::std::string& value) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.CategoryAndFeature.CategoryName)
}
inline void CategoryAndFeature::set_categoryname(const char* value) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.CategoryAndFeature.CategoryName)
}
inline void CategoryAndFeature::set_categoryname(const char* value, size_t size) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.CategoryAndFeature.CategoryName)
}
inline ::std::string* CategoryAndFeature::mutable_categoryname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.CategoryAndFeature.CategoryName)
  return categoryname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoryAndFeature::release_categoryname() {
  // @@protoc_insertion_point(field_release:dg.model.CategoryAndFeature.CategoryName)
  
  return categoryname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryAndFeature::set_allocated_categoryname(::std::string* categoryname) {
  if (categoryname != NULL) {
    
  } else {
    
  }
  categoryname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), categoryname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.CategoryAndFeature.CategoryName)
}

// repeated .dg.model.NameAndConfidence Items = 3;
inline int CategoryAndFeature::items_size() const {
  return items_.size();
}
inline void CategoryAndFeature::clear_items() {
  items_.Clear();
}
inline const ::dg::model::NameAndConfidence& CategoryAndFeature::items(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.Items)
  return items_.Get(index);
}
inline ::dg::model::NameAndConfidence* CategoryAndFeature::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.CategoryAndFeature.Items)
  return items_.Mutable(index);
}
inline ::dg::model::NameAndConfidence* CategoryAndFeature::add_items() {
  // @@protoc_insertion_point(field_add:dg.model.CategoryAndFeature.Items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >*
CategoryAndFeature::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.CategoryAndFeature.Items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >&
CategoryAndFeature::items() const {
  // @@protoc_insertion_point(field_list:dg.model.CategoryAndFeature.Items)
  return items_;
}

// -------------------------------------------------------------------

// PeopleAttr

// optional .dg.model.NameAndConfidence Sex = 1;
inline bool PeopleAttr::has_sex() const {
  return !_is_default_instance_ && sex_ != NULL;
}
inline void PeopleAttr::clear_sex() {
  if (GetArenaNoVirtual() == NULL && sex_ != NULL) delete sex_;
  sex_ = NULL;
}
inline const ::dg::model::NameAndConfidence& PeopleAttr::sex() const {
  // @@protoc_insertion_point(field_get:dg.model.PeopleAttr.Sex)
  return sex_ != NULL ? *sex_ : *default_instance_->sex_;
}
inline ::dg::model::NameAndConfidence* PeopleAttr::mutable_sex() {
  
  if (sex_ == NULL) {
    sex_ = new ::dg::model::NameAndConfidence;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.PeopleAttr.Sex)
  return sex_;
}
inline ::dg::model::NameAndConfidence* PeopleAttr::release_sex() {
  // @@protoc_insertion_point(field_release:dg.model.PeopleAttr.Sex)
  
  ::dg::model::NameAndConfidence* temp = sex_;
  sex_ = NULL;
  return temp;
}
inline void PeopleAttr::set_allocated_sex(::dg::model::NameAndConfidence* sex) {
  delete sex_;
  sex_ = sex;
  if (sex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.PeopleAttr.Sex)
}

// optional .dg.model.NameAndConfidence Age = 2;
inline bool PeopleAttr::has_age() const {
  return !_is_default_instance_ && age_ != NULL;
}
inline void PeopleAttr::clear_age() {
  if (GetArenaNoVirtual() == NULL && age_ != NULL) delete age_;
  age_ = NULL;
}
inline const ::dg::model::NameAndConfidence& PeopleAttr::age() const {
  // @@protoc_insertion_point(field_get:dg.model.PeopleAttr.Age)
  return age_ != NULL ? *age_ : *default_instance_->age_;
}
inline ::dg::model::NameAndConfidence* PeopleAttr::mutable_age() {
  
  if (age_ == NULL) {
    age_ = new ::dg::model::NameAndConfidence;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.PeopleAttr.Age)
  return age_;
}
inline ::dg::model::NameAndConfidence* PeopleAttr::release_age() {
  // @@protoc_insertion_point(field_release:dg.model.PeopleAttr.Age)
  
  ::dg::model::NameAndConfidence* temp = age_;
  age_ = NULL;
  return temp;
}
inline void PeopleAttr::set_allocated_age(::dg::model::NameAndConfidence* age) {
  delete age_;
  age_ = age;
  if (age) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.PeopleAttr.Age)
}

// optional .dg.model.NameAndConfidence National = 3;
inline bool PeopleAttr::has_national() const {
  return !_is_default_instance_ && national_ != NULL;
}
inline void PeopleAttr::clear_national() {
  if (GetArenaNoVirtual() == NULL && national_ != NULL) delete national_;
  national_ = NULL;
}
inline const ::dg::model::NameAndConfidence& PeopleAttr::national() const {
  // @@protoc_insertion_point(field_get:dg.model.PeopleAttr.National)
  return national_ != NULL ? *national_ : *default_instance_->national_;
}
inline ::dg::model::NameAndConfidence* PeopleAttr::mutable_national() {
  
  if (national_ == NULL) {
    national_ = new ::dg::model::NameAndConfidence;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.PeopleAttr.National)
  return national_;
}
inline ::dg::model::NameAndConfidence* PeopleAttr::release_national() {
  // @@protoc_insertion_point(field_release:dg.model.PeopleAttr.National)
  
  ::dg::model::NameAndConfidence* temp = national_;
  national_ = NULL;
  return temp;
}
inline void PeopleAttr::set_allocated_national(::dg::model::NameAndConfidence* national) {
  delete national_;
  national_ = national;
  if (national) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.PeopleAttr.National)
}

// repeated .dg.model.CategoryAndFeature Category = 4;
inline int PeopleAttr::category_size() const {
  return category_.size();
}
inline void PeopleAttr::clear_category() {
  category_.Clear();
}
inline const ::dg::model::CategoryAndFeature& PeopleAttr::category(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.PeopleAttr.Category)
  return category_.Get(index);
}
inline ::dg::model::CategoryAndFeature* PeopleAttr::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.PeopleAttr.Category)
  return category_.Mutable(index);
}
inline ::dg::model::CategoryAndFeature* PeopleAttr::add_category() {
  // @@protoc_insertion_point(field_add:dg.model.PeopleAttr.Category)
  return category_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >*
PeopleAttr::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.PeopleAttr.Category)
  return &category_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >&
PeopleAttr::category() const {
  // @@protoc_insertion_point(field_list:dg.model.PeopleAttr.Category)
  return category_;
}

// -------------------------------------------------------------------

// RecVehicle

// optional int64 Id = 1;
inline void RecVehicle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RecVehicle::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Id)
  return id_;
}
inline void RecVehicle::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVehicle.Id)
}

// optional .dg.model.VehicleModelType ModelType = 2;
inline bool RecVehicle::has_modeltype() const {
  return !_is_default_instance_ && modeltype_ != NULL;
}
inline void RecVehicle::clear_modeltype() {
  if (GetArenaNoVirtual() == NULL && modeltype_ != NULL) delete modeltype_;
  modeltype_ = NULL;
}
inline const ::dg::model::VehicleModelType& RecVehicle::modeltype() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.ModelType)
  return modeltype_ != NULL ? *modeltype_ : *default_instance_->modeltype_;
}
inline ::dg::model::VehicleModelType* RecVehicle::mutable_modeltype() {
  
  if (modeltype_ == NULL) {
    modeltype_ = new ::dg::model::VehicleModelType;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.ModelType)
  return modeltype_;
}
inline ::dg::model::VehicleModelType* RecVehicle::release_modeltype() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.ModelType)
  
  ::dg::model::VehicleModelType* temp = modeltype_;
  modeltype_ = NULL;
  return temp;
}
inline void RecVehicle::set_allocated_modeltype(::dg::model::VehicleModelType* modeltype) {
  delete modeltype_;
  modeltype_ = modeltype;
  if (modeltype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.ModelType)
}

// optional .dg.model.Color Color = 3;
inline bool RecVehicle::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
inline void RecVehicle::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
inline const ::dg::model::Color& RecVehicle::color() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::dg::model::Color* RecVehicle::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::dg::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Color)
  return color_;
}
inline ::dg::model::Color* RecVehicle::release_color() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.Color)
  
  ::dg::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void RecVehicle::set_allocated_color(::dg::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.Color)
}

// optional .dg.model.LicensePlate Plate = 4;
inline bool RecVehicle::has_plate() const {
  return !_is_default_instance_ && plate_ != NULL;
}
inline void RecVehicle::clear_plate() {
  if (GetArenaNoVirtual() == NULL && plate_ != NULL) delete plate_;
  plate_ = NULL;
}
inline const ::dg::model::LicensePlate& RecVehicle::plate() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Plate)
  return plate_ != NULL ? *plate_ : *default_instance_->plate_;
}
inline ::dg::model::LicensePlate* RecVehicle::mutable_plate() {
  
  if (plate_ == NULL) {
    plate_ = new ::dg::model::LicensePlate;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Plate)
  return plate_;
}
inline ::dg::model::LicensePlate* RecVehicle::release_plate() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.Plate)
  
  ::dg::model::LicensePlate* temp = plate_;
  plate_ = NULL;
  return temp;
}
inline void RecVehicle::set_allocated_plate(::dg::model::LicensePlate* plate) {
  delete plate_;
  plate_ = plate;
  if (plate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.Plate)
}

// optional .dg.model.CutboardImage Img = 5;
inline bool RecVehicle::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void RecVehicle::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::dg::model::CutboardImage& RecVehicle::img() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::dg::model::CutboardImage* RecVehicle::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Img)
  return img_;
}
inline ::dg::model::CutboardImage* RecVehicle::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.Img)
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void RecVehicle::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.Img)
}

// repeated .dg.model.VehicleSymbol Symbols = 6;
inline int RecVehicle::symbols_size() const {
  return symbols_.size();
}
inline void RecVehicle::clear_symbols() {
  symbols_.Clear();
}
inline const ::dg::model::VehicleSymbol& RecVehicle::symbols(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Symbols)
  return symbols_.Get(index);
}
inline ::dg::model::VehicleSymbol* RecVehicle::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Symbols)
  return symbols_.Mutable(index);
}
inline ::dg::model::VehicleSymbol* RecVehicle::add_symbols() {
  // @@protoc_insertion_point(field_add:dg.model.RecVehicle.Symbols)
  return symbols_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::VehicleSymbol >*
RecVehicle::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecVehicle.Symbols)
  return &symbols_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::VehicleSymbol >&
RecVehicle::symbols() const {
  // @@protoc_insertion_point(field_list:dg.model.RecVehicle.Symbols)
  return symbols_;
}

// optional string Features = 7;
inline void RecVehicle::clear_features() {
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecVehicle::features() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Features)
  return features_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecVehicle::set_features(const ::std::string& value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecVehicle.Features)
}
inline void RecVehicle::set_features(const char* value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecVehicle.Features)
}
inline void RecVehicle::set_features(const char* value, size_t size) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecVehicle.Features)
}
inline ::std::string* RecVehicle::mutable_features() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Features)
  return features_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecVehicle::release_features() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.Features)
  
  return features_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecVehicle::set_allocated_features(::std::string* features) {
  if (features != NULL) {
    
  } else {
    
  }
  features_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), features);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.Features)
}

// optional .dg.model.ObjType VehicleType = 8;
inline void RecVehicle::clear_vehicletype() {
  vehicletype_ = 0;
}
inline ::dg::model::ObjType RecVehicle::vehicletype() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.VehicleType)
  return static_cast< ::dg::model::ObjType >(vehicletype_);
}
inline void RecVehicle::set_vehicletype(::dg::model::ObjType value) {
  
  vehicletype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVehicle.VehicleType)
}

// optional string VehicleTypeName = 9;
inline void RecVehicle::clear_vehicletypename() {
  vehicletypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecVehicle::vehicletypename() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.VehicleTypeName)
  return vehicletypename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecVehicle::set_vehicletypename(const ::std::string& value) {
  
  vehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecVehicle.VehicleTypeName)
}
inline void RecVehicle::set_vehicletypename(const char* value) {
  
  vehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecVehicle.VehicleTypeName)
}
inline void RecVehicle::set_vehicletypename(const char* value, size_t size) {
  
  vehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecVehicle.VehicleTypeName)
}
inline ::std::string* RecVehicle::mutable_vehicletypename() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.VehicleTypeName)
  return vehicletypename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecVehicle::release_vehicletypename() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.VehicleTypeName)
  
  return vehicletypename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecVehicle::set_allocated_vehicletypename(::std::string* vehicletypename) {
  if (vehicletypename != NULL) {
    
  } else {
    
  }
  vehicletypename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicletypename);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.VehicleTypeName)
}

// repeated .dg.model.LicensePlate Plates = 10;
inline int RecVehicle::plates_size() const {
  return plates_.size();
}
inline void RecVehicle::clear_plates() {
  plates_.Clear();
}
inline const ::dg::model::LicensePlate& RecVehicle::plates(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Plates)
  return plates_.Get(index);
}
inline ::dg::model::LicensePlate* RecVehicle::mutable_plates(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Plates)
  return plates_.Mutable(index);
}
inline ::dg::model::LicensePlate* RecVehicle::add_plates() {
  // @@protoc_insertion_point(field_add:dg.model.RecVehicle.Plates)
  return plates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::LicensePlate >*
RecVehicle::mutable_plates() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecVehicle.Plates)
  return &plates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::LicensePlate >&
RecVehicle::plates() const {
  // @@protoc_insertion_point(field_list:dg.model.RecVehicle.Plates)
  return plates_;
}

// repeated .dg.model.Passenger Passengers = 11;
inline int RecVehicle::passengers_size() const {
  return passengers_.size();
}
inline void RecVehicle::clear_passengers() {
  passengers_.Clear();
}
inline const ::dg::model::Passenger& RecVehicle::passengers(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Passengers)
  return passengers_.Get(index);
}
inline ::dg::model::Passenger* RecVehicle::mutable_passengers(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Passengers)
  return passengers_.Mutable(index);
}
inline ::dg::model::Passenger* RecVehicle::add_passengers() {
  // @@protoc_insertion_point(field_add:dg.model.RecVehicle.Passengers)
  return passengers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::Passenger >*
RecVehicle::mutable_passengers() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecVehicle.Passengers)
  return &passengers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::Passenger >&
RecVehicle::passengers() const {
  // @@protoc_insertion_point(field_list:dg.model.RecVehicle.Passengers)
  return passengers_;
}

// -------------------------------------------------------------------

// RecNonMotorVehicle_NonMotorPedestrian

// optional int64 Id = 1;
inline void RecNonMotorVehicle_NonMotorPedestrian::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RecNonMotorVehicle_NonMotorPedestrian::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Id)
  return id_;
}
inline void RecNonMotorVehicle_NonMotorPedestrian::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Id)
}

// optional .dg.model.NameAndConfidence Sex = 2;
inline bool RecNonMotorVehicle_NonMotorPedestrian::has_sex() const {
  return !_is_default_instance_ && sex_ != NULL;
}
inline void RecNonMotorVehicle_NonMotorPedestrian::clear_sex() {
  if (GetArenaNoVirtual() == NULL && sex_ != NULL) delete sex_;
  sex_ = NULL;
}
inline const ::dg::model::NameAndConfidence& RecNonMotorVehicle_NonMotorPedestrian::sex() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Sex)
  return sex_ != NULL ? *sex_ : *default_instance_->sex_;
}
inline ::dg::model::NameAndConfidence* RecNonMotorVehicle_NonMotorPedestrian::mutable_sex() {
  
  if (sex_ == NULL) {
    sex_ = new ::dg::model::NameAndConfidence;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Sex)
  return sex_;
}
inline ::dg::model::NameAndConfidence* RecNonMotorVehicle_NonMotorPedestrian::release_sex() {
  // @@protoc_insertion_point(field_release:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Sex)
  
  ::dg::model::NameAndConfidence* temp = sex_;
  sex_ = NULL;
  return temp;
}
inline void RecNonMotorVehicle_NonMotorPedestrian::set_allocated_sex(::dg::model::NameAndConfidence* sex) {
  delete sex_;
  sex_ = sex;
  if (sex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Sex)
}

// repeated .dg.model.CategoryAndFeature Attribute = 3;
inline int RecNonMotorVehicle_NonMotorPedestrian::attribute_size() const {
  return attribute_.size();
}
inline void RecNonMotorVehicle_NonMotorPedestrian::clear_attribute() {
  attribute_.Clear();
}
inline const ::dg::model::CategoryAndFeature& RecNonMotorVehicle_NonMotorPedestrian::attribute(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Attribute)
  return attribute_.Get(index);
}
inline ::dg::model::CategoryAndFeature* RecNonMotorVehicle_NonMotorPedestrian::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Attribute)
  return attribute_.Mutable(index);
}
inline ::dg::model::CategoryAndFeature* RecNonMotorVehicle_NonMotorPedestrian::add_attribute() {
  // @@protoc_insertion_point(field_add:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Attribute)
  return attribute_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >*
RecNonMotorVehicle_NonMotorPedestrian::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Attribute)
  return &attribute_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >&
RecNonMotorVehicle_NonMotorPedestrian::attribute() const {
  // @@protoc_insertion_point(field_list:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// RecNonMotorVehicle

// optional int64 Id = 1;
inline void RecNonMotorVehicle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RecNonMotorVehicle::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.Id)
  return id_;
}
inline void RecNonMotorVehicle::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecNonMotorVehicle.Id)
}

// optional int64 NMVehicleType = 2;
inline void RecNonMotorVehicle::clear_nmvehicletype() {
  nmvehicletype_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RecNonMotorVehicle::nmvehicletype() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NMVehicleType)
  return nmvehicletype_;
}
inline void RecNonMotorVehicle::set_nmvehicletype(::google::protobuf::int64 value) {
  
  nmvehicletype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecNonMotorVehicle.NMVehicleType)
}

// optional string NMVehicleTypeName = 3;
inline void RecNonMotorVehicle::clear_nmvehicletypename() {
  nmvehicletypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecNonMotorVehicle::nmvehicletypename() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
  return nmvehicletypename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecNonMotorVehicle::set_nmvehicletypename(const ::std::string& value) {
  
  nmvehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
}
inline void RecNonMotorVehicle::set_nmvehicletypename(const char* value) {
  
  nmvehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
}
inline void RecNonMotorVehicle::set_nmvehicletypename(const char* value, size_t size) {
  
  nmvehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
}
inline ::std::string* RecNonMotorVehicle::mutable_nmvehicletypename() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
  return nmvehicletypename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecNonMotorVehicle::release_nmvehicletypename() {
  // @@protoc_insertion_point(field_release:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
  
  return nmvehicletypename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecNonMotorVehicle::set_allocated_nmvehicletypename(::std::string* nmvehicletypename) {
  if (nmvehicletypename != NULL) {
    
  } else {
    
  }
  nmvehicletypename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nmvehicletypename);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
}

// optional .dg.model.CutboardImage Img = 4;
inline bool RecNonMotorVehicle::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void RecNonMotorVehicle::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::dg::model::CutboardImage& RecNonMotorVehicle::img() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::dg::model::CutboardImage* RecNonMotorVehicle::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.Img)
  return img_;
}
inline ::dg::model::CutboardImage* RecNonMotorVehicle::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.RecNonMotorVehicle.Img)
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void RecNonMotorVehicle::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecNonMotorVehicle.Img)
}

// optional .dg.model.NonMotorVehicleGesture NMVehicleGesture = 5;
inline void RecNonMotorVehicle::clear_nmvehiclegesture() {
  nmvehiclegesture_ = 0;
}
inline ::dg::model::NonMotorVehicleGesture RecNonMotorVehicle::nmvehiclegesture() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NMVehicleGesture)
  return static_cast< ::dg::model::NonMotorVehicleGesture >(nmvehiclegesture_);
}
inline void RecNonMotorVehicle::set_nmvehiclegesture(::dg::model::NonMotorVehicleGesture value) {
  
  nmvehiclegesture_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecNonMotorVehicle.NMVehicleGesture)
}

// repeated .dg.model.RecNonMotorVehicle.NonMotorPedestrian Passenger = 6;
inline int RecNonMotorVehicle::passenger_size() const {
  return passenger_.size();
}
inline void RecNonMotorVehicle::clear_passenger() {
  passenger_.Clear();
}
inline const ::dg::model::RecNonMotorVehicle_NonMotorPedestrian& RecNonMotorVehicle::passenger(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.Passenger)
  return passenger_.Get(index);
}
inline ::dg::model::RecNonMotorVehicle_NonMotorPedestrian* RecNonMotorVehicle::mutable_passenger(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.Passenger)
  return passenger_.Mutable(index);
}
inline ::dg::model::RecNonMotorVehicle_NonMotorPedestrian* RecNonMotorVehicle::add_passenger() {
  // @@protoc_insertion_point(field_add:dg.model.RecNonMotorVehicle.Passenger)
  return passenger_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle_NonMotorPedestrian >*
RecNonMotorVehicle::mutable_passenger() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecNonMotorVehicle.Passenger)
  return &passenger_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle_NonMotorPedestrian >&
RecNonMotorVehicle::passenger() const {
  // @@protoc_insertion_point(field_list:dg.model.RecNonMotorVehicle.Passenger)
  return passenger_;
}

// repeated .dg.model.CategoryAndFeature NMVehicle = 7;
inline int RecNonMotorVehicle::nmvehicle_size() const {
  return nmvehicle_.size();
}
inline void RecNonMotorVehicle::clear_nmvehicle() {
  nmvehicle_.Clear();
}
inline const ::dg::model::CategoryAndFeature& RecNonMotorVehicle::nmvehicle(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NMVehicle)
  return nmvehicle_.Get(index);
}
inline ::dg::model::CategoryAndFeature* RecNonMotorVehicle::mutable_nmvehicle(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.NMVehicle)
  return nmvehicle_.Mutable(index);
}
inline ::dg::model::CategoryAndFeature* RecNonMotorVehicle::add_nmvehicle() {
  // @@protoc_insertion_point(field_add:dg.model.RecNonMotorVehicle.NMVehicle)
  return nmvehicle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >*
RecNonMotorVehicle::mutable_nmvehicle() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecNonMotorVehicle.NMVehicle)
  return &nmvehicle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >&
RecNonMotorVehicle::nmvehicle() const {
  // @@protoc_insertion_point(field_list:dg.model.RecNonMotorVehicle.NMVehicle)
  return nmvehicle_;
}

// -------------------------------------------------------------------

// Passenger

// optional int64 Id = 1;
inline void Passenger::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Passenger::id() const {
  // @@protoc_insertion_point(field_get:dg.model.Passenger.Id)
  return id_;
}
inline void Passenger::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Passenger.Id)
}

// optional .dg.model.PeopleAttr PassengerAttr = 2;
inline bool Passenger::has_passengerattr() const {
  return !_is_default_instance_ && passengerattr_ != NULL;
}
inline void Passenger::clear_passengerattr() {
  if (GetArenaNoVirtual() == NULL && passengerattr_ != NULL) delete passengerattr_;
  passengerattr_ = NULL;
}
inline const ::dg::model::PeopleAttr& Passenger::passengerattr() const {
  // @@protoc_insertion_point(field_get:dg.model.Passenger.PassengerAttr)
  return passengerattr_ != NULL ? *passengerattr_ : *default_instance_->passengerattr_;
}
inline ::dg::model::PeopleAttr* Passenger::mutable_passengerattr() {
  
  if (passengerattr_ == NULL) {
    passengerattr_ = new ::dg::model::PeopleAttr;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.Passenger.PassengerAttr)
  return passengerattr_;
}
inline ::dg::model::PeopleAttr* Passenger::release_passengerattr() {
  // @@protoc_insertion_point(field_release:dg.model.Passenger.PassengerAttr)
  
  ::dg::model::PeopleAttr* temp = passengerattr_;
  passengerattr_ = NULL;
  return temp;
}
inline void Passenger::set_allocated_passengerattr(::dg::model::PeopleAttr* passengerattr) {
  delete passengerattr_;
  passengerattr_ = passengerattr;
  if (passengerattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.Passenger.PassengerAttr)
}

// optional .dg.model.RecFace Face = 3;
inline bool Passenger::has_face() const {
  return !_is_default_instance_ && face_ != NULL;
}
inline void Passenger::clear_face() {
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
}
inline const ::dg::model::RecFace& Passenger::face() const {
  // @@protoc_insertion_point(field_get:dg.model.Passenger.Face)
  return face_ != NULL ? *face_ : *default_instance_->face_;
}
inline ::dg::model::RecFace* Passenger::mutable_face() {
  
  if (face_ == NULL) {
    face_ = new ::dg::model::RecFace;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.Passenger.Face)
  return face_;
}
inline ::dg::model::RecFace* Passenger::release_face() {
  // @@protoc_insertion_point(field_release:dg.model.Passenger.Face)
  
  ::dg::model::RecFace* temp = face_;
  face_ = NULL;
  return temp;
}
inline void Passenger::set_allocated_face(::dg::model::RecFace* face) {
  delete face_;
  face_ = face;
  if (face) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.Passenger.Face)
}

// optional bool Driver = 4;
inline void Passenger::clear_driver() {
  driver_ = false;
}
inline bool Passenger::driver() const {
  // @@protoc_insertion_point(field_get:dg.model.Passenger.Driver)
  return driver_;
}
inline void Passenger::set_driver(bool value) {
  
  driver_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Passenger.Driver)
}

// optional .dg.model.CutboardImage Img = 5;
inline bool Passenger::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void Passenger::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::dg::model::CutboardImage& Passenger::img() const {
  // @@protoc_insertion_point(field_get:dg.model.Passenger.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::dg::model::CutboardImage* Passenger::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.Passenger.Img)
  return img_;
}
inline ::dg::model::CutboardImage* Passenger::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.Passenger.Img)
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void Passenger::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.Passenger.Img)
}

// -------------------------------------------------------------------

// RecPedestrian

// optional int64 Id = 1;
inline void RecPedestrian::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RecPedestrian::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecPedestrian.Id)
  return id_;
}
inline void RecPedestrian::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecPedestrian.Id)
}

// optional .dg.model.CutboardImage Img = 2;
inline bool RecPedestrian::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void RecPedestrian::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::dg::model::CutboardImage& RecPedestrian::img() const {
  // @@protoc_insertion_point(field_get:dg.model.RecPedestrian.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::dg::model::CutboardImage* RecPedestrian::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecPedestrian.Img)
  return img_;
}
inline ::dg::model::CutboardImage* RecPedestrian::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.RecPedestrian.Img)
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void RecPedestrian::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecPedestrian.Img)
}

// optional float Confidence = 3;
inline void RecPedestrian::clear_confidence() {
  confidence_ = 0;
}
inline float RecPedestrian::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.RecPedestrian.Confidence)
  return confidence_;
}
inline void RecPedestrian::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecPedestrian.Confidence)
}

// optional .dg.model.PeopleAttr PedesAttr = 4;
inline bool RecPedestrian::has_pedesattr() const {
  return !_is_default_instance_ && pedesattr_ != NULL;
}
inline void RecPedestrian::clear_pedesattr() {
  if (GetArenaNoVirtual() == NULL && pedesattr_ != NULL) delete pedesattr_;
  pedesattr_ = NULL;
}
inline const ::dg::model::PeopleAttr& RecPedestrian::pedesattr() const {
  // @@protoc_insertion_point(field_get:dg.model.RecPedestrian.PedesAttr)
  return pedesattr_ != NULL ? *pedesattr_ : *default_instance_->pedesattr_;
}
inline ::dg::model::PeopleAttr* RecPedestrian::mutable_pedesattr() {
  
  if (pedesattr_ == NULL) {
    pedesattr_ = new ::dg::model::PeopleAttr;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecPedestrian.PedesAttr)
  return pedesattr_;
}
inline ::dg::model::PeopleAttr* RecPedestrian::release_pedesattr() {
  // @@protoc_insertion_point(field_release:dg.model.RecPedestrian.PedesAttr)
  
  ::dg::model::PeopleAttr* temp = pedesattr_;
  pedesattr_ = NULL;
  return temp;
}
inline void RecPedestrian::set_allocated_pedesattr(::dg::model::PeopleAttr* pedesattr) {
  delete pedesattr_;
  pedesattr_ = pedesattr;
  if (pedesattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecPedestrian.PedesAttr)
}

// optional .dg.model.RecFace Face = 5;
inline bool RecPedestrian::has_face() const {
  return !_is_default_instance_ && face_ != NULL;
}
inline void RecPedestrian::clear_face() {
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
}
inline const ::dg::model::RecFace& RecPedestrian::face() const {
  // @@protoc_insertion_point(field_get:dg.model.RecPedestrian.Face)
  return face_ != NULL ? *face_ : *default_instance_->face_;
}
inline ::dg::model::RecFace* RecPedestrian::mutable_face() {
  
  if (face_ == NULL) {
    face_ = new ::dg::model::RecFace;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecPedestrian.Face)
  return face_;
}
inline ::dg::model::RecFace* RecPedestrian::release_face() {
  // @@protoc_insertion_point(field_release:dg.model.RecPedestrian.Face)
  
  ::dg::model::RecFace* temp = face_;
  face_ = NULL;
  return temp;
}
inline void RecPedestrian::set_allocated_face(::dg::model::RecFace* face) {
  delete face_;
  face_ = face;
  if (face) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecPedestrian.Face)
}

// -------------------------------------------------------------------

// VehicleModelType

// optional int64 Id = 1;
inline void VehicleModelType::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VehicleModelType::id() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.Id)
  return id_;
}
inline void VehicleModelType::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.Id)
}

// optional int32 BrandId = 2;
inline void VehicleModelType::clear_brandid() {
  brandid_ = 0;
}
inline ::google::protobuf::int32 VehicleModelType::brandid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.BrandId)
  return brandid_;
}
inline void VehicleModelType::set_brandid(::google::protobuf::int32 value) {
  
  brandid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.BrandId)
}

// optional int32 SubBrandId = 3;
inline void VehicleModelType::clear_subbrandid() {
  subbrandid_ = 0;
}
inline ::google::protobuf::int32 VehicleModelType::subbrandid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.SubBrandId)
  return subbrandid_;
}
inline void VehicleModelType::set_subbrandid(::google::protobuf::int32 value) {
  
  subbrandid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.SubBrandId)
}

// optional int32 ModelYearId = 4;
inline void VehicleModelType::clear_modelyearid() {
  modelyearid_ = 0;
}
inline ::google::protobuf::int32 VehicleModelType::modelyearid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.ModelYearId)
  return modelyearid_;
}
inline void VehicleModelType::set_modelyearid(::google::protobuf::int32 value) {
  
  modelyearid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.ModelYearId)
}

// optional float Confidence = 5;
inline void VehicleModelType::clear_confidence() {
  confidence_ = 0;
}
inline float VehicleModelType::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.Confidence)
  return confidence_;
}
inline void VehicleModelType::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.Confidence)
}

// optional string Type = 6;
inline void VehicleModelType::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleModelType::type() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.Type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.Type)
}
inline void VehicleModelType::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModelType.Type)
}
inline void VehicleModelType::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModelType.Type)
}
inline ::std::string* VehicleModelType::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModelType.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleModelType::release_type() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleModelType.Type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModelType.Type)
}

// optional string Brand = 7;
inline void VehicleModelType::clear_brand() {
  brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleModelType::brand() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.Brand)
  return brand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_brand(const ::std::string& value) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.Brand)
}
inline void VehicleModelType::set_brand(const char* value) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModelType.Brand)
}
inline void VehicleModelType::set_brand(const char* value, size_t size) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModelType.Brand)
}
inline ::std::string* VehicleModelType::mutable_brand() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModelType.Brand)
  return brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleModelType::release_brand() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleModelType.Brand)
  
  return brand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    
  } else {
    
  }
  brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModelType.Brand)
}

// optional string SubBrand = 8;
inline void VehicleModelType::clear_subbrand() {
  subbrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleModelType::subbrand() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.SubBrand)
  return subbrand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_subbrand(const ::std::string& value) {
  
  subbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.SubBrand)
}
inline void VehicleModelType::set_subbrand(const char* value) {
  
  subbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModelType.SubBrand)
}
inline void VehicleModelType::set_subbrand(const char* value, size_t size) {
  
  subbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModelType.SubBrand)
}
inline ::std::string* VehicleModelType::mutable_subbrand() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModelType.SubBrand)
  return subbrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleModelType::release_subbrand() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleModelType.SubBrand)
  
  return subbrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_allocated_subbrand(::std::string* subbrand) {
  if (subbrand != NULL) {
    
  } else {
    
  }
  subbrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subbrand);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModelType.SubBrand)
}

// optional string ModelYear = 9;
inline void VehicleModelType::clear_modelyear() {
  modelyear_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleModelType::modelyear() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.ModelYear)
  return modelyear_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_modelyear(const ::std::string& value) {
  
  modelyear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.ModelYear)
}
inline void VehicleModelType::set_modelyear(const char* value) {
  
  modelyear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModelType.ModelYear)
}
inline void VehicleModelType::set_modelyear(const char* value, size_t size) {
  
  modelyear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModelType.ModelYear)
}
inline ::std::string* VehicleModelType::mutable_modelyear() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModelType.ModelYear)
  return modelyear_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleModelType::release_modelyear() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleModelType.ModelYear)
  
  return modelyear_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_allocated_modelyear(::std::string* modelyear) {
  if (modelyear != NULL) {
    
  } else {
    
  }
  modelyear_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelyear);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModelType.ModelYear)
}

// optional int32 TypeId = 10;
inline void VehicleModelType::clear_typeid_() {
  typeid__ = 0;
}
inline ::google::protobuf::int32 VehicleModelType::typeid_() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.TypeId)
  return typeid__;
}
inline void VehicleModelType::set_typeid_(::google::protobuf::int32 value) {
  
  typeid__ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.TypeId)
}

// optional string Model = 11;
inline void VehicleModelType::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleModelType::model() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.Model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.Model)
}
inline void VehicleModelType::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModelType.Model)
}
inline void VehicleModelType::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModelType.Model)
}
inline ::std::string* VehicleModelType::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModelType.Model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleModelType::release_model() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleModelType.Model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModelType.Model)
}

// optional int32 IsHead = 12;
inline void VehicleModelType::clear_ishead() {
  ishead_ = 0;
}
inline ::google::protobuf::int32 VehicleModelType::ishead() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.IsHead)
  return ishead_;
}
inline void VehicleModelType::set_ishead(::google::protobuf::int32 value) {
  
  ishead_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.IsHead)
}

// -------------------------------------------------------------------

// LicensePlate

// optional string PlateText = 1;
inline void LicensePlate::clear_platetext() {
  platetext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicensePlate::platetext() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.PlateText)
  return platetext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicensePlate::set_platetext(const ::std::string& value) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.PlateText)
}
inline void LicensePlate::set_platetext(const char* value) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.LicensePlate.PlateText)
}
inline void LicensePlate::set_platetext(const char* value, size_t size) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.LicensePlate.PlateText)
}
inline ::std::string* LicensePlate::mutable_platetext() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.PlateText)
  return platetext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicensePlate::release_platetext() {
  // @@protoc_insertion_point(field_release:dg.model.LicensePlate.PlateText)
  
  return platetext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicensePlate::set_allocated_platetext(::std::string* platetext) {
  if (platetext != NULL) {
    
  } else {
    
  }
  platetext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platetext);
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.PlateText)
}

// optional .dg.model.Color Color = 2;
inline bool LicensePlate::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
inline void LicensePlate::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
inline const ::dg::model::Color& LicensePlate::color() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::dg::model::Color* LicensePlate::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::dg::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.Color)
  return color_;
}
inline ::dg::model::Color* LicensePlate::release_color() {
  // @@protoc_insertion_point(field_release:dg.model.LicensePlate.Color)
  
  ::dg::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void LicensePlate::set_allocated_color(::dg::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.Color)
}

// optional int32 TypeId = 3;
inline void LicensePlate::clear_typeid_() {
  typeid__ = 0;
}
inline ::google::protobuf::int32 LicensePlate::typeid_() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.TypeId)
  return typeid__;
}
inline void LicensePlate::set_typeid_(::google::protobuf::int32 value) {
  
  typeid__ = value;
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.TypeId)
}

// optional string TypeName = 4;
inline void LicensePlate::clear_typename_() {
  typename__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicensePlate::typename_() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.TypeName)
  return typename__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicensePlate::set_typename_(const ::std::string& value) {
  
  typename__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.TypeName)
}
inline void LicensePlate::set_typename_(const char* value) {
  
  typename__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.LicensePlate.TypeName)
}
inline void LicensePlate::set_typename_(const char* value, size_t size) {
  
  typename__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.LicensePlate.TypeName)
}
inline ::std::string* LicensePlate::mutable_typename_() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.TypeName)
  return typename__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicensePlate::release_typename_() {
  // @@protoc_insertion_point(field_release:dg.model.LicensePlate.TypeName)
  
  return typename__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicensePlate::set_allocated_typename_(::std::string* typename_) {
  if (typename_ != NULL) {
    
  } else {
    
  }
  typename__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), typename_);
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.TypeName)
}

// optional float Confidence = 5;
inline void LicensePlate::clear_confidence() {
  confidence_ = 0;
}
inline float LicensePlate::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.Confidence)
  return confidence_;
}
inline void LicensePlate::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.Confidence)
}

// optional .dg.model.Cutboard Cutboard = 6;
inline bool LicensePlate::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
inline void LicensePlate::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
inline const ::dg::model::Cutboard& LicensePlate::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
inline ::dg::model::Cutboard* LicensePlate::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.Cutboard)
  return cutboard_;
}
inline ::dg::model::Cutboard* LicensePlate::release_cutboard() {
  // @@protoc_insertion_point(field_release:dg.model.LicensePlate.Cutboard)
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
inline void LicensePlate::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.Cutboard)
}

// optional float LocalProvinceConfidence = 7;
inline void LicensePlate::clear_localprovinceconfidence() {
  localprovinceconfidence_ = 0;
}
inline float LicensePlate::localprovinceconfidence() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.LocalProvinceConfidence)
  return localprovinceconfidence_;
}
inline void LicensePlate::set_localprovinceconfidence(float value) {
  
  localprovinceconfidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.LocalProvinceConfidence)
}

// -------------------------------------------------------------------

// VehicleSymbol

// optional int32 SymbolId = 1;
inline void VehicleSymbol::clear_symbolid() {
  symbolid_ = 0;
}
inline ::google::protobuf::int32 VehicleSymbol::symbolid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleSymbol.SymbolId)
  return symbolid_;
}
inline void VehicleSymbol::set_symbolid(::google::protobuf::int32 value) {
  
  symbolid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleSymbol.SymbolId)
}

// optional string SymbolName = 2;
inline void VehicleSymbol::clear_symbolname() {
  symbolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleSymbol::symbolname() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleSymbol.SymbolName)
  return symbolname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleSymbol::set_symbolname(const ::std::string& value) {
  
  symbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleSymbol.SymbolName)
}
inline void VehicleSymbol::set_symbolname(const char* value) {
  
  symbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleSymbol.SymbolName)
}
inline void VehicleSymbol::set_symbolname(const char* value, size_t size) {
  
  symbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleSymbol.SymbolName)
}
inline ::std::string* VehicleSymbol::mutable_symbolname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleSymbol.SymbolName)
  return symbolname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleSymbol::release_symbolname() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleSymbol.SymbolName)
  
  return symbolname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleSymbol::set_allocated_symbolname(::std::string* symbolname) {
  if (symbolname != NULL) {
    
  } else {
    
  }
  symbolname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbolname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleSymbol.SymbolName)
}

// repeated .dg.model.Symbol Symbols = 3;
inline int VehicleSymbol::symbols_size() const {
  return symbols_.size();
}
inline void VehicleSymbol::clear_symbols() {
  symbols_.Clear();
}
inline const ::dg::model::Symbol& VehicleSymbol::symbols(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleSymbol.Symbols)
  return symbols_.Get(index);
}
inline ::dg::model::Symbol* VehicleSymbol::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleSymbol.Symbols)
  return symbols_.Mutable(index);
}
inline ::dg::model::Symbol* VehicleSymbol::add_symbols() {
  // @@protoc_insertion_point(field_add:dg.model.VehicleSymbol.Symbols)
  return symbols_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::Symbol >*
VehicleSymbol::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.VehicleSymbol.Symbols)
  return &symbols_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::Symbol >&
VehicleSymbol::symbols() const {
  // @@protoc_insertion_point(field_list:dg.model.VehicleSymbol.Symbols)
  return symbols_;
}

// -------------------------------------------------------------------

// Symbol

// optional .dg.model.Cutboard Cutboard = 1;
inline bool Symbol::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
inline void Symbol::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
inline const ::dg::model::Cutboard& Symbol::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.Symbol.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
inline ::dg::model::Cutboard* Symbol::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.Symbol.Cutboard)
  return cutboard_;
}
inline ::dg::model::Cutboard* Symbol::release_cutboard() {
  // @@protoc_insertion_point(field_release:dg.model.Symbol.Cutboard)
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
inline void Symbol::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.Symbol.Cutboard)
}

// optional float Confidence = 2;
inline void Symbol::clear_confidence() {
  confidence_ = 0;
}
inline float Symbol::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Symbol.Confidence)
  return confidence_;
}
inline void Symbol::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Symbol.Confidence)
}

// -------------------------------------------------------------------

// StorageConfig

// optional string Address = 1;
inline void StorageConfig::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageConfig::address() const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageConfig::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Address)
}
inline void StorageConfig::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.StorageConfig.Address)
}
inline void StorageConfig::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.StorageConfig.Address)
}
inline ::std::string* StorageConfig::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.StorageConfig.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageConfig::release_address() {
  // @@protoc_insertion_point(field_release:dg.model.StorageConfig.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageConfig::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:dg.model.StorageConfig.Address)
}

// optional .dg.model.DBType Type = 2;
inline void StorageConfig::clear_type() {
  type_ = 0;
}
inline ::dg::model::DBType StorageConfig::type() const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Type)
  return static_cast< ::dg::model::DBType >(type_);
}
inline void StorageConfig::set_type(::dg::model::DBType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Type)
}

// repeated string Tags = 3;
inline int StorageConfig::tags_size() const {
  return tags_.size();
}
inline void StorageConfig::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& StorageConfig::tags(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Tags)
  return tags_.Get(index);
}
inline ::std::string* StorageConfig::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.StorageConfig.Tags)
  return tags_.Mutable(index);
}
inline void StorageConfig::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Tags)
  tags_.Mutable(index)->assign(value);
}
inline void StorageConfig::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dg.model.StorageConfig.Tags)
}
inline void StorageConfig::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dg.model.StorageConfig.Tags)
}
inline ::std::string* StorageConfig::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:dg.model.StorageConfig.Tags)
  return tags_.Add();
}
inline void StorageConfig::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dg.model.StorageConfig.Tags)
}
inline void StorageConfig::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dg.model.StorageConfig.Tags)
}
inline void StorageConfig::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dg.model.StorageConfig.Tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StorageConfig::tags() const {
  // @@protoc_insertion_point(field_list:dg.model.StorageConfig.Tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StorageConfig::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.StorageConfig.Tags)
  return &tags_;
}

// -------------------------------------------------------------------

// VehicleObj

// optional .dg.model.SrcMetadata Metadata = 1;
inline bool VehicleObj::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void VehicleObj::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::dg::model::SrcMetadata& VehicleObj::metadata() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleObj.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::dg::model::SrcMetadata* VehicleObj::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::dg::model::SrcMetadata;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleObj.Metadata)
  return metadata_;
}
inline ::dg::model::SrcMetadata* VehicleObj::release_metadata() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleObj.Metadata)
  
  ::dg::model::SrcMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void VehicleObj::set_allocated_metadata(::dg::model::SrcMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleObj.Metadata)
}

// optional .dg.model.Image Img = 2;
inline bool VehicleObj::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void VehicleObj::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::dg::model::Image& VehicleObj::img() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleObj.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::dg::model::Image* VehicleObj::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleObj.Img)
  return img_;
}
inline ::dg::model::Image* VehicleObj::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleObj.Img)
  
  ::dg::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
inline void VehicleObj::set_allocated_img(::dg::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleObj.Img)
}

// repeated .dg.model.RecVehicle Vehicle = 3;
inline int VehicleObj::vehicle_size() const {
  return vehicle_.size();
}
inline void VehicleObj::clear_vehicle() {
  vehicle_.Clear();
}
inline const ::dg::model::RecVehicle& VehicleObj::vehicle(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleObj.Vehicle)
  return vehicle_.Get(index);
}
inline ::dg::model::RecVehicle* VehicleObj::mutable_vehicle(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleObj.Vehicle)
  return vehicle_.Mutable(index);
}
inline ::dg::model::RecVehicle* VehicleObj::add_vehicle() {
  // @@protoc_insertion_point(field_add:dg.model.VehicleObj.Vehicle)
  return vehicle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >*
VehicleObj::mutable_vehicle() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.VehicleObj.Vehicle)
  return &vehicle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >&
VehicleObj::vehicle() const {
  // @@protoc_insertion_point(field_list:dg.model.VehicleObj.Vehicle)
  return vehicle_;
}

// -------------------------------------------------------------------

// PedestrianObj

// optional .dg.model.SrcMetadata Metadata = 1;
inline bool PedestrianObj::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void PedestrianObj::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::dg::model::SrcMetadata& PedestrianObj::metadata() const {
  // @@protoc_insertion_point(field_get:dg.model.PedestrianObj.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::dg::model::SrcMetadata* PedestrianObj::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::dg::model::SrcMetadata;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.PedestrianObj.Metadata)
  return metadata_;
}
inline ::dg::model::SrcMetadata* PedestrianObj::release_metadata() {
  // @@protoc_insertion_point(field_release:dg.model.PedestrianObj.Metadata)
  
  ::dg::model::SrcMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void PedestrianObj::set_allocated_metadata(::dg::model::SrcMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.PedestrianObj.Metadata)
}

// optional .dg.model.Image Img = 2;
inline bool PedestrianObj::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void PedestrianObj::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::dg::model::Image& PedestrianObj::img() const {
  // @@protoc_insertion_point(field_get:dg.model.PedestrianObj.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::dg::model::Image* PedestrianObj::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.PedestrianObj.Img)
  return img_;
}
inline ::dg::model::Image* PedestrianObj::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.PedestrianObj.Img)
  
  ::dg::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
inline void PedestrianObj::set_allocated_img(::dg::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.PedestrianObj.Img)
}

// repeated .dg.model.RecPedestrian Pedestrian = 3;
inline int PedestrianObj::pedestrian_size() const {
  return pedestrian_.size();
}
inline void PedestrianObj::clear_pedestrian() {
  pedestrian_.Clear();
}
inline const ::dg::model::RecPedestrian& PedestrianObj::pedestrian(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.PedestrianObj.Pedestrian)
  return pedestrian_.Get(index);
}
inline ::dg::model::RecPedestrian* PedestrianObj::mutable_pedestrian(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.PedestrianObj.Pedestrian)
  return pedestrian_.Mutable(index);
}
inline ::dg::model::RecPedestrian* PedestrianObj::add_pedestrian() {
  // @@protoc_insertion_point(field_add:dg.model.PedestrianObj.Pedestrian)
  return pedestrian_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >*
PedestrianObj::mutable_pedestrian() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.PedestrianObj.Pedestrian)
  return &pedestrian_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >&
PedestrianObj::pedestrian() const {
  // @@protoc_insertion_point(field_list:dg.model.PedestrianObj.Pedestrian)
  return pedestrian_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace dg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dg::model::ObjType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::ObjType>() {
  return ::dg::model::ObjType_descriptor();
}
template <> struct is_proto_enum< ::dg::model::DataFmtType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::DataFmtType>() {
  return ::dg::model::DataFmtType_descriptor();
}
template <> struct is_proto_enum< ::dg::model::SexType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::SexType>() {
  return ::dg::model::SexType_descriptor();
}
template <> struct is_proto_enum< ::dg::model::NationalType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::NationalType>() {
  return ::dg::model::NationalType_descriptor();
}
template <> struct is_proto_enum< ::dg::model::AgeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::AgeType>() {
  return ::dg::model::AgeType_descriptor();
}
template <> struct is_proto_enum< ::dg::model::NonMotorVehicleGesture> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::NonMotorVehicleGesture>() {
  return ::dg::model::NonMotorVehicleGesture_descriptor();
}
template <> struct is_proto_enum< ::dg::model::DBType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::DBType>() {
  return ::dg::model::DBType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
