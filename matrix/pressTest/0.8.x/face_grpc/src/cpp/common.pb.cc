// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dg {
namespace model {

namespace {

const ::google::protobuf::Descriptor* SrcMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrcMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cutboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cutboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CutboardImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CutboardImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* NullMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NullMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceAttribute_reflection_ = NULL;
struct FaceAttributeOneofInstance {
  bool valuebool_;
  ::google::protobuf::int32 valueint_;
  float valuefloat_;
  ::google::protobuf::internal::ArenaStringPtr valuestring_;
}* FaceAttribute_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecFace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecFace_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecFace_AlignScoresEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RecFace_QualitiesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NameAndConfidence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameAndConfidence_reflection_ = NULL;
const ::google::protobuf::Descriptor* CategoryAndFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CategoryAndFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeopleAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeopleAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecVehicle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecVehicle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecNonMotorVehicle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecNonMotorVehicle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecNonMotorVehicle_NonMotorPedestrian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecNonMotorVehicle_NonMotorPedestrian_reflection_ = NULL;
const ::google::protobuf::Descriptor* Passenger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Passenger_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecPedestrian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecPedestrian_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleModelType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleModelType_reflection_ = NULL;
const ::google::protobuf::Descriptor* LicensePlate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LicensePlate_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleSymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleSymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* Symbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Symbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* PedestrianObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PedestrianObj_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataFmtType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SexType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NationalType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AgeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NonMotorVehicleGesture_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DBType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  SrcMetadata_descriptor_ = file->message_type(0);
  static const int SrcMetadata_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, sensorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, sensorurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, repoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, repoinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, sensoridstr_),
  };
  SrcMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SrcMetadata_descriptor_,
      SrcMetadata::default_instance_,
      SrcMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(SrcMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, _is_default_instance_));
  Cutboard_descriptor_ = file->message_type(1);
  static const int Cutboard_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, reswidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, resheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, confidence_),
  };
  Cutboard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cutboard_descriptor_,
      Cutboard::default_instance_,
      Cutboard_offsets_,
      -1,
      -1,
      -1,
      sizeof(Cutboard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, _is_default_instance_));
  CutboardImage_descriptor_ = file->message_type(2);
  static const int CutboardImage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, cutboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, img_),
  };
  CutboardImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CutboardImage_descriptor_,
      CutboardImage::default_instance_,
      CutboardImage_offsets_,
      -1,
      -1,
      -1,
      sizeof(CutboardImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, _is_default_instance_));
  Color_descriptor_ = file->message_type(3);
  static const int Color_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, colorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, colorname_),
  };
  Color_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      -1,
      -1,
      -1,
      sizeof(Color),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _is_default_instance_));
  FeatureVector_descriptor_ = file->message_type(4);
  static const int FeatureVector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, feature_),
  };
  FeatureVector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureVector_descriptor_,
      FeatureVector::default_instance_,
      FeatureVector_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeatureVector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, _is_default_instance_));
  NullMessage_descriptor_ = file->message_type(5);
  static const int NullMessage_offsets_[1] = {
  };
  NullMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NullMessage_descriptor_,
      NullMessage::default_instance_,
      NullMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(NullMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullMessage, _is_default_instance_));
  FaceAttribute_descriptor_ = file->message_type(6);
  static const int FaceAttribute_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FaceAttribute_default_oneof_instance_, valuebool_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FaceAttribute_default_oneof_instance_, valueint_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FaceAttribute_default_oneof_instance_, valuefloat_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FaceAttribute_default_oneof_instance_, valuestring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, Value_),
  };
  FaceAttribute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceAttribute_descriptor_,
      FaceAttribute::default_instance_,
      FaceAttribute_offsets_,
      -1,
      -1,
      -1,
      FaceAttribute_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, _oneof_case_[0]),
      sizeof(FaceAttribute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, _is_default_instance_));
  Image_descriptor_ = file->message_type(7);
  static const int Image_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, bindata_),
  };
  Image_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      -1,
      -1,
      -1,
      sizeof(Image),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _is_default_instance_));
  RecFace_descriptor_ = file->message_type(8);
  static const int RecFace_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, alignscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, qualities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, detectresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, alignresult_),
  };
  RecFace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecFace_descriptor_,
      RecFace::default_instance_,
      RecFace_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecFace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, _is_default_instance_));
  RecFace_AlignScoresEntry_descriptor_ = RecFace_descriptor_->nested_type(0);
  RecFace_QualitiesEntry_descriptor_ = RecFace_descriptor_->nested_type(1);
  NameAndConfidence_descriptor_ = file->message_type(9);
  static const int NameAndConfidence_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameAndConfidence, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameAndConfidence, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameAndConfidence, confidence_),
  };
  NameAndConfidence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NameAndConfidence_descriptor_,
      NameAndConfidence::default_instance_,
      NameAndConfidence_offsets_,
      -1,
      -1,
      -1,
      sizeof(NameAndConfidence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameAndConfidence, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameAndConfidence, _is_default_instance_));
  CategoryAndFeature_descriptor_ = file->message_type(10);
  static const int CategoryAndFeature_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryAndFeature, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryAndFeature, categoryname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryAndFeature, items_),
  };
  CategoryAndFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CategoryAndFeature_descriptor_,
      CategoryAndFeature::default_instance_,
      CategoryAndFeature_offsets_,
      -1,
      -1,
      -1,
      sizeof(CategoryAndFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryAndFeature, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryAndFeature, _is_default_instance_));
  PeopleAttr_descriptor_ = file->message_type(11);
  static const int PeopleAttr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeopleAttr, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeopleAttr, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeopleAttr, national_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeopleAttr, category_),
  };
  PeopleAttr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeopleAttr_descriptor_,
      PeopleAttr::default_instance_,
      PeopleAttr_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeopleAttr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeopleAttr, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeopleAttr, _is_default_instance_));
  RecVehicle_descriptor_ = file->message_type(12);
  static const int RecVehicle_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, modeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, plate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, symbols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, vehicletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, vehicletypename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, plates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, passengers_),
  };
  RecVehicle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecVehicle_descriptor_,
      RecVehicle::default_instance_,
      RecVehicle_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecVehicle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecVehicle, _is_default_instance_));
  RecNonMotorVehicle_descriptor_ = file->message_type(13);
  static const int RecNonMotorVehicle_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle, nmvehicletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle, nmvehicletypename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle, nmvehiclegesture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle, passenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle, nmvehicle_),
  };
  RecNonMotorVehicle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecNonMotorVehicle_descriptor_,
      RecNonMotorVehicle::default_instance_,
      RecNonMotorVehicle_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecNonMotorVehicle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle, _is_default_instance_));
  RecNonMotorVehicle_NonMotorPedestrian_descriptor_ = RecNonMotorVehicle_descriptor_->nested_type(0);
  static const int RecNonMotorVehicle_NonMotorPedestrian_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle_NonMotorPedestrian, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle_NonMotorPedestrian, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle_NonMotorPedestrian, attribute_),
  };
  RecNonMotorVehicle_NonMotorPedestrian_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecNonMotorVehicle_NonMotorPedestrian_descriptor_,
      RecNonMotorVehicle_NonMotorPedestrian::default_instance_,
      RecNonMotorVehicle_NonMotorPedestrian_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecNonMotorVehicle_NonMotorPedestrian),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle_NonMotorPedestrian, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecNonMotorVehicle_NonMotorPedestrian, _is_default_instance_));
  Passenger_descriptor_ = file->message_type(14);
  static const int Passenger_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passenger, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passenger, passengerattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passenger, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passenger, driver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passenger, img_),
  };
  Passenger_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Passenger_descriptor_,
      Passenger::default_instance_,
      Passenger_offsets_,
      -1,
      -1,
      -1,
      sizeof(Passenger),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passenger, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passenger, _is_default_instance_));
  RecPedestrian_descriptor_ = file->message_type(15);
  static const int RecPedestrian_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecPedestrian, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecPedestrian, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecPedestrian, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecPedestrian, pedesattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecPedestrian, face_),
  };
  RecPedestrian_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecPedestrian_descriptor_,
      RecPedestrian::default_instance_,
      RecPedestrian_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecPedestrian),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecPedestrian, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecPedestrian, _is_default_instance_));
  VehicleModelType_descriptor_ = file->message_type(16);
  static const int VehicleModelType_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, brandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, subbrandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, modelyearid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, subbrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, modelyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, ishead_),
  };
  VehicleModelType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleModelType_descriptor_,
      VehicleModelType::default_instance_,
      VehicleModelType_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleModelType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, _is_default_instance_));
  LicensePlate_descriptor_ = file->message_type(17);
  static const int LicensePlate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, platetext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, typename__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, cutboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, localprovinceconfidence_),
  };
  LicensePlate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LicensePlate_descriptor_,
      LicensePlate::default_instance_,
      LicensePlate_offsets_,
      -1,
      -1,
      -1,
      sizeof(LicensePlate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, _is_default_instance_));
  VehicleSymbol_descriptor_ = file->message_type(18);
  static const int VehicleSymbol_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, symbolname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, symbols_),
  };
  VehicleSymbol_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleSymbol_descriptor_,
      VehicleSymbol::default_instance_,
      VehicleSymbol_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleSymbol),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, _is_default_instance_));
  Symbol_descriptor_ = file->message_type(19);
  static const int Symbol_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, cutboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, confidence_),
  };
  Symbol_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Symbol_descriptor_,
      Symbol::default_instance_,
      Symbol_offsets_,
      -1,
      -1,
      -1,
      sizeof(Symbol),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, _is_default_instance_));
  StorageConfig_descriptor_ = file->message_type(20);
  static const int StorageConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageConfig, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageConfig, tags_),
  };
  StorageConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StorageConfig_descriptor_,
      StorageConfig::default_instance_,
      StorageConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(StorageConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageConfig, _is_default_instance_));
  VehicleObj_descriptor_ = file->message_type(21);
  static const int VehicleObj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleObj, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleObj, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleObj, vehicle_),
  };
  VehicleObj_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleObj_descriptor_,
      VehicleObj::default_instance_,
      VehicleObj_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleObj),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleObj, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleObj, _is_default_instance_));
  PedestrianObj_descriptor_ = file->message_type(22);
  static const int PedestrianObj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PedestrianObj, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PedestrianObj, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PedestrianObj, pedestrian_),
  };
  PedestrianObj_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PedestrianObj_descriptor_,
      PedestrianObj::default_instance_,
      PedestrianObj_offsets_,
      -1,
      -1,
      -1,
      sizeof(PedestrianObj),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PedestrianObj, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PedestrianObj, _is_default_instance_));
  ObjType_descriptor_ = file->enum_type(0);
  DataFmtType_descriptor_ = file->enum_type(1);
  SexType_descriptor_ = file->enum_type(2);
  NationalType_descriptor_ = file->enum_type(3);
  AgeType_descriptor_ = file->enum_type(4);
  NonMotorVehicleGesture_descriptor_ = file->enum_type(5);
  DBType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SrcMetadata_descriptor_, &SrcMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cutboard_descriptor_, &Cutboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CutboardImage_descriptor_, &CutboardImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Color_descriptor_, &Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureVector_descriptor_, &FeatureVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NullMessage_descriptor_, &NullMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceAttribute_descriptor_, &FaceAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecFace_descriptor_, &RecFace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RecFace_AlignScoresEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            float,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
            0>::CreateDefaultInstance(
                RecFace_AlignScoresEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RecFace_QualitiesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            float,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
            0>::CreateDefaultInstance(
                RecFace_QualitiesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NameAndConfidence_descriptor_, &NameAndConfidence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CategoryAndFeature_descriptor_, &CategoryAndFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeopleAttr_descriptor_, &PeopleAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecVehicle_descriptor_, &RecVehicle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecNonMotorVehicle_descriptor_, &RecNonMotorVehicle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecNonMotorVehicle_NonMotorPedestrian_descriptor_, &RecNonMotorVehicle_NonMotorPedestrian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Passenger_descriptor_, &Passenger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecPedestrian_descriptor_, &RecPedestrian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleModelType_descriptor_, &VehicleModelType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LicensePlate_descriptor_, &LicensePlate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleSymbol_descriptor_, &VehicleSymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Symbol_descriptor_, &Symbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StorageConfig_descriptor_, &StorageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleObj_descriptor_, &VehicleObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PedestrianObj_descriptor_, &PedestrianObj::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete SrcMetadata::default_instance_;
  delete SrcMetadata_reflection_;
  delete Cutboard::default_instance_;
  delete Cutboard_reflection_;
  delete CutboardImage::default_instance_;
  delete CutboardImage_reflection_;
  delete Color::default_instance_;
  delete Color_reflection_;
  delete FeatureVector::default_instance_;
  delete FeatureVector_reflection_;
  delete NullMessage::default_instance_;
  delete NullMessage_reflection_;
  delete FaceAttribute::default_instance_;
  delete FaceAttribute_default_oneof_instance_;
  delete FaceAttribute_reflection_;
  delete Image::default_instance_;
  delete Image_reflection_;
  delete RecFace::default_instance_;
  delete RecFace_reflection_;
  delete NameAndConfidence::default_instance_;
  delete NameAndConfidence_reflection_;
  delete CategoryAndFeature::default_instance_;
  delete CategoryAndFeature_reflection_;
  delete PeopleAttr::default_instance_;
  delete PeopleAttr_reflection_;
  delete RecVehicle::default_instance_;
  delete RecVehicle_reflection_;
  delete RecNonMotorVehicle::default_instance_;
  delete RecNonMotorVehicle_reflection_;
  delete RecNonMotorVehicle_NonMotorPedestrian::default_instance_;
  delete RecNonMotorVehicle_NonMotorPedestrian_reflection_;
  delete Passenger::default_instance_;
  delete Passenger_reflection_;
  delete RecPedestrian::default_instance_;
  delete RecPedestrian_reflection_;
  delete VehicleModelType::default_instance_;
  delete VehicleModelType_reflection_;
  delete LicensePlate::default_instance_;
  delete LicensePlate_reflection_;
  delete VehicleSymbol::default_instance_;
  delete VehicleSymbol_reflection_;
  delete Symbol::default_instance_;
  delete Symbol_reflection_;
  delete StorageConfig::default_instance_;
  delete StorageConfig_reflection_;
  delete VehicleObj::default_instance_;
  delete VehicleObj_reflection_;
  delete PedestrianObj::default_instance_;
  delete PedestrianObj_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\010dg.model\"\306\001\n\013SrcMetadata"
    "\022\021\n\tTimestamp\030\001 \001(\003\022\020\n\010Duration\030\002 \001(\005\022\020\n"
    "\010SensorId\030\003 \001(\005\022\022\n\nSensorName\030\004 \001(\t\022\021\n\tS"
    "ensorUrl\030\005 \001(\t\022\016\n\006RepoId\030\006 \001(\005\022\020\n\010RepoIn"
    "fo\030\007 \001(\t\022\"\n\007ObjType\030\010 \001(\0162\021.dg.model.Obj"
    "Type\022\023\n\013SensorIdStr\030\t \001(\t\"x\n\010Cutboard\022\t\n"
    "\001X\030\001 \001(\r\022\t\n\001Y\030\002 \001(\r\022\r\n\005Width\030\003 \001(\r\022\016\n\006He"
    "ight\030\004 \001(\r\022\020\n\010ResWidth\030\005 \001(\r\022\021\n\tResHeigh"
    "t\030\006 \001(\r\022\022\n\nConfidence\030\007 \001(\002\"S\n\rCutboardI"
    "mage\022$\n\010Cutboard\030\001 \001(\0132\022.dg.model.Cutboa"
    "rd\022\034\n\003Img\030\002 \001(\0132\017.dg.model.Image\"\?\n\005Colo"
    "r\022\017\n\007ColorId\030\001 \001(\005\022\022\n\nConfidence\030\002 \001(\002\022\021"
    "\n\tColorName\030\003 \001(\t\",\n\rFeatureVector\022\n\n\002Id"
    "\030\001 \001(\003\022\017\n\007Feature\030\002 \001(\t\"\r\n\013NullMessage\"\234"
    "\001\n\rFaceAttribute\022\n\n\002Id\030\001 \001(\005\022\022\n\nconfiden"
    "ce\030\002 \001(\002\022\014\n\004Name\030\003 \001(\t\022\023\n\tValueBool\030\t \001("
    "\010H\000\022\022\n\010ValueInt\030\n \001(\005H\000\022\024\n\nValueFloat\030\013 "
    "\001(\002H\000\022\025\n\013ValueString\030\014 \001(\tH\000B\007\n\005Value\"P\n"
    "\005Image\022\n\n\002Id\030\001 \001(\t\022\r\n\005Width\030\002 \001(\005\022\016\n\006Hei"
    "ght\030\003 \001(\005\022\013\n\003URI\030\004 \001(\t\022\017\n\007BinData\030\005 \001(\t\""
    "\215\003\n\007RecFace\022\n\n\002Id\030\001 \001(\003\022$\n\003Img\030\002 \001(\0132\027.d"
    "g.model.CutboardImage\022\020\n\010Features\030\003 \001(\t\022"
    "\022\n\nConfidence\030\004 \001(\002\0227\n\013AlignScores\030\005 \003(\013"
    "2\".dg.model.RecFace.AlignScoresEntry\0223\n\t"
    "Qualities\030\006 \003(\0132 .dg.model.RecFace.Quali"
    "tiesEntry\022+\n\nAttributes\030\007 \003(\0132\027.dg.model"
    ".FaceAttribute\022\024\n\014DetectResult\030\010 \001(\t\022\023\n\013"
    "AlignResult\030\t \001(\t\0322\n\020AlignScoresEntry\022\013\n"
    "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\0320\n\016Qualiti"
    "esEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\""
    "A\n\021NameAndConfidence\022\n\n\002Id\030\001 \001(\005\022\014\n\004Name"
    "\030\002 \001(\t\022\022\n\nConfidence\030\003 \001(\002\"b\n\022CategoryAn"
    "dFeature\022\n\n\002Id\030\001 \001(\005\022\024\n\014CategoryName\030\002 \001"
    "(\t\022*\n\005Items\030\003 \003(\0132\033.dg.model.NameAndConf"
    "idence\"\277\001\n\nPeopleAttr\022(\n\003Sex\030\001 \001(\0132\033.dg."
    "model.NameAndConfidence\022(\n\003Age\030\002 \001(\0132\033.d"
    "g.model.NameAndConfidence\022-\n\010National\030\003 "
    "\001(\0132\033.dg.model.NameAndConfidence\022.\n\010Cate"
    "gory\030\004 \003(\0132\034.dg.model.CategoryAndFeature"
    "\"\202\003\n\nRecVehicle\022\n\n\002Id\030\001 \001(\003\022-\n\tModelType"
    "\030\002 \001(\0132\032.dg.model.VehicleModelType\022\036\n\005Co"
    "lor\030\003 \001(\0132\017.dg.model.Color\022%\n\005Plate\030\004 \001("
    "\0132\026.dg.model.LicensePlate\022$\n\003Img\030\005 \001(\0132\027"
    ".dg.model.CutboardImage\022(\n\007Symbols\030\006 \003(\013"
    "2\027.dg.model.VehicleSymbol\022\020\n\010Features\030\007 "
    "\001(\t\022&\n\013VehicleType\030\010 \001(\0162\021.dg.model.ObjT"
    "ype\022\027\n\017VehicleTypeName\030\t \001(\t\022&\n\006Plates\030\n"
    " \003(\0132\026.dg.model.LicensePlate\022\'\n\nPassenge"
    "rs\030\013 \003(\0132\023.dg.model.Passenger\"\246\003\n\022RecNon"
    "MotorVehicle\022\n\n\002Id\030\001 \001(\003\022\025\n\rNMVehicleTyp"
    "e\030\002 \001(\003\022\031\n\021NMVehicleTypeName\030\003 \001(\t\022$\n\003Im"
    "g\030\004 \001(\0132\027.dg.model.CutboardImage\022:\n\020NMVe"
    "hicleGesture\030\005 \001(\0162 .dg.model.NonMotorVe"
    "hicleGesture\022B\n\tPassenger\030\006 \003(\0132/.dg.mod"
    "el.RecNonMotorVehicle.NonMotorPedestrian"
    "\022/\n\tNMVehicle\030\007 \003(\0132\034.dg.model.CategoryA"
    "ndFeature\032{\n\022NonMotorPedestrian\022\n\n\002Id\030\001 "
    "\001(\003\022(\n\003Sex\030\002 \001(\0132\033.dg.model.NameAndConfi"
    "dence\022/\n\tAttribute\030\003 \003(\0132\034.dg.model.Cate"
    "goryAndFeature\"\233\001\n\tPassenger\022\n\n\002Id\030\001 \001(\003"
    "\022+\n\rPassengerAttr\030\002 \001(\0132\024.dg.model.Peopl"
    "eAttr\022\037\n\004Face\030\003 \001(\0132\021.dg.model.RecFace\022\016"
    "\n\006Driver\030\004 \001(\010\022$\n\003Img\030\005 \001(\0132\027.dg.model.C"
    "utboardImage\"\237\001\n\rRecPedestrian\022\n\n\002Id\030\001 \001"
    "(\003\022$\n\003Img\030\002 \001(\0132\027.dg.model.CutboardImage"
    "\022\022\n\nConfidence\030\003 \001(\002\022\'\n\tPedesAttr\030\004 \001(\0132"
    "\024.dg.model.PeopleAttr\022\037\n\004Face\030\005 \001(\0132\021.dg"
    ".model.RecFace\"\335\001\n\020VehicleModelType\022\n\n\002I"
    "d\030\001 \001(\003\022\017\n\007BrandId\030\002 \001(\005\022\022\n\nSubBrandId\030\003"
    " \001(\005\022\023\n\013ModelYearId\030\004 \001(\005\022\022\n\nConfidence\030"
    "\005 \001(\002\022\014\n\004Type\030\006 \001(\t\022\r\n\005Brand\030\007 \001(\t\022\020\n\010Su"
    "bBrand\030\010 \001(\t\022\021\n\tModelYear\030\t \001(\t\022\016\n\006TypeI"
    "d\030\n \001(\005\022\r\n\005Model\030\013 \001(\t\022\016\n\006IsHead\030\014 \001(\005\"\276"
    "\001\n\014LicensePlate\022\021\n\tPlateText\030\001 \001(\t\022\036\n\005Co"
    "lor\030\002 \001(\0132\017.dg.model.Color\022\016\n\006TypeId\030\003 \001"
    "(\005\022\020\n\010TypeName\030\004 \001(\t\022\022\n\nConfidence\030\005 \001(\002"
    "\022$\n\010Cutboard\030\006 \001(\0132\022.dg.model.Cutboard\022\037"
    "\n\027LocalProvinceConfidence\030\007 \001(\002\"X\n\rVehic"
    "leSymbol\022\020\n\010SymbolId\030\001 \001(\005\022\022\n\nSymbolName"
    "\030\002 \001(\t\022!\n\007Symbols\030\003 \003(\0132\020.dg.model.Symbo"
    "l\"B\n\006Symbol\022$\n\010Cutboard\030\001 \001(\0132\022.dg.model"
    ".Cutboard\022\022\n\nConfidence\030\002 \001(\002\"N\n\rStorage"
    "Config\022\017\n\007Address\030\001 \001(\t\022\036\n\004Type\030\002 \001(\0162\020."
    "dg.model.DBType\022\014\n\004Tags\030\003 \003(\t\"z\n\nVehicle"
    "Obj\022\'\n\010Metadata\030\001 \001(\0132\025.dg.model.SrcMeta"
    "data\022\034\n\003Img\030\002 \001(\0132\017.dg.model.Image\022%\n\007Ve"
    "hicle\030\003 \003(\0132\024.dg.model.RecVehicle\"\203\001\n\rPe"
    "destrianObj\022\'\n\010Metadata\030\001 \001(\0132\025.dg.model"
    ".SrcMetadata\022\034\n\003Img\030\002 \001(\0132\017.dg.model.Ima"
    "ge\022+\n\nPedestrian\030\003 \003(\0132\027.dg.model.RecPed"
    "estrian*\303\003\n\007ObjType\022\024\n\020OBJ_TYPE_UNKNOWN\020"
    "\000\022\020\n\014OBJ_TYPE_CAR\020\001\022\024\n\020OBJ_TYPE_BICYCLE\020"
    "\002\022\025\n\021OBJ_TYPE_TRICYCLE\020\003\022\027\n\023OBJ_TYPE_PED"
    "ESTRIAN\020\004\022\022\n\rOBJ_TYPE_FACE\020\200\010\022\034\n\027OBJ_TYP"
    "E_VEHICLE_VECTOR\020\200\020\022\034\n\027OBJ_TYPE_BICYCLE_"
    "VECTOR\020\201\020\022\035\n\030OBJ_TYPE_TRICYCLE_VECTOR\020\202\020"
    "\022\037\n\032OBJ_TYPE_PEDESTRIAN_VECTOR\020\203\020\022\031\n\024OBJ"
    "_TYPE_FACE_VECTOR\020\200\030\022\036\n\031OBJ_TYPE_VEHICLE"
    "_CUTBOARD\020\200 \022\036\n\031OBJ_TYPE_BICYCLE_CUTBOAR"
    "D\020\201 \022\037\n\032OBJ_TYPE_TRICYCLE_CUTBOARD\020\202 \022!\n"
    "\034OBJ_TYPE_PEDESTRIAN_CUTBOARD\020\203 \022\033\n\026OBJ_"
    "TYPE_FACE_CUTBOARD\020\200(*G\n\013DataFmtType\022\016\n\n"
    "UNKNOWNFMT\020\000\022\010\n\004JSON\020\001\022\014\n\010PROTOBUF\020\002\022\007\n\003"
    "CSV\020\003\022\007\n\003PDF\020\004*G\n\007SexType\022\024\n\020SEX_TYPE_UN"
    "KNOWN\020\000\022\021\n\rSEX_TYPE_MALE\020\001\022\023\n\017SEX_TYPE_F"
    "EMALE\020\002*\\\n\014NationalType\022\031\n\025NATIONAL_TYPE"
    "_UNKNOWN\020\000\022\025\n\021NATIONAL_TYPE_HAN\020\001\022\032\n\026NAT"
    "IONAL_TYPE_MINORITY\020\002*k\n\007AgeType\022\024\n\020AGE_"
    "TYPE_UNKNOWN\020\000\022\021\n\rAGE_TYPE_LT15\020\001\022\021\n\rAGE"
    "_TYPE_1530\020\002\022\021\n\rAGE_TYPE_3050\020\003\022\021\n\rAGE_T"
    "YPE_50UP\020\004*i\n\026NonMotorVehicleGesture\022\025\n\021"
    "ATTITUDE_POSITIVE\020\000\022\022\n\016ATTITUDE_RIGHT\020\001\022"
    "\021\n\rATTITUDE_LEFT\020\002\022\021\n\rATTITUDE_BACK\020\003*0\n"
    "\006DBType\022\t\n\005KAFKA\020\000\022\014\n\010POSTGRES\020\001\022\r\n\tFILE"
    "IMAGE\020\002b\006proto3", 4575);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  SrcMetadata::default_instance_ = new SrcMetadata();
  Cutboard::default_instance_ = new Cutboard();
  CutboardImage::default_instance_ = new CutboardImage();
  Color::default_instance_ = new Color();
  FeatureVector::default_instance_ = new FeatureVector();
  NullMessage::default_instance_ = new NullMessage();
  FaceAttribute::default_instance_ = new FaceAttribute();
  FaceAttribute_default_oneof_instance_ = new FaceAttributeOneofInstance();
  Image::default_instance_ = new Image();
  RecFace::default_instance_ = new RecFace();
  NameAndConfidence::default_instance_ = new NameAndConfidence();
  CategoryAndFeature::default_instance_ = new CategoryAndFeature();
  PeopleAttr::default_instance_ = new PeopleAttr();
  RecVehicle::default_instance_ = new RecVehicle();
  RecNonMotorVehicle::default_instance_ = new RecNonMotorVehicle();
  RecNonMotorVehicle_NonMotorPedestrian::default_instance_ = new RecNonMotorVehicle_NonMotorPedestrian();
  Passenger::default_instance_ = new Passenger();
  RecPedestrian::default_instance_ = new RecPedestrian();
  VehicleModelType::default_instance_ = new VehicleModelType();
  LicensePlate::default_instance_ = new LicensePlate();
  VehicleSymbol::default_instance_ = new VehicleSymbol();
  Symbol::default_instance_ = new Symbol();
  StorageConfig::default_instance_ = new StorageConfig();
  VehicleObj::default_instance_ = new VehicleObj();
  PedestrianObj::default_instance_ = new PedestrianObj();
  SrcMetadata::default_instance_->InitAsDefaultInstance();
  Cutboard::default_instance_->InitAsDefaultInstance();
  CutboardImage::default_instance_->InitAsDefaultInstance();
  Color::default_instance_->InitAsDefaultInstance();
  FeatureVector::default_instance_->InitAsDefaultInstance();
  NullMessage::default_instance_->InitAsDefaultInstance();
  FaceAttribute::default_instance_->InitAsDefaultInstance();
  Image::default_instance_->InitAsDefaultInstance();
  RecFace::default_instance_->InitAsDefaultInstance();
  NameAndConfidence::default_instance_->InitAsDefaultInstance();
  CategoryAndFeature::default_instance_->InitAsDefaultInstance();
  PeopleAttr::default_instance_->InitAsDefaultInstance();
  RecVehicle::default_instance_->InitAsDefaultInstance();
  RecNonMotorVehicle::default_instance_->InitAsDefaultInstance();
  RecNonMotorVehicle_NonMotorPedestrian::default_instance_->InitAsDefaultInstance();
  Passenger::default_instance_->InitAsDefaultInstance();
  RecPedestrian::default_instance_->InitAsDefaultInstance();
  VehicleModelType::default_instance_->InitAsDefaultInstance();
  LicensePlate::default_instance_->InitAsDefaultInstance();
  VehicleSymbol::default_instance_->InitAsDefaultInstance();
  Symbol::default_instance_->InitAsDefaultInstance();
  StorageConfig::default_instance_->InitAsDefaultInstance();
  VehicleObj::default_instance_->InitAsDefaultInstance();
  PedestrianObj::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* ObjType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjType_descriptor_;
}
bool ObjType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 1024:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 3072:
    case 4096:
    case 4097:
    case 4098:
    case 4099:
    case 5120:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataFmtType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFmtType_descriptor_;
}
bool DataFmtType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SexType_descriptor_;
}
bool SexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NationalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NationalType_descriptor_;
}
bool NationalType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AgeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgeType_descriptor_;
}
bool AgeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NonMotorVehicleGesture_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NonMotorVehicleGesture_descriptor_;
}
bool NonMotorVehicleGesture_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DBType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBType_descriptor_;
}
bool DBType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrcMetadata::kTimestampFieldNumber;
const int SrcMetadata::kDurationFieldNumber;
const int SrcMetadata::kSensorIdFieldNumber;
const int SrcMetadata::kSensorNameFieldNumber;
const int SrcMetadata::kSensorUrlFieldNumber;
const int SrcMetadata::kRepoIdFieldNumber;
const int SrcMetadata::kRepoInfoFieldNumber;
const int SrcMetadata::kObjTypeFieldNumber;
const int SrcMetadata::kSensorIdStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrcMetadata::SrcMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.SrcMetadata)
}

void SrcMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SrcMetadata::SrcMetadata(const SrcMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.SrcMetadata)
}

void SrcMetadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  duration_ = 0;
  sensorid_ = 0;
  sensorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensorurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repoid_ = 0;
  repoinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objtype_ = 0;
  sensoridstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SrcMetadata::~SrcMetadata() {
  // @@protoc_insertion_point(destructor:dg.model.SrcMetadata)
  SharedDtor();
}

void SrcMetadata::SharedDtor() {
  sensorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensorurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repoinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensoridstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SrcMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrcMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrcMetadata_descriptor_;
}

const SrcMetadata& SrcMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SrcMetadata* SrcMetadata::default_instance_ = NULL;

SrcMetadata* SrcMetadata::New(::google::protobuf::Arena* arena) const {
  SrcMetadata* n = new SrcMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrcMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.SrcMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SrcMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SrcMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, sensorid_);
  ZR_(repoid_, objtype_);
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensorurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repoinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensoridstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SrcMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.SrcMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Duration;
        break;
      }

      // optional int32 Duration = 2;
      case 2: {
        if (tag == 16) {
         parse_Duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SensorId;
        break;
      }

      // optional int32 SensorId = 3;
      case 3: {
        if (tag == 24) {
         parse_SensorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensorid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SensorName;
        break;
      }

      // optional string SensorName = 4;
      case 4: {
        if (tag == 34) {
         parse_SensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.SrcMetadata.SensorName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SensorUrl;
        break;
      }

      // optional string SensorUrl = 5;
      case 5: {
        if (tag == 42) {
         parse_SensorUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensorurl().data(), this->sensorurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.SrcMetadata.SensorUrl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RepoId;
        break;
      }

      // optional int32 RepoId = 6;
      case 6: {
        if (tag == 48) {
         parse_RepoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repoid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_RepoInfo;
        break;
      }

      // optional string RepoInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_RepoInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repoinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->repoinfo().data(), this->repoinfo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.SrcMetadata.RepoInfo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ObjType;
        break;
      }

      // optional .dg.model.ObjType ObjType = 8;
      case 8: {
        if (tag == 64) {
         parse_ObjType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_objtype(static_cast< ::dg::model::ObjType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_SensorIdStr;
        break;
      }

      // optional string SensorIdStr = 9;
      case 9: {
        if (tag == 74) {
         parse_SensorIdStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensoridstr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensoridstr().data(), this->sensoridstr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.SrcMetadata.SensorIdStr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.SrcMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.SrcMetadata)
  return false;
#undef DO_
}

void SrcMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.SrcMetadata)
  // optional int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 Duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional int32 SensorId = 3;
  if (this->sensorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sensorid(), output);
  }

  // optional string SensorName = 4;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sensorname(), output);
  }

  // optional string SensorUrl = 5;
  if (this->sensorurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorurl().data(), this->sensorurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sensorurl(), output);
  }

  // optional int32 RepoId = 6;
  if (this->repoid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->repoid(), output);
  }

  // optional string RepoInfo = 7;
  if (this->repoinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repoinfo().data(), this->repoinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.RepoInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->repoinfo(), output);
  }

  // optional .dg.model.ObjType ObjType = 8;
  if (this->objtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->objtype(), output);
  }

  // optional string SensorIdStr = 9;
  if (this->sensoridstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensoridstr().data(), this->sensoridstr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorIdStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sensoridstr(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.SrcMetadata)
}

::google::protobuf::uint8* SrcMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.SrcMetadata)
  // optional int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 Duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional int32 SensorId = 3;
  if (this->sensorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sensorid(), target);
  }

  // optional string SensorName = 4;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sensorname(), target);
  }

  // optional string SensorUrl = 5;
  if (this->sensorurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorurl().data(), this->sensorurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sensorurl(), target);
  }

  // optional int32 RepoId = 6;
  if (this->repoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->repoid(), target);
  }

  // optional string RepoInfo = 7;
  if (this->repoinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repoinfo().data(), this->repoinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.RepoInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->repoinfo(), target);
  }

  // optional .dg.model.ObjType ObjType = 8;
  if (this->objtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->objtype(), target);
  }

  // optional string SensorIdStr = 9;
  if (this->sensoridstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensoridstr().data(), this->sensoridstr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorIdStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sensoridstr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.SrcMetadata)
  return target;
}

int SrcMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.SrcMetadata)
  int total_size = 0;

  // optional int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int32 Duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  // optional int32 SensorId = 3;
  if (this->sensorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensorid());
  }

  // optional string SensorName = 4;
  if (this->sensorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensorname());
  }

  // optional string SensorUrl = 5;
  if (this->sensorurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensorurl());
  }

  // optional int32 RepoId = 6;
  if (this->repoid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->repoid());
  }

  // optional string RepoInfo = 7;
  if (this->repoinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->repoinfo());
  }

  // optional .dg.model.ObjType ObjType = 8;
  if (this->objtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->objtype());
  }

  // optional string SensorIdStr = 9;
  if (this->sensoridstr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensoridstr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrcMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.SrcMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SrcMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SrcMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.SrcMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.SrcMetadata)
    MergeFrom(*source);
  }
}

void SrcMetadata::MergeFrom(const SrcMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.SrcMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.sensorid() != 0) {
    set_sensorid(from.sensorid());
  }
  if (from.sensorname().size() > 0) {

    sensorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensorname_);
  }
  if (from.sensorurl().size() > 0) {

    sensorurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensorurl_);
  }
  if (from.repoid() != 0) {
    set_repoid(from.repoid());
  }
  if (from.repoinfo().size() > 0) {

    repoinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.repoinfo_);
  }
  if (from.objtype() != 0) {
    set_objtype(from.objtype());
  }
  if (from.sensoridstr().size() > 0) {

    sensoridstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensoridstr_);
  }
}

void SrcMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.SrcMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrcMetadata::CopyFrom(const SrcMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.SrcMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrcMetadata::IsInitialized() const {

  return true;
}

void SrcMetadata::Swap(SrcMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrcMetadata::InternalSwap(SrcMetadata* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(duration_, other->duration_);
  std::swap(sensorid_, other->sensorid_);
  sensorname_.Swap(&other->sensorname_);
  sensorurl_.Swap(&other->sensorurl_);
  std::swap(repoid_, other->repoid_);
  repoinfo_.Swap(&other->repoinfo_);
  std::swap(objtype_, other->objtype_);
  sensoridstr_.Swap(&other->sensoridstr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SrcMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrcMetadata_descriptor_;
  metadata.reflection = SrcMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrcMetadata

// optional int64 Timestamp = 1;
void SrcMetadata::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SrcMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.Timestamp)
  return timestamp_;
}
 void SrcMetadata::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.Timestamp)
}

// optional int32 Duration = 2;
void SrcMetadata::clear_duration() {
  duration_ = 0;
}
 ::google::protobuf::int32 SrcMetadata::duration() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.Duration)
  return duration_;
}
 void SrcMetadata::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.Duration)
}

// optional int32 SensorId = 3;
void SrcMetadata::clear_sensorid() {
  sensorid_ = 0;
}
 ::google::protobuf::int32 SrcMetadata::sensorid() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorId)
  return sensorid_;
}
 void SrcMetadata::set_sensorid(::google::protobuf::int32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorId)
}

// optional string SensorName = 4;
void SrcMetadata::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SrcMetadata::sensorname() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorName)
  return sensorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_sensorname(const ::std::string& value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorName)
}
 void SrcMetadata::set_sensorname(const char* value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorName)
}
 void SrcMetadata::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorName)
}
 ::std::string* SrcMetadata::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorName)
  return sensorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SrcMetadata::release_sensorname() {
  // @@protoc_insertion_point(field_release:dg.model.SrcMetadata.SensorName)
  
  return sensorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname != NULL) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorName)
}

// optional string SensorUrl = 5;
void SrcMetadata::clear_sensorurl() {
  sensorurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SrcMetadata::sensorurl() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorUrl)
  return sensorurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_sensorurl(const ::std::string& value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorUrl)
}
 void SrcMetadata::set_sensorurl(const char* value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorUrl)
}
 void SrcMetadata::set_sensorurl(const char* value, size_t size) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorUrl)
}
 ::std::string* SrcMetadata::mutable_sensorurl() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorUrl)
  return sensorurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SrcMetadata::release_sensorurl() {
  // @@protoc_insertion_point(field_release:dg.model.SrcMetadata.SensorUrl)
  
  return sensorurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_allocated_sensorurl(::std::string* sensorurl) {
  if (sensorurl != NULL) {
    
  } else {
    
  }
  sensorurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorurl);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorUrl)
}

// optional int32 RepoId = 6;
void SrcMetadata::clear_repoid() {
  repoid_ = 0;
}
 ::google::protobuf::int32 SrcMetadata::repoid() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.RepoId)
  return repoid_;
}
 void SrcMetadata::set_repoid(::google::protobuf::int32 value) {
  
  repoid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.RepoId)
}

// optional string RepoInfo = 7;
void SrcMetadata::clear_repoinfo() {
  repoinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SrcMetadata::repoinfo() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.RepoInfo)
  return repoinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_repoinfo(const ::std::string& value) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.RepoInfo)
}
 void SrcMetadata::set_repoinfo(const char* value) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.RepoInfo)
}
 void SrcMetadata::set_repoinfo(const char* value, size_t size) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.RepoInfo)
}
 ::std::string* SrcMetadata::mutable_repoinfo() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.RepoInfo)
  return repoinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SrcMetadata::release_repoinfo() {
  // @@protoc_insertion_point(field_release:dg.model.SrcMetadata.RepoInfo)
  
  return repoinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_allocated_repoinfo(::std::string* repoinfo) {
  if (repoinfo != NULL) {
    
  } else {
    
  }
  repoinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repoinfo);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.RepoInfo)
}

// optional .dg.model.ObjType ObjType = 8;
void SrcMetadata::clear_objtype() {
  objtype_ = 0;
}
 ::dg::model::ObjType SrcMetadata::objtype() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.ObjType)
  return static_cast< ::dg::model::ObjType >(objtype_);
}
 void SrcMetadata::set_objtype(::dg::model::ObjType value) {
  
  objtype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.ObjType)
}

// optional string SensorIdStr = 9;
void SrcMetadata::clear_sensoridstr() {
  sensoridstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SrcMetadata::sensoridstr() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorIdStr)
  return sensoridstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_sensoridstr(const ::std::string& value) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorIdStr)
}
 void SrcMetadata::set_sensoridstr(const char* value) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorIdStr)
}
 void SrcMetadata::set_sensoridstr(const char* value, size_t size) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorIdStr)
}
 ::std::string* SrcMetadata::mutable_sensoridstr() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorIdStr)
  return sensoridstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SrcMetadata::release_sensoridstr() {
  // @@protoc_insertion_point(field_release:dg.model.SrcMetadata.SensorIdStr)
  
  return sensoridstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_allocated_sensoridstr(::std::string* sensoridstr) {
  if (sensoridstr != NULL) {
    
  } else {
    
  }
  sensoridstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensoridstr);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorIdStr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cutboard::kXFieldNumber;
const int Cutboard::kYFieldNumber;
const int Cutboard::kWidthFieldNumber;
const int Cutboard::kHeightFieldNumber;
const int Cutboard::kResWidthFieldNumber;
const int Cutboard::kResHeightFieldNumber;
const int Cutboard::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cutboard::Cutboard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Cutboard)
}

void Cutboard::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Cutboard::Cutboard(const Cutboard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Cutboard)
}

void Cutboard::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  width_ = 0u;
  height_ = 0u;
  reswidth_ = 0u;
  resheight_ = 0u;
  confidence_ = 0;
}

Cutboard::~Cutboard() {
  // @@protoc_insertion_point(destructor:dg.model.Cutboard)
  SharedDtor();
}

void Cutboard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cutboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cutboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cutboard_descriptor_;
}

const Cutboard& Cutboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Cutboard* Cutboard::default_instance_ = NULL;

Cutboard* Cutboard::New(::google::protobuf::Arena* arena) const {
  Cutboard* n = new Cutboard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cutboard::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.Cutboard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Cutboard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Cutboard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, confidence_);

#undef ZR_HELPER_
#undef ZR_

}

bool Cutboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Cutboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional uint32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Width;
        break;
      }

      // optional uint32 Width = 3;
      case 3: {
        if (tag == 24) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Height;
        break;
      }

      // optional uint32 Height = 4;
      case 4: {
        if (tag == 32) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ResWidth;
        break;
      }

      // optional uint32 ResWidth = 5;
      case 5: {
        if (tag == 40) {
         parse_ResWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reswidth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ResHeight;
        break;
      }

      // optional uint32 ResHeight = 6;
      case 6: {
        if (tag == 48) {
         parse_ResHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resheight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 7;
      case 7: {
        if (tag == 61) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Cutboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Cutboard)
  return false;
#undef DO_
}

void Cutboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Cutboard)
  // optional uint32 X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional uint32 Width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 Height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional uint32 ResWidth = 5;
  if (this->reswidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reswidth(), output);
  }

  // optional uint32 ResHeight = 6;
  if (this->resheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->resheight(), output);
  }

  // optional float Confidence = 7;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Cutboard)
}

::google::protobuf::uint8* Cutboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Cutboard)
  // optional uint32 X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional uint32 Width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 Height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional uint32 ResWidth = 5;
  if (this->reswidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reswidth(), target);
  }

  // optional uint32 ResHeight = 6;
  if (this->resheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->resheight(), target);
  }

  // optional float Confidence = 7;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Cutboard)
  return target;
}

int Cutboard::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.Cutboard)
  int total_size = 0;

  // optional uint32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // optional uint32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  // optional uint32 Width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // optional uint32 Height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // optional uint32 ResWidth = 5;
  if (this->reswidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reswidth());
  }

  // optional uint32 ResHeight = 6;
  if (this->resheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resheight());
  }

  // optional float Confidence = 7;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cutboard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.Cutboard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Cutboard* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Cutboard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.Cutboard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.Cutboard)
    MergeFrom(*source);
  }
}

void Cutboard::MergeFrom(const Cutboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.Cutboard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.reswidth() != 0) {
    set_reswidth(from.reswidth());
  }
  if (from.resheight() != 0) {
    set_resheight(from.resheight());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void Cutboard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.Cutboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cutboard::CopyFrom(const Cutboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.Cutboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cutboard::IsInitialized() const {

  return true;
}

void Cutboard::Swap(Cutboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cutboard::InternalSwap(Cutboard* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(reswidth_, other->reswidth_);
  std::swap(resheight_, other->resheight_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cutboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cutboard_descriptor_;
  metadata.reflection = Cutboard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cutboard

// optional uint32 X = 1;
void Cutboard::clear_x() {
  x_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::x() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.X)
  return x_;
}
 void Cutboard::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.X)
}

// optional uint32 Y = 2;
void Cutboard::clear_y() {
  y_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::y() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Y)
  return y_;
}
 void Cutboard::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Y)
}

// optional uint32 Width = 3;
void Cutboard::clear_width() {
  width_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::width() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Width)
  return width_;
}
 void Cutboard::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Width)
}

// optional uint32 Height = 4;
void Cutboard::clear_height() {
  height_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::height() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Height)
  return height_;
}
 void Cutboard::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Height)
}

// optional uint32 ResWidth = 5;
void Cutboard::clear_reswidth() {
  reswidth_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::reswidth() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.ResWidth)
  return reswidth_;
}
 void Cutboard::set_reswidth(::google::protobuf::uint32 value) {
  
  reswidth_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.ResWidth)
}

// optional uint32 ResHeight = 6;
void Cutboard::clear_resheight() {
  resheight_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::resheight() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.ResHeight)
  return resheight_;
}
 void Cutboard::set_resheight(::google::protobuf::uint32 value) {
  
  resheight_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.ResHeight)
}

// optional float Confidence = 7;
void Cutboard::clear_confidence() {
  confidence_ = 0;
}
 float Cutboard::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Confidence)
  return confidence_;
}
 void Cutboard::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CutboardImage::kCutboardFieldNumber;
const int CutboardImage::kImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CutboardImage::CutboardImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.CutboardImage)
}

void CutboardImage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cutboard_ = const_cast< ::dg::model::Cutboard*>(&::dg::model::Cutboard::default_instance());
  img_ = const_cast< ::dg::model::Image*>(&::dg::model::Image::default_instance());
}

CutboardImage::CutboardImage(const CutboardImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.CutboardImage)
}

void CutboardImage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cutboard_ = NULL;
  img_ = NULL;
}

CutboardImage::~CutboardImage() {
  // @@protoc_insertion_point(destructor:dg.model.CutboardImage)
  SharedDtor();
}

void CutboardImage::SharedDtor() {
  if (this != default_instance_) {
    delete cutboard_;
    delete img_;
  }
}

void CutboardImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CutboardImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CutboardImage_descriptor_;
}

const CutboardImage& CutboardImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CutboardImage* CutboardImage::default_instance_ = NULL;

CutboardImage* CutboardImage::New(::google::protobuf::Arena* arena) const {
  CutboardImage* n = new CutboardImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CutboardImage::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.CutboardImage)
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}

bool CutboardImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.CutboardImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.Cutboard Cutboard = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Img;
        break;
      }

      // optional .dg.model.Image Img = 2;
      case 2: {
        if (tag == 18) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.CutboardImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.CutboardImage)
  return false;
#undef DO_
}

void CutboardImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.CutboardImage)
  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cutboard_, output);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.CutboardImage)
}

::google::protobuf::uint8* CutboardImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.CutboardImage)
  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->cutboard_, target);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->img_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.CutboardImage)
  return target;
}

int CutboardImage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.CutboardImage)
  int total_size = 0;

  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CutboardImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.CutboardImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CutboardImage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CutboardImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.CutboardImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.CutboardImage)
    MergeFrom(*source);
  }
}

void CutboardImage::MergeFrom(const CutboardImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.CutboardImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_cutboard()) {
    mutable_cutboard()->::dg::model::Cutboard::MergeFrom(from.cutboard());
  }
  if (from.has_img()) {
    mutable_img()->::dg::model::Image::MergeFrom(from.img());
  }
}

void CutboardImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.CutboardImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutboardImage::CopyFrom(const CutboardImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.CutboardImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutboardImage::IsInitialized() const {

  return true;
}

void CutboardImage::Swap(CutboardImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CutboardImage::InternalSwap(CutboardImage* other) {
  std::swap(cutboard_, other->cutboard_);
  std::swap(img_, other->img_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CutboardImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CutboardImage_descriptor_;
  metadata.reflection = CutboardImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CutboardImage

// optional .dg.model.Cutboard Cutboard = 1;
bool CutboardImage::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void CutboardImage::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::dg::model::Cutboard& CutboardImage::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.CutboardImage.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::dg::model::Cutboard* CutboardImage::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.CutboardImage.Cutboard)
  return cutboard_;
}
::dg::model::Cutboard* CutboardImage::release_cutboard() {
  // @@protoc_insertion_point(field_release:dg.model.CutboardImage.Cutboard)
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void CutboardImage::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.CutboardImage.Cutboard)
}

// optional .dg.model.Image Img = 2;
bool CutboardImage::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void CutboardImage::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::dg::model::Image& CutboardImage::img() const {
  // @@protoc_insertion_point(field_get:dg.model.CutboardImage.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::dg::model::Image* CutboardImage::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.CutboardImage.Img)
  return img_;
}
::dg::model::Image* CutboardImage::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.CutboardImage.Img)
  
  ::dg::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
void CutboardImage::set_allocated_img(::dg::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.CutboardImage.Img)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kColorIdFieldNumber;
const int Color::kConfidenceFieldNumber;
const int Color::kColorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Color)
}

void Color::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Color::Color(const Color& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Color)
}

void Color::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  colorid_ = 0;
  confidence_ = 0;
  colorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:dg.model.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  colorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.Color)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Color, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Color*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(colorid_, confidence_);
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ColorId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 2;
      case 2: {
        if (tag == 21) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ColorName;
        break;
      }

      // optional string ColorName = 3;
      case 3: {
        if (tag == 26) {
         parse_ColorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_colorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->colorname().data(), this->colorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Color.ColorName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Color)
  // optional int32 ColorId = 1;
  if (this->colorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->colorid(), output);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // optional string ColorName = 3;
  if (this->colorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->colorname().data(), this->colorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Color.ColorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->colorname(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Color)
}

::google::protobuf::uint8* Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Color)
  // optional int32 ColorId = 1;
  if (this->colorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->colorid(), target);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // optional string ColorName = 3;
  if (this->colorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->colorname().data(), this->colorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Color.ColorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->colorname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Color)
  return target;
}

int Color::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.Color)
  int total_size = 0;

  // optional int32 ColorId = 1;
  if (this->colorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colorid());
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional string ColorName = 3;
  if (this->colorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->colorname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Color* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.colorid() != 0) {
    set_colorid(from.colorid());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.colorname().size() > 0) {

    colorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.colorname_);
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {

  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(colorid_, other->colorid_);
  std::swap(confidence_, other->confidence_);
  colorname_.Swap(&other->colorname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// optional int32 ColorId = 1;
void Color::clear_colorid() {
  colorid_ = 0;
}
 ::google::protobuf::int32 Color::colorid() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.ColorId)
  return colorid_;
}
 void Color::set_colorid(::google::protobuf::int32 value) {
  
  colorid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Color.ColorId)
}

// optional float Confidence = 2;
void Color::clear_confidence() {
  confidence_ = 0;
}
 float Color::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.Confidence)
  return confidence_;
}
 void Color::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Color.Confidence)
}

// optional string ColorName = 3;
void Color::clear_colorname() {
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Color::colorname() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.ColorName)
  return colorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Color::set_colorname(const ::std::string& value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Color.ColorName)
}
 void Color::set_colorname(const char* value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Color.ColorName)
}
 void Color::set_colorname(const char* value, size_t size) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Color.ColorName)
}
 ::std::string* Color::mutable_colorname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Color.ColorName)
  return colorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Color::release_colorname() {
  // @@protoc_insertion_point(field_release:dg.model.Color.ColorName)
  
  return colorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Color::set_allocated_colorname(::std::string* colorname) {
  if (colorname != NULL) {
    
  } else {
    
  }
  colorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colorname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Color.ColorName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureVector::kIdFieldNumber;
const int FeatureVector::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureVector::FeatureVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.FeatureVector)
}

void FeatureVector::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeatureVector::FeatureVector(const FeatureVector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.FeatureVector)
}

void FeatureVector::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FeatureVector::~FeatureVector() {
  // @@protoc_insertion_point(destructor:dg.model.FeatureVector)
  SharedDtor();
}

void FeatureVector::SharedDtor() {
  feature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FeatureVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureVector_descriptor_;
}

const FeatureVector& FeatureVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FeatureVector* FeatureVector::default_instance_ = NULL;

FeatureVector* FeatureVector::New(::google::protobuf::Arena* arena) const {
  FeatureVector* n = new FeatureVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureVector::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.FeatureVector)
  id_ = GOOGLE_LONGLONG(0);
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FeatureVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.FeatureVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Feature;
        break;
      }

      // optional string Feature = 2;
      case 2: {
        if (tag == 18) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feature().data(), this->feature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.FeatureVector.Feature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.FeatureVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.FeatureVector)
  return false;
#undef DO_
}

void FeatureVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.FeatureVector)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string Feature = 2;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feature().data(), this->feature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FeatureVector.Feature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->feature(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.FeatureVector)
}

::google::protobuf::uint8* FeatureVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.FeatureVector)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string Feature = 2;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feature().data(), this->feature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FeatureVector.Feature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->feature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.FeatureVector)
  return target;
}

int FeatureVector::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.FeatureVector)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string Feature = 2;
  if (this->feature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.FeatureVector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureVector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.FeatureVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.FeatureVector)
    MergeFrom(*source);
  }
}

void FeatureVector::MergeFrom(const FeatureVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.FeatureVector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.feature().size() > 0) {

    feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_);
  }
}

void FeatureVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.FeatureVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureVector::CopyFrom(const FeatureVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.FeatureVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureVector::IsInitialized() const {

  return true;
}

void FeatureVector::Swap(FeatureVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureVector::InternalSwap(FeatureVector* other) {
  std::swap(id_, other->id_);
  feature_.Swap(&other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureVector_descriptor_;
  metadata.reflection = FeatureVector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureVector

// optional int64 Id = 1;
void FeatureVector::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FeatureVector::id() const {
  // @@protoc_insertion_point(field_get:dg.model.FeatureVector.Id)
  return id_;
}
 void FeatureVector::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FeatureVector.Id)
}

// optional string Feature = 2;
void FeatureVector::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FeatureVector::feature() const {
  // @@protoc_insertion_point(field_get:dg.model.FeatureVector.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureVector::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FeatureVector.Feature)
}
 void FeatureVector::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FeatureVector.Feature)
}
 void FeatureVector::set_feature(const char* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FeatureVector.Feature)
}
 ::std::string* FeatureVector::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.FeatureVector.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeatureVector::release_feature() {
  // @@protoc_insertion_point(field_release:dg.model.FeatureVector.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureVector::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:dg.model.FeatureVector.Feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NullMessage::NullMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.NullMessage)
}

void NullMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NullMessage::NullMessage(const NullMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.NullMessage)
}

void NullMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NullMessage::~NullMessage() {
  // @@protoc_insertion_point(destructor:dg.model.NullMessage)
  SharedDtor();
}

void NullMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NullMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NullMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NullMessage_descriptor_;
}

const NullMessage& NullMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NullMessage* NullMessage::default_instance_ = NULL;

NullMessage* NullMessage::New(::google::protobuf::Arena* arena) const {
  NullMessage* n = new NullMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NullMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.NullMessage)
}

bool NullMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.NullMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.NullMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.NullMessage)
  return false;
#undef DO_
}

void NullMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.NullMessage)
  // @@protoc_insertion_point(serialize_end:dg.model.NullMessage)
}

::google::protobuf::uint8* NullMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.NullMessage)
  // @@protoc_insertion_point(serialize_to_array_end:dg.model.NullMessage)
  return target;
}

int NullMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.NullMessage)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NullMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.NullMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NullMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NullMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.NullMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.NullMessage)
    MergeFrom(*source);
  }
}

void NullMessage::MergeFrom(const NullMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.NullMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void NullMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.NullMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullMessage::CopyFrom(const NullMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.NullMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullMessage::IsInitialized() const {

  return true;
}

void NullMessage::Swap(NullMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NullMessage::InternalSwap(NullMessage* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NullMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NullMessage_descriptor_;
  metadata.reflection = NullMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NullMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceAttribute::kIdFieldNumber;
const int FaceAttribute::kConfidenceFieldNumber;
const int FaceAttribute::kNameFieldNumber;
const int FaceAttribute::kValueBoolFieldNumber;
const int FaceAttribute::kValueIntFieldNumber;
const int FaceAttribute::kValueFloatFieldNumber;
const int FaceAttribute::kValueStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceAttribute::FaceAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.FaceAttribute)
}

void FaceAttribute::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  FaceAttribute_default_oneof_instance_->valuebool_ = false;
  FaceAttribute_default_oneof_instance_->valueint_ = 0;
  FaceAttribute_default_oneof_instance_->valuefloat_ = 0;
  FaceAttribute_default_oneof_instance_->valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FaceAttribute::FaceAttribute(const FaceAttribute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.FaceAttribute)
}

void FaceAttribute::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  confidence_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_Value();
}

FaceAttribute::~FaceAttribute() {
  // @@protoc_insertion_point(destructor:dg.model.FaceAttribute)
  SharedDtor();
}

void FaceAttribute::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_Value()) {
    clear_Value();
  }
  if (this != default_instance_) {
  }
}

void FaceAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceAttribute_descriptor_;
}

const FaceAttribute& FaceAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FaceAttribute* FaceAttribute::default_instance_ = NULL;

FaceAttribute* FaceAttribute::New(::google::protobuf::Arena* arena) const {
  FaceAttribute* n = new FaceAttribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceAttribute::clear_Value() {
// @@protoc_insertion_point(one_of_clear_start:dg.model.FaceAttribute)
  switch(Value_case()) {
    case kValueBool: {
      // No need to clear
      break;
    }
    case kValueInt: {
      // No need to clear
      break;
    }
    case kValueFloat: {
      // No need to clear
      break;
    }
    case kValueString: {
      Value_.valuestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void FaceAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.FaceAttribute)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FaceAttribute, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FaceAttribute*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, confidence_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  clear_Value();
}

bool FaceAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.FaceAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_confidence;
        break;
      }

      // optional float confidence = 2;
      case 2: {
        if (tag == 21) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (tag == 26) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.FaceAttribute.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ValueBool;
        break;
      }

      // optional bool ValueBool = 9;
      case 9: {
        if (tag == 72) {
         parse_ValueBool:
          clear_Value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Value_.valuebool_)));
          set_has_valuebool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ValueInt;
        break;
      }

      // optional int32 ValueInt = 10;
      case 10: {
        if (tag == 80) {
         parse_ValueInt:
          clear_Value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &Value_.valueint_)));
          set_has_valueint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_ValueFloat;
        break;
      }

      // optional float ValueFloat = 11;
      case 11: {
        if (tag == 93) {
         parse_ValueFloat:
          clear_Value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Value_.valuefloat_)));
          set_has_valuefloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ValueString;
        break;
      }

      // optional string ValueString = 12;
      case 12: {
        if (tag == 98) {
         parse_ValueString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valuestring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->valuestring().data(), this->valuestring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.FaceAttribute.ValueString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.FaceAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.FaceAttribute)
  return false;
#undef DO_
}

void FaceAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.FaceAttribute)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // optional string Name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FaceAttribute.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional bool ValueBool = 9;
  if (has_valuebool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->valuebool(), output);
  }

  // optional int32 ValueInt = 10;
  if (has_valueint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->valueint(), output);
  }

  // optional float ValueFloat = 11;
  if (has_valuefloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->valuefloat(), output);
  }

  // optional string ValueString = 12;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FaceAttribute.ValueString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->valuestring(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.FaceAttribute)
}

::google::protobuf::uint8* FaceAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.FaceAttribute)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // optional string Name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FaceAttribute.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional bool ValueBool = 9;
  if (has_valuebool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->valuebool(), target);
  }

  // optional int32 ValueInt = 10;
  if (has_valueint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->valueint(), target);
  }

  // optional float ValueFloat = 11;
  if (has_valuefloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->valuefloat(), target);
  }

  // optional string ValueString = 12;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FaceAttribute.ValueString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->valuestring(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.FaceAttribute)
  return target;
}

int FaceAttribute::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.FaceAttribute)
  int total_size = 0;

  // optional int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional string Name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (Value_case()) {
    // optional bool ValueBool = 9;
    case kValueBool: {
      total_size += 1 + 1;
      break;
    }
    // optional int32 ValueInt = 10;
    case kValueInt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valueint());
      break;
    }
    // optional float ValueFloat = 11;
    case kValueFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional string ValueString = 12;
    case kValueString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valuestring());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.FaceAttribute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FaceAttribute* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.FaceAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.FaceAttribute)
    MergeFrom(*source);
  }
}

void FaceAttribute::MergeFrom(const FaceAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.FaceAttribute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.Value_case()) {
    case kValueBool: {
      set_valuebool(from.valuebool());
      break;
    }
    case kValueInt: {
      set_valueint(from.valueint());
      break;
    }
    case kValueFloat: {
      set_valuefloat(from.valuefloat());
      break;
    }
    case kValueString: {
      set_valuestring(from.valuestring());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FaceAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.FaceAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceAttribute::CopyFrom(const FaceAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.FaceAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceAttribute::IsInitialized() const {

  return true;
}

void FaceAttribute::Swap(FaceAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceAttribute::InternalSwap(FaceAttribute* other) {
  std::swap(id_, other->id_);
  std::swap(confidence_, other->confidence_);
  name_.Swap(&other->name_);
  std::swap(Value_, other->Value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceAttribute_descriptor_;
  metadata.reflection = FaceAttribute_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceAttribute

// optional int32 Id = 1;
void FaceAttribute::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 FaceAttribute::id() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.Id)
  return id_;
}
 void FaceAttribute::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.Id)
}

// optional float confidence = 2;
void FaceAttribute::clear_confidence() {
  confidence_ = 0;
}
 float FaceAttribute::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.confidence)
  return confidence_;
}
 void FaceAttribute::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.confidence)
}

// optional string Name = 3;
void FaceAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FaceAttribute::name() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceAttribute::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.Name)
}
 void FaceAttribute::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FaceAttribute.Name)
}
 void FaceAttribute::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FaceAttribute.Name)
}
 ::std::string* FaceAttribute::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAttribute.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaceAttribute::release_name() {
  // @@protoc_insertion_point(field_release:dg.model.FaceAttribute.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceAttribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dg.model.FaceAttribute.Name)
}

// optional bool ValueBool = 9;
bool FaceAttribute::has_valuebool() const {
  return Value_case() == kValueBool;
}
void FaceAttribute::set_has_valuebool() {
  _oneof_case_[0] = kValueBool;
}
void FaceAttribute::clear_valuebool() {
  if (has_valuebool()) {
    Value_.valuebool_ = false;
    clear_has_Value();
  }
}
 bool FaceAttribute::valuebool() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueBool)
  if (has_valuebool()) {
    return Value_.valuebool_;
  }
  return false;
}
 void FaceAttribute::set_valuebool(bool value) {
  if (!has_valuebool()) {
    clear_Value();
    set_has_valuebool();
  }
  Value_.valuebool_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueBool)
}

// optional int32 ValueInt = 10;
bool FaceAttribute::has_valueint() const {
  return Value_case() == kValueInt;
}
void FaceAttribute::set_has_valueint() {
  _oneof_case_[0] = kValueInt;
}
void FaceAttribute::clear_valueint() {
  if (has_valueint()) {
    Value_.valueint_ = 0;
    clear_has_Value();
  }
}
 ::google::protobuf::int32 FaceAttribute::valueint() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueInt)
  if (has_valueint()) {
    return Value_.valueint_;
  }
  return 0;
}
 void FaceAttribute::set_valueint(::google::protobuf::int32 value) {
  if (!has_valueint()) {
    clear_Value();
    set_has_valueint();
  }
  Value_.valueint_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueInt)
}

// optional float ValueFloat = 11;
bool FaceAttribute::has_valuefloat() const {
  return Value_case() == kValueFloat;
}
void FaceAttribute::set_has_valuefloat() {
  _oneof_case_[0] = kValueFloat;
}
void FaceAttribute::clear_valuefloat() {
  if (has_valuefloat()) {
    Value_.valuefloat_ = 0;
    clear_has_Value();
  }
}
 float FaceAttribute::valuefloat() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueFloat)
  if (has_valuefloat()) {
    return Value_.valuefloat_;
  }
  return 0;
}
 void FaceAttribute::set_valuefloat(float value) {
  if (!has_valuefloat()) {
    clear_Value();
    set_has_valuefloat();
  }
  Value_.valuefloat_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueFloat)
}

// optional string ValueString = 12;
bool FaceAttribute::has_valuestring() const {
  return Value_case() == kValueString;
}
void FaceAttribute::set_has_valuestring() {
  _oneof_case_[0] = kValueString;
}
void FaceAttribute::clear_valuestring() {
  if (has_valuestring()) {
    Value_.valuestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Value();
  }
}
 const ::std::string& FaceAttribute::valuestring() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueString)
  if (has_valuestring()) {
    return Value_.valuestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void FaceAttribute::set_valuestring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueString)
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueString)
}
 void FaceAttribute::set_valuestring(const char* value) {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FaceAttribute.ValueString)
}
 void FaceAttribute::set_valuestring(const char* value, size_t size) {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FaceAttribute.ValueString)
}
 ::std::string* FaceAttribute::mutable_valuestring() {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAttribute.ValueString)
  return Value_.valuestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaceAttribute::release_valuestring() {
  // @@protoc_insertion_point(field_release:dg.model.FaceAttribute.ValueString)
  if (has_valuestring()) {
    clear_has_Value();
    return Value_.valuestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void FaceAttribute::set_allocated_valuestring(::std::string* valuestring) {
  if (!has_valuestring()) {
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Value();
  if (valuestring != NULL) {
    set_has_valuestring();
    Value_.valuestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        valuestring);
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.FaceAttribute.ValueString)
}

bool FaceAttribute::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
void FaceAttribute::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
FaceAttribute::ValueCase FaceAttribute::Value_case() const {
  return FaceAttribute::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kIdFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kURIFieldNumber;
const int Image::kBinDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Image)
}

void Image::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Image::Image(const Image& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Image)
}

void Image::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:dg.model.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.Image)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Image, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Image*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Image.Id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Width;
        break;
      }

      // optional int32 Width = 2;
      case 2: {
        if (tag == 16) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Height;
        break;
      }

      // optional int32 Height = 3;
      case 3: {
        if (tag == 24) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_URI;
        break;
      }

      // optional string URI = 4;
      case 4: {
        if (tag == 34) {
         parse_URI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Image.URI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BinData;
        break;
      }

      // optional string BinData = 5;
      case 5: {
        if (tag == 42) {
         parse_BinData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bindata().data(), this->bindata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Image.BinData"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Image)
  // optional string Id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.Id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 Width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 Height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional string URI = 4;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.URI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // optional string BinData = 5;
  if (this->bindata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bindata().data(), this->bindata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.BinData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bindata(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Image)
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Image)
  // optional string Id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.Id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 Width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 Height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional string URI = 4;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.URI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // optional string BinData = 5;
  if (this->bindata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bindata().data(), this->bindata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.BinData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bindata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Image)
  return target;
}

int Image::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.Image)
  int total_size = 0;

  // optional string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional int32 Width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 Height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional string URI = 4;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // optional string BinData = 5;
  if (this->bindata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bindata());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Image* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.bindata().size() > 0) {

    bindata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindata_);
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {

  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  id_.Swap(&other->id_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  uri_.Swap(&other->uri_);
  bindata_.Swap(&other->bindata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// optional string Id = 1;
void Image::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Image::id() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.Id)
}
 void Image::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.Id)
}
 void Image::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.Id)
}
 ::std::string* Image::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_id() {
  // @@protoc_insertion_point(field_release:dg.model.Image.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.Id)
}

// optional int32 Width = 2;
void Image::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Width)
  return width_;
}
 void Image::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Image.Width)
}

// optional int32 Height = 3;
void Image::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Height)
  return height_;
}
 void Image::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Image.Height)
}

// optional string URI = 4;
void Image::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Image::uri() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.URI)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.URI)
}
 void Image::set_uri(const char* value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.URI)
}
 void Image::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.URI)
}
 ::std::string* Image::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.URI)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_uri() {
  // @@protoc_insertion_point(field_release:dg.model.Image.URI)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.URI)
}

// optional string BinData = 5;
void Image::clear_bindata() {
  bindata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Image::bindata() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.BinData)
  return bindata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_bindata(const ::std::string& value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.BinData)
}
 void Image::set_bindata(const char* value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.BinData)
}
 void Image::set_bindata(const char* value, size_t size) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.BinData)
}
 ::std::string* Image::mutable_bindata() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.BinData)
  return bindata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_bindata() {
  // @@protoc_insertion_point(field_release:dg.model.Image.BinData)
  
  return bindata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_bindata(::std::string* bindata) {
  if (bindata != NULL) {
    
  } else {
    
  }
  bindata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindata);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.BinData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecFace::kIdFieldNumber;
const int RecFace::kImgFieldNumber;
const int RecFace::kFeaturesFieldNumber;
const int RecFace::kConfidenceFieldNumber;
const int RecFace::kAlignScoresFieldNumber;
const int RecFace::kQualitiesFieldNumber;
const int RecFace::kAttributesFieldNumber;
const int RecFace::kDetectResultFieldNumber;
const int RecFace::kAlignResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecFace::RecFace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.RecFace)
}

void RecFace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  img_ = const_cast< ::dg::model::CutboardImage*>(&::dg::model::CutboardImage::default_instance());
}

RecFace::RecFace(const RecFace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.RecFace)
}

void RecFace::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  img_ = NULL;
  features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  alignscores_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  alignscores_.SetEntryDescriptor(
      &::dg::model::RecFace_AlignScoresEntry_descriptor_);
  qualities_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  qualities_.SetEntryDescriptor(
      &::dg::model::RecFace_QualitiesEntry_descriptor_);
  detectresult_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alignresult_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RecFace::~RecFace() {
  // @@protoc_insertion_point(destructor:dg.model.RecFace)
  SharedDtor();
}

void RecFace::SharedDtor() {
  features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detectresult_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alignresult_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete img_;
  }
}

void RecFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecFace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecFace_descriptor_;
}

const RecFace& RecFace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RecFace* RecFace::default_instance_ = NULL;

RecFace* RecFace::New(::google::protobuf::Arena* arena) const {
  RecFace* n = new RecFace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecFace::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.RecFace)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  detectresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alignresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alignscores_.Clear();
  qualities_.Clear();
  attributes_.Clear();
}

bool RecFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.RecFace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Img;
        break;
      }

      // optional .dg.model.CutboardImage Img = 2;
      case 2: {
        if (tag == 18) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Features;
        break;
      }

      // optional string Features = 3;
      case 3: {
        if (tag == 26) {
         parse_Features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_features()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->features().data(), this->features().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecFace.Features"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 4;
      case 4: {
        if (tag == 37) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AlignScores;
        break;
      }

      // map<string, float> AlignScores = 5;
      case 5: {
        if (tag == 42) {
         parse_AlignScores:
          DO_(input->IncrementRecursionDepth());
         parse_loop_AlignScores:
          ::google::protobuf::scoped_ptr<RecFace_AlignScoresEntry> entry(alignscores_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_alignscores())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecFace.AlignScoresEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_AlignScores;
        if (input->ExpectTag(50)) goto parse_loop_Qualities;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, float> Qualities = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Qualities:
          ::google::protobuf::scoped_ptr<RecFace_QualitiesEntry> entry(qualities_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_qualities())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecFace.QualitiesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_Qualities;
        if (input->ExpectTag(58)) goto parse_loop_Attributes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .dg.model.FaceAttribute Attributes = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_Attributes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_DetectResult;
        break;
      }

      // optional string DetectResult = 8;
      case 8: {
        if (tag == 66) {
         parse_DetectResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detectresult()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detectresult().data(), this->detectresult().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecFace.DetectResult"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_AlignResult;
        break;
      }

      // optional string AlignResult = 9;
      case 9: {
        if (tag == 74) {
         parse_AlignResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alignresult()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alignresult().data(), this->alignresult().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecFace.AlignResult"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.RecFace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.RecFace)
  return false;
#undef DO_
}

void RecFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.RecFace)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .dg.model.CutboardImage Img = 2;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_, output);
  }

  // optional string Features = 3;
  if (this->features().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecFace.Features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->features(), output);
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }

  // map<string, float> AlignScores = 5;
  {
    ::google::protobuf::scoped_ptr<RecFace_AlignScoresEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->alignscores().begin();
        it != this->alignscores().end(); ++it) {
      entry.reset(alignscores_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          5, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.RecFace.AlignScoresEntry.key");
    }
  }

  // map<string, float> Qualities = 6;
  {
    ::google::protobuf::scoped_ptr<RecFace_QualitiesEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->qualities().begin();
        it != this->qualities().end(); ++it) {
      entry.reset(qualities_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          6, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.RecFace.QualitiesEntry.key");
    }
  }

  // repeated .dg.model.FaceAttribute Attributes = 7;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attributes(i), output);
  }

  // optional string DetectResult = 8;
  if (this->detectresult().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detectresult().data(), this->detectresult().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecFace.DetectResult");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->detectresult(), output);
  }

  // optional string AlignResult = 9;
  if (this->alignresult().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alignresult().data(), this->alignresult().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecFace.AlignResult");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->alignresult(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.RecFace)
}

::google::protobuf::uint8* RecFace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.RecFace)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .dg.model.CutboardImage Img = 2;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->img_, target);
  }

  // optional string Features = 3;
  if (this->features().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecFace.Features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->features(), target);
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }

  // map<string, float> AlignScores = 5;
  {
    ::google::protobuf::scoped_ptr<RecFace_AlignScoresEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->alignscores().begin();
        it != this->alignscores().end(); ++it) {
      entry.reset(alignscores_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              5, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.RecFace.AlignScoresEntry.key");
    }
  }

  // map<string, float> Qualities = 6;
  {
    ::google::protobuf::scoped_ptr<RecFace_QualitiesEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->qualities().begin();
        it != this->qualities().end(); ++it) {
      entry.reset(qualities_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              6, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.RecFace.QualitiesEntry.key");
    }
  }

  // repeated .dg.model.FaceAttribute Attributes = 7;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attributes(i), target);
  }

  // optional string DetectResult = 8;
  if (this->detectresult().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detectresult().data(), this->detectresult().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecFace.DetectResult");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->detectresult(), target);
  }

  // optional string AlignResult = 9;
  if (this->alignresult().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alignresult().data(), this->alignresult().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecFace.AlignResult");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->alignresult(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.RecFace)
  return target;
}

int RecFace::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.RecFace)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .dg.model.CutboardImage Img = 2;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional string Features = 3;
  if (this->features().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->features());
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional string DetectResult = 8;
  if (this->detectresult().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detectresult());
  }

  // optional string AlignResult = 9;
  if (this->alignresult().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alignresult());
  }

  // map<string, float> AlignScores = 5;
  total_size += 1 * this->alignscores_size();
  {
    ::google::protobuf::scoped_ptr<RecFace_AlignScoresEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->alignscores().begin();
        it != this->alignscores().end(); ++it) {
      entry.reset(alignscores_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, float> Qualities = 6;
  total_size += 1 * this->qualities_size();
  {
    ::google::protobuf::scoped_ptr<RecFace_QualitiesEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->qualities().begin();
        it != this->qualities().end(); ++it) {
      entry.reset(qualities_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .dg.model.FaceAttribute Attributes = 7;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecFace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.RecFace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecFace* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecFace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.RecFace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.RecFace)
    MergeFrom(*source);
  }
}

void RecFace::MergeFrom(const RecFace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.RecFace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  alignscores_.MergeFrom(from.alignscores_);
  qualities_.MergeFrom(from.qualities_);
  attributes_.MergeFrom(from.attributes_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_img()) {
    mutable_img()->::dg::model::CutboardImage::MergeFrom(from.img());
  }
  if (from.features().size() > 0) {

    features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.features_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.detectresult().size() > 0) {

    detectresult_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detectresult_);
  }
  if (from.alignresult().size() > 0) {

    alignresult_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alignresult_);
  }
}

void RecFace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.RecFace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecFace::CopyFrom(const RecFace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.RecFace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecFace::IsInitialized() const {

  return true;
}

void RecFace::Swap(RecFace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecFace::InternalSwap(RecFace* other) {
  std::swap(id_, other->id_);
  std::swap(img_, other->img_);
  features_.Swap(&other->features_);
  std::swap(confidence_, other->confidence_);
  alignscores_.Swap(&other->alignscores_);
  qualities_.Swap(&other->qualities_);
  attributes_.UnsafeArenaSwap(&other->attributes_);
  detectresult_.Swap(&other->detectresult_);
  alignresult_.Swap(&other->alignresult_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecFace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecFace_descriptor_;
  metadata.reflection = RecFace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecFace

// optional int64 Id = 1;
void RecFace::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecFace::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Id)
  return id_;
}
 void RecFace::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Id)
}

// optional .dg.model.CutboardImage Img = 2;
bool RecFace::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void RecFace::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::dg::model::CutboardImage& RecFace::img() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::dg::model::CutboardImage* RecFace::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Img)
  return img_;
}
::dg::model::CutboardImage* RecFace::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.RecFace.Img)
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void RecFace::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.Img)
}

// optional string Features = 3;
void RecFace::clear_features() {
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecFace::features() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Features)
  return features_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecFace::set_features(const ::std::string& value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Features)
}
 void RecFace::set_features(const char* value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecFace.Features)
}
 void RecFace::set_features(const char* value, size_t size) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecFace.Features)
}
 ::std::string* RecFace::mutable_features() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Features)
  return features_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecFace::release_features() {
  // @@protoc_insertion_point(field_release:dg.model.RecFace.Features)
  
  return features_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecFace::set_allocated_features(::std::string* features) {
  if (features != NULL) {
    
  } else {
    
  }
  features_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), features);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.Features)
}

// optional float Confidence = 4;
void RecFace::clear_confidence() {
  confidence_ = 0;
}
 float RecFace::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Confidence)
  return confidence_;
}
 void RecFace::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Confidence)
}

// map<string, float> AlignScores = 5;
int RecFace::alignscores_size() const {
  return alignscores_.size();
}
void RecFace::clear_alignscores() {
  alignscores_.Clear();
}
 const ::google::protobuf::Map< ::std::string, float >&
RecFace::alignscores() const {
  // @@protoc_insertion_point(field_map:dg.model.RecFace.AlignScores)
  return alignscores_.GetMap();
}
 ::google::protobuf::Map< ::std::string, float >*
RecFace::mutable_alignscores() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.RecFace.AlignScores)
  return alignscores_.MutableMap();
}

// map<string, float> Qualities = 6;
int RecFace::qualities_size() const {
  return qualities_.size();
}
void RecFace::clear_qualities() {
  qualities_.Clear();
}
 const ::google::protobuf::Map< ::std::string, float >&
RecFace::qualities() const {
  // @@protoc_insertion_point(field_map:dg.model.RecFace.Qualities)
  return qualities_.GetMap();
}
 ::google::protobuf::Map< ::std::string, float >*
RecFace::mutable_qualities() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.RecFace.Qualities)
  return qualities_.MutableMap();
}

// repeated .dg.model.FaceAttribute Attributes = 7;
int RecFace::attributes_size() const {
  return attributes_.size();
}
void RecFace::clear_attributes() {
  attributes_.Clear();
}
const ::dg::model::FaceAttribute& RecFace::attributes(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Attributes)
  return attributes_.Get(index);
}
::dg::model::FaceAttribute* RecFace::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Attributes)
  return attributes_.Mutable(index);
}
::dg::model::FaceAttribute* RecFace::add_attributes() {
  // @@protoc_insertion_point(field_add:dg.model.RecFace.Attributes)
  return attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >*
RecFace::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecFace.Attributes)
  return &attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >&
RecFace::attributes() const {
  // @@protoc_insertion_point(field_list:dg.model.RecFace.Attributes)
  return attributes_;
}

// optional string DetectResult = 8;
void RecFace::clear_detectresult() {
  detectresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecFace::detectresult() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.DetectResult)
  return detectresult_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecFace::set_detectresult(const ::std::string& value) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecFace.DetectResult)
}
 void RecFace::set_detectresult(const char* value) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecFace.DetectResult)
}
 void RecFace::set_detectresult(const char* value, size_t size) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecFace.DetectResult)
}
 ::std::string* RecFace::mutable_detectresult() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.DetectResult)
  return detectresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecFace::release_detectresult() {
  // @@protoc_insertion_point(field_release:dg.model.RecFace.DetectResult)
  
  return detectresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecFace::set_allocated_detectresult(::std::string* detectresult) {
  if (detectresult != NULL) {
    
  } else {
    
  }
  detectresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detectresult);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.DetectResult)
}

// optional string AlignResult = 9;
void RecFace::clear_alignresult() {
  alignresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecFace::alignresult() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.AlignResult)
  return alignresult_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecFace::set_alignresult(const ::std::string& value) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecFace.AlignResult)
}
 void RecFace::set_alignresult(const char* value) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecFace.AlignResult)
}
 void RecFace::set_alignresult(const char* value, size_t size) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecFace.AlignResult)
}
 ::std::string* RecFace::mutable_alignresult() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.AlignResult)
  return alignresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecFace::release_alignresult() {
  // @@protoc_insertion_point(field_release:dg.model.RecFace.AlignResult)
  
  return alignresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecFace::set_allocated_alignresult(::std::string* alignresult) {
  if (alignresult != NULL) {
    
  } else {
    
  }
  alignresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alignresult);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.AlignResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameAndConfidence::kIdFieldNumber;
const int NameAndConfidence::kNameFieldNumber;
const int NameAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameAndConfidence::NameAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.NameAndConfidence)
}

void NameAndConfidence::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NameAndConfidence::NameAndConfidence(const NameAndConfidence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.NameAndConfidence)
}

void NameAndConfidence::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

NameAndConfidence::~NameAndConfidence() {
  // @@protoc_insertion_point(destructor:dg.model.NameAndConfidence)
  SharedDtor();
}

void NameAndConfidence::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NameAndConfidence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameAndConfidence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameAndConfidence_descriptor_;
}

const NameAndConfidence& NameAndConfidence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NameAndConfidence* NameAndConfidence::default_instance_ = NULL;

NameAndConfidence* NameAndConfidence::New(::google::protobuf::Arena* arena) const {
  NameAndConfidence* n = new NameAndConfidence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.NameAndConfidence)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NameAndConfidence, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NameAndConfidence*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, confidence_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool NameAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.NameAndConfidence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.NameAndConfidence.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 3;
      case 3: {
        if (tag == 29) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.NameAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.NameAndConfidence)
  return false;
#undef DO_
}

void NameAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.NameAndConfidence)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.NameAndConfidence.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.NameAndConfidence)
}

::google::protobuf::uint8* NameAndConfidence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.NameAndConfidence)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.NameAndConfidence.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.NameAndConfidence)
  return target;
}

int NameAndConfidence::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.NameAndConfidence)
  int total_size = 0;

  // optional int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.NameAndConfidence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NameAndConfidence* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NameAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.NameAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.NameAndConfidence)
    MergeFrom(*source);
  }
}

void NameAndConfidence::MergeFrom(const NameAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.NameAndConfidence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void NameAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.NameAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameAndConfidence::CopyFrom(const NameAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.NameAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameAndConfidence::IsInitialized() const {

  return true;
}

void NameAndConfidence::Swap(NameAndConfidence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameAndConfidence::InternalSwap(NameAndConfidence* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameAndConfidence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameAndConfidence_descriptor_;
  metadata.reflection = NameAndConfidence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameAndConfidence

// optional int32 Id = 1;
void NameAndConfidence::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 NameAndConfidence::id() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Id)
  return id_;
}
 void NameAndConfidence::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Id)
}

// optional string Name = 2;
void NameAndConfidence::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NameAndConfidence::name() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameAndConfidence::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Name)
}
 void NameAndConfidence::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.NameAndConfidence.Name)
}
 void NameAndConfidence::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.NameAndConfidence.Name)
}
 ::std::string* NameAndConfidence::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.NameAndConfidence.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameAndConfidence::release_name() {
  // @@protoc_insertion_point(field_release:dg.model.NameAndConfidence.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameAndConfidence::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dg.model.NameAndConfidence.Name)
}

// optional float Confidence = 3;
void NameAndConfidence::clear_confidence() {
  confidence_ = 0;
}
 float NameAndConfidence::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Confidence)
  return confidence_;
}
 void NameAndConfidence::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryAndFeature::kIdFieldNumber;
const int CategoryAndFeature::kCategoryNameFieldNumber;
const int CategoryAndFeature::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryAndFeature::CategoryAndFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.CategoryAndFeature)
}

void CategoryAndFeature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CategoryAndFeature::CategoryAndFeature(const CategoryAndFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.CategoryAndFeature)
}

void CategoryAndFeature::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  categoryname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CategoryAndFeature::~CategoryAndFeature() {
  // @@protoc_insertion_point(destructor:dg.model.CategoryAndFeature)
  SharedDtor();
}

void CategoryAndFeature::SharedDtor() {
  categoryname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CategoryAndFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryAndFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CategoryAndFeature_descriptor_;
}

const CategoryAndFeature& CategoryAndFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CategoryAndFeature* CategoryAndFeature::default_instance_ = NULL;

CategoryAndFeature* CategoryAndFeature::New(::google::protobuf::Arena* arena) const {
  CategoryAndFeature* n = new CategoryAndFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryAndFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.CategoryAndFeature)
  id_ = 0;
  categoryname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_.Clear();
}

bool CategoryAndFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.CategoryAndFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CategoryName;
        break;
      }

      // optional string CategoryName = 2;
      case 2: {
        if (tag == 18) {
         parse_CategoryName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_categoryname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->categoryname().data(), this->categoryname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.CategoryAndFeature.CategoryName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Items;
        break;
      }

      // repeated .dg.model.NameAndConfidence Items = 3;
      case 3: {
        if (tag == 26) {
         parse_Items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.CategoryAndFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.CategoryAndFeature)
  return false;
#undef DO_
}

void CategoryAndFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.CategoryAndFeature)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string CategoryName = 2;
  if (this->categoryname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->categoryname().data(), this->categoryname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.CategoryAndFeature.CategoryName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->categoryname(), output);
  }

  // repeated .dg.model.NameAndConfidence Items = 3;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.CategoryAndFeature)
}

::google::protobuf::uint8* CategoryAndFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.CategoryAndFeature)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string CategoryName = 2;
  if (this->categoryname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->categoryname().data(), this->categoryname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.CategoryAndFeature.CategoryName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->categoryname(), target);
  }

  // repeated .dg.model.NameAndConfidence Items = 3;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.CategoryAndFeature)
  return target;
}

int CategoryAndFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.CategoryAndFeature)
  int total_size = 0;

  // optional int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string CategoryName = 2;
  if (this->categoryname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->categoryname());
  }

  // repeated .dg.model.NameAndConfidence Items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryAndFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.CategoryAndFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CategoryAndFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryAndFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.CategoryAndFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.CategoryAndFeature)
    MergeFrom(*source);
  }
}

void CategoryAndFeature::MergeFrom(const CategoryAndFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.CategoryAndFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.categoryname().size() > 0) {

    categoryname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.categoryname_);
  }
}

void CategoryAndFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.CategoryAndFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryAndFeature::CopyFrom(const CategoryAndFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.CategoryAndFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryAndFeature::IsInitialized() const {

  return true;
}

void CategoryAndFeature::Swap(CategoryAndFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryAndFeature::InternalSwap(CategoryAndFeature* other) {
  std::swap(id_, other->id_);
  categoryname_.Swap(&other->categoryname_);
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryAndFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CategoryAndFeature_descriptor_;
  metadata.reflection = CategoryAndFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoryAndFeature

// optional int32 Id = 1;
void CategoryAndFeature::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 CategoryAndFeature::id() const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.Id)
  return id_;
}
 void CategoryAndFeature::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.CategoryAndFeature.Id)
}

// optional string CategoryName = 2;
void CategoryAndFeature::clear_categoryname() {
  categoryname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CategoryAndFeature::categoryname() const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.CategoryName)
  return categoryname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CategoryAndFeature::set_categoryname(const ::std::string& value) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.CategoryAndFeature.CategoryName)
}
 void CategoryAndFeature::set_categoryname(const char* value) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.CategoryAndFeature.CategoryName)
}
 void CategoryAndFeature::set_categoryname(const char* value, size_t size) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.CategoryAndFeature.CategoryName)
}
 ::std::string* CategoryAndFeature::mutable_categoryname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.CategoryAndFeature.CategoryName)
  return categoryname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CategoryAndFeature::release_categoryname() {
  // @@protoc_insertion_point(field_release:dg.model.CategoryAndFeature.CategoryName)
  
  return categoryname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CategoryAndFeature::set_allocated_categoryname(::std::string* categoryname) {
  if (categoryname != NULL) {
    
  } else {
    
  }
  categoryname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), categoryname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.CategoryAndFeature.CategoryName)
}

// repeated .dg.model.NameAndConfidence Items = 3;
int CategoryAndFeature::items_size() const {
  return items_.size();
}
void CategoryAndFeature::clear_items() {
  items_.Clear();
}
const ::dg::model::NameAndConfidence& CategoryAndFeature::items(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.Items)
  return items_.Get(index);
}
::dg::model::NameAndConfidence* CategoryAndFeature::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.CategoryAndFeature.Items)
  return items_.Mutable(index);
}
::dg::model::NameAndConfidence* CategoryAndFeature::add_items() {
  // @@protoc_insertion_point(field_add:dg.model.CategoryAndFeature.Items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >*
CategoryAndFeature::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.CategoryAndFeature.Items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >&
CategoryAndFeature::items() const {
  // @@protoc_insertion_point(field_list:dg.model.CategoryAndFeature.Items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeopleAttr::kSexFieldNumber;
const int PeopleAttr::kAgeFieldNumber;
const int PeopleAttr::kNationalFieldNumber;
const int PeopleAttr::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeopleAttr::PeopleAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.PeopleAttr)
}

void PeopleAttr::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  sex_ = const_cast< ::dg::model::NameAndConfidence*>(&::dg::model::NameAndConfidence::default_instance());
  age_ = const_cast< ::dg::model::NameAndConfidence*>(&::dg::model::NameAndConfidence::default_instance());
  national_ = const_cast< ::dg::model::NameAndConfidence*>(&::dg::model::NameAndConfidence::default_instance());
}

PeopleAttr::PeopleAttr(const PeopleAttr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.PeopleAttr)
}

void PeopleAttr::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sex_ = NULL;
  age_ = NULL;
  national_ = NULL;
}

PeopleAttr::~PeopleAttr() {
  // @@protoc_insertion_point(destructor:dg.model.PeopleAttr)
  SharedDtor();
}

void PeopleAttr::SharedDtor() {
  if (this != default_instance_) {
    delete sex_;
    delete age_;
    delete national_;
  }
}

void PeopleAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeopleAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeopleAttr_descriptor_;
}

const PeopleAttr& PeopleAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PeopleAttr* PeopleAttr::default_instance_ = NULL;

PeopleAttr* PeopleAttr::New(::google::protobuf::Arena* arena) const {
  PeopleAttr* n = new PeopleAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeopleAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.PeopleAttr)
  if (GetArenaNoVirtual() == NULL && sex_ != NULL) delete sex_;
  sex_ = NULL;
  if (GetArenaNoVirtual() == NULL && age_ != NULL) delete age_;
  age_ = NULL;
  if (GetArenaNoVirtual() == NULL && national_ != NULL) delete national_;
  national_ = NULL;
  category_.Clear();
}

bool PeopleAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.PeopleAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.NameAndConfidence Sex = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Age;
        break;
      }

      // optional .dg.model.NameAndConfidence Age = 2;
      case 2: {
        if (tag == 18) {
         parse_Age:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_age()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_National;
        break;
      }

      // optional .dg.model.NameAndConfidence National = 3;
      case 3: {
        if (tag == 26) {
         parse_National:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_national()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Category;
        break;
      }

      // repeated .dg.model.CategoryAndFeature Category = 4;
      case 4: {
        if (tag == 34) {
         parse_Category:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_category()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_Category;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.PeopleAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.PeopleAttr)
  return false;
#undef DO_
}

void PeopleAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.PeopleAttr)
  // optional .dg.model.NameAndConfidence Sex = 1;
  if (this->has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sex_, output);
  }

  // optional .dg.model.NameAndConfidence Age = 2;
  if (this->has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->age_, output);
  }

  // optional .dg.model.NameAndConfidence National = 3;
  if (this->has_national()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->national_, output);
  }

  // repeated .dg.model.CategoryAndFeature Category = 4;
  for (unsigned int i = 0, n = this->category_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->category(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.PeopleAttr)
}

::google::protobuf::uint8* PeopleAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.PeopleAttr)
  // optional .dg.model.NameAndConfidence Sex = 1;
  if (this->has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->sex_, target);
  }

  // optional .dg.model.NameAndConfidence Age = 2;
  if (this->has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->age_, target);
  }

  // optional .dg.model.NameAndConfidence National = 3;
  if (this->has_national()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->national_, target);
  }

  // repeated .dg.model.CategoryAndFeature Category = 4;
  for (unsigned int i = 0, n = this->category_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->category(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.PeopleAttr)
  return target;
}

int PeopleAttr::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.PeopleAttr)
  int total_size = 0;

  // optional .dg.model.NameAndConfidence Sex = 1;
  if (this->has_sex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sex_);
  }

  // optional .dg.model.NameAndConfidence Age = 2;
  if (this->has_age()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->age_);
  }

  // optional .dg.model.NameAndConfidence National = 3;
  if (this->has_national()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->national_);
  }

  // repeated .dg.model.CategoryAndFeature Category = 4;
  total_size += 1 * this->category_size();
  for (int i = 0; i < this->category_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeopleAttr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.PeopleAttr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeopleAttr* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PeopleAttr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.PeopleAttr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.PeopleAttr)
    MergeFrom(*source);
  }
}

void PeopleAttr::MergeFrom(const PeopleAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.PeopleAttr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  category_.MergeFrom(from.category_);
  if (from.has_sex()) {
    mutable_sex()->::dg::model::NameAndConfidence::MergeFrom(from.sex());
  }
  if (from.has_age()) {
    mutable_age()->::dg::model::NameAndConfidence::MergeFrom(from.age());
  }
  if (from.has_national()) {
    mutable_national()->::dg::model::NameAndConfidence::MergeFrom(from.national());
  }
}

void PeopleAttr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.PeopleAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeopleAttr::CopyFrom(const PeopleAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.PeopleAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeopleAttr::IsInitialized() const {

  return true;
}

void PeopleAttr::Swap(PeopleAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeopleAttr::InternalSwap(PeopleAttr* other) {
  std::swap(sex_, other->sex_);
  std::swap(age_, other->age_);
  std::swap(national_, other->national_);
  category_.UnsafeArenaSwap(&other->category_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeopleAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeopleAttr_descriptor_;
  metadata.reflection = PeopleAttr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeopleAttr

// optional .dg.model.NameAndConfidence Sex = 1;
bool PeopleAttr::has_sex() const {
  return !_is_default_instance_ && sex_ != NULL;
}
void PeopleAttr::clear_sex() {
  if (GetArenaNoVirtual() == NULL && sex_ != NULL) delete sex_;
  sex_ = NULL;
}
const ::dg::model::NameAndConfidence& PeopleAttr::sex() const {
  // @@protoc_insertion_point(field_get:dg.model.PeopleAttr.Sex)
  return sex_ != NULL ? *sex_ : *default_instance_->sex_;
}
::dg::model::NameAndConfidence* PeopleAttr::mutable_sex() {
  
  if (sex_ == NULL) {
    sex_ = new ::dg::model::NameAndConfidence;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.PeopleAttr.Sex)
  return sex_;
}
::dg::model::NameAndConfidence* PeopleAttr::release_sex() {
  // @@protoc_insertion_point(field_release:dg.model.PeopleAttr.Sex)
  
  ::dg::model::NameAndConfidence* temp = sex_;
  sex_ = NULL;
  return temp;
}
void PeopleAttr::set_allocated_sex(::dg::model::NameAndConfidence* sex) {
  delete sex_;
  sex_ = sex;
  if (sex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.PeopleAttr.Sex)
}

// optional .dg.model.NameAndConfidence Age = 2;
bool PeopleAttr::has_age() const {
  return !_is_default_instance_ && age_ != NULL;
}
void PeopleAttr::clear_age() {
  if (GetArenaNoVirtual() == NULL && age_ != NULL) delete age_;
  age_ = NULL;
}
const ::dg::model::NameAndConfidence& PeopleAttr::age() const {
  // @@protoc_insertion_point(field_get:dg.model.PeopleAttr.Age)
  return age_ != NULL ? *age_ : *default_instance_->age_;
}
::dg::model::NameAndConfidence* PeopleAttr::mutable_age() {
  
  if (age_ == NULL) {
    age_ = new ::dg::model::NameAndConfidence;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.PeopleAttr.Age)
  return age_;
}
::dg::model::NameAndConfidence* PeopleAttr::release_age() {
  // @@protoc_insertion_point(field_release:dg.model.PeopleAttr.Age)
  
  ::dg::model::NameAndConfidence* temp = age_;
  age_ = NULL;
  return temp;
}
void PeopleAttr::set_allocated_age(::dg::model::NameAndConfidence* age) {
  delete age_;
  age_ = age;
  if (age) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.PeopleAttr.Age)
}

// optional .dg.model.NameAndConfidence National = 3;
bool PeopleAttr::has_national() const {
  return !_is_default_instance_ && national_ != NULL;
}
void PeopleAttr::clear_national() {
  if (GetArenaNoVirtual() == NULL && national_ != NULL) delete national_;
  national_ = NULL;
}
const ::dg::model::NameAndConfidence& PeopleAttr::national() const {
  // @@protoc_insertion_point(field_get:dg.model.PeopleAttr.National)
  return national_ != NULL ? *national_ : *default_instance_->national_;
}
::dg::model::NameAndConfidence* PeopleAttr::mutable_national() {
  
  if (national_ == NULL) {
    national_ = new ::dg::model::NameAndConfidence;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.PeopleAttr.National)
  return national_;
}
::dg::model::NameAndConfidence* PeopleAttr::release_national() {
  // @@protoc_insertion_point(field_release:dg.model.PeopleAttr.National)
  
  ::dg::model::NameAndConfidence* temp = national_;
  national_ = NULL;
  return temp;
}
void PeopleAttr::set_allocated_national(::dg::model::NameAndConfidence* national) {
  delete national_;
  national_ = national;
  if (national) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.PeopleAttr.National)
}

// repeated .dg.model.CategoryAndFeature Category = 4;
int PeopleAttr::category_size() const {
  return category_.size();
}
void PeopleAttr::clear_category() {
  category_.Clear();
}
const ::dg::model::CategoryAndFeature& PeopleAttr::category(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.PeopleAttr.Category)
  return category_.Get(index);
}
::dg::model::CategoryAndFeature* PeopleAttr::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.PeopleAttr.Category)
  return category_.Mutable(index);
}
::dg::model::CategoryAndFeature* PeopleAttr::add_category() {
  // @@protoc_insertion_point(field_add:dg.model.PeopleAttr.Category)
  return category_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >*
PeopleAttr::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.PeopleAttr.Category)
  return &category_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >&
PeopleAttr::category() const {
  // @@protoc_insertion_point(field_list:dg.model.PeopleAttr.Category)
  return category_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecVehicle::kIdFieldNumber;
const int RecVehicle::kModelTypeFieldNumber;
const int RecVehicle::kColorFieldNumber;
const int RecVehicle::kPlateFieldNumber;
const int RecVehicle::kImgFieldNumber;
const int RecVehicle::kSymbolsFieldNumber;
const int RecVehicle::kFeaturesFieldNumber;
const int RecVehicle::kVehicleTypeFieldNumber;
const int RecVehicle::kVehicleTypeNameFieldNumber;
const int RecVehicle::kPlatesFieldNumber;
const int RecVehicle::kPassengersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecVehicle::RecVehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.RecVehicle)
}

void RecVehicle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  modeltype_ = const_cast< ::dg::model::VehicleModelType*>(&::dg::model::VehicleModelType::default_instance());
  color_ = const_cast< ::dg::model::Color*>(&::dg::model::Color::default_instance());
  plate_ = const_cast< ::dg::model::LicensePlate*>(&::dg::model::LicensePlate::default_instance());
  img_ = const_cast< ::dg::model::CutboardImage*>(&::dg::model::CutboardImage::default_instance());
}

RecVehicle::RecVehicle(const RecVehicle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.RecVehicle)
}

void RecVehicle::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  modeltype_ = NULL;
  color_ = NULL;
  plate_ = NULL;
  img_ = NULL;
  features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicletype_ = 0;
  vehicletypename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RecVehicle::~RecVehicle() {
  // @@protoc_insertion_point(destructor:dg.model.RecVehicle)
  SharedDtor();
}

void RecVehicle::SharedDtor() {
  features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicletypename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete modeltype_;
    delete color_;
    delete plate_;
    delete img_;
  }
}

void RecVehicle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecVehicle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecVehicle_descriptor_;
}

const RecVehicle& RecVehicle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RecVehicle* RecVehicle::default_instance_ = NULL;

RecVehicle* RecVehicle::New(::google::protobuf::Arena* arena) const {
  RecVehicle* n = new RecVehicle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.RecVehicle)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && modeltype_ != NULL) delete modeltype_;
  modeltype_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && plate_ != NULL) delete plate_;
  plate_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicletype_ = 0;
  vehicletypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbols_.Clear();
  plates_.Clear();
  passengers_.Clear();
}

bool RecVehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.RecVehicle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ModelType;
        break;
      }

      // optional .dg.model.VehicleModelType ModelType = 2;
      case 2: {
        if (tag == 18) {
         parse_ModelType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modeltype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Color;
        break;
      }

      // optional .dg.model.Color Color = 3;
      case 3: {
        if (tag == 26) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Plate;
        break;
      }

      // optional .dg.model.LicensePlate Plate = 4;
      case 4: {
        if (tag == 34) {
         parse_Plate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Img;
        break;
      }

      // optional .dg.model.CutboardImage Img = 5;
      case 5: {
        if (tag == 42) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Symbols;
        break;
      }

      // repeated .dg.model.VehicleSymbol Symbols = 6;
      case 6: {
        if (tag == 50) {
         parse_Symbols:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_Symbols;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_Features;
        break;
      }

      // optional string Features = 7;
      case 7: {
        if (tag == 58) {
         parse_Features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_features()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->features().data(), this->features().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecVehicle.Features"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_VehicleType;
        break;
      }

      // optional .dg.model.ObjType VehicleType = 8;
      case 8: {
        if (tag == 64) {
         parse_VehicleType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vehicletype(static_cast< ::dg::model::ObjType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_VehicleTypeName;
        break;
      }

      // optional string VehicleTypeName = 9;
      case 9: {
        if (tag == 74) {
         parse_VehicleTypeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicletypename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicletypename().data(), this->vehicletypename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecVehicle.VehicleTypeName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Plates;
        break;
      }

      // repeated .dg.model.LicensePlate Plates = 10;
      case 10: {
        if (tag == 82) {
         parse_Plates:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Plates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_plates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_Plates;
        if (input->ExpectTag(90)) goto parse_loop_Passengers;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .dg.model.Passenger Passengers = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Passengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_passengers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_Passengers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.RecVehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.RecVehicle)
  return false;
#undef DO_
}

void RecVehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.RecVehicle)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .dg.model.VehicleModelType ModelType = 2;
  if (this->has_modeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->modeltype_, output);
  }

  // optional .dg.model.Color Color = 3;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->color_, output);
  }

  // optional .dg.model.LicensePlate Plate = 4;
  if (this->has_plate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->plate_, output);
  }

  // optional .dg.model.CutboardImage Img = 5;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->img_, output);
  }

  // repeated .dg.model.VehicleSymbol Symbols = 6;
  for (unsigned int i = 0, n = this->symbols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->symbols(i), output);
  }

  // optional string Features = 7;
  if (this->features().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecVehicle.Features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->features(), output);
  }

  // optional .dg.model.ObjType VehicleType = 8;
  if (this->vehicletype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->vehicletype(), output);
  }

  // optional string VehicleTypeName = 9;
  if (this->vehicletypename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicletypename().data(), this->vehicletypename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecVehicle.VehicleTypeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->vehicletypename(), output);
  }

  // repeated .dg.model.LicensePlate Plates = 10;
  for (unsigned int i = 0, n = this->plates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->plates(i), output);
  }

  // repeated .dg.model.Passenger Passengers = 11;
  for (unsigned int i = 0, n = this->passengers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->passengers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.RecVehicle)
}

::google::protobuf::uint8* RecVehicle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.RecVehicle)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .dg.model.VehicleModelType ModelType = 2;
  if (this->has_modeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->modeltype_, target);
  }

  // optional .dg.model.Color Color = 3;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->color_, target);
  }

  // optional .dg.model.LicensePlate Plate = 4;
  if (this->has_plate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->plate_, target);
  }

  // optional .dg.model.CutboardImage Img = 5;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->img_, target);
  }

  // repeated .dg.model.VehicleSymbol Symbols = 6;
  for (unsigned int i = 0, n = this->symbols_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->symbols(i), target);
  }

  // optional string Features = 7;
  if (this->features().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecVehicle.Features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->features(), target);
  }

  // optional .dg.model.ObjType VehicleType = 8;
  if (this->vehicletype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->vehicletype(), target);
  }

  // optional string VehicleTypeName = 9;
  if (this->vehicletypename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicletypename().data(), this->vehicletypename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecVehicle.VehicleTypeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->vehicletypename(), target);
  }

  // repeated .dg.model.LicensePlate Plates = 10;
  for (unsigned int i = 0, n = this->plates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->plates(i), target);
  }

  // repeated .dg.model.Passenger Passengers = 11;
  for (unsigned int i = 0, n = this->passengers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->passengers(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.RecVehicle)
  return target;
}

int RecVehicle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.RecVehicle)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .dg.model.VehicleModelType ModelType = 2;
  if (this->has_modeltype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->modeltype_);
  }

  // optional .dg.model.Color Color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // optional .dg.model.LicensePlate Plate = 4;
  if (this->has_plate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plate_);
  }

  // optional .dg.model.CutboardImage Img = 5;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional string Features = 7;
  if (this->features().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->features());
  }

  // optional .dg.model.ObjType VehicleType = 8;
  if (this->vehicletype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicletype());
  }

  // optional string VehicleTypeName = 9;
  if (this->vehicletypename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicletypename());
  }

  // repeated .dg.model.VehicleSymbol Symbols = 6;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  // repeated .dg.model.LicensePlate Plates = 10;
  total_size += 1 * this->plates_size();
  for (int i = 0; i < this->plates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plates(i));
  }

  // repeated .dg.model.Passenger Passengers = 11;
  total_size += 1 * this->passengers_size();
  for (int i = 0; i < this->passengers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passengers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecVehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.RecVehicle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecVehicle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecVehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.RecVehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.RecVehicle)
    MergeFrom(*source);
  }
}

void RecVehicle::MergeFrom(const RecVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.RecVehicle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  symbols_.MergeFrom(from.symbols_);
  plates_.MergeFrom(from.plates_);
  passengers_.MergeFrom(from.passengers_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_modeltype()) {
    mutable_modeltype()->::dg::model::VehicleModelType::MergeFrom(from.modeltype());
  }
  if (from.has_color()) {
    mutable_color()->::dg::model::Color::MergeFrom(from.color());
  }
  if (from.has_plate()) {
    mutable_plate()->::dg::model::LicensePlate::MergeFrom(from.plate());
  }
  if (from.has_img()) {
    mutable_img()->::dg::model::CutboardImage::MergeFrom(from.img());
  }
  if (from.features().size() > 0) {

    features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.features_);
  }
  if (from.vehicletype() != 0) {
    set_vehicletype(from.vehicletype());
  }
  if (from.vehicletypename().size() > 0) {

    vehicletypename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicletypename_);
  }
}

void RecVehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.RecVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecVehicle::CopyFrom(const RecVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.RecVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecVehicle::IsInitialized() const {

  return true;
}

void RecVehicle::Swap(RecVehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecVehicle::InternalSwap(RecVehicle* other) {
  std::swap(id_, other->id_);
  std::swap(modeltype_, other->modeltype_);
  std::swap(color_, other->color_);
  std::swap(plate_, other->plate_);
  std::swap(img_, other->img_);
  symbols_.UnsafeArenaSwap(&other->symbols_);
  features_.Swap(&other->features_);
  std::swap(vehicletype_, other->vehicletype_);
  vehicletypename_.Swap(&other->vehicletypename_);
  plates_.UnsafeArenaSwap(&other->plates_);
  passengers_.UnsafeArenaSwap(&other->passengers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecVehicle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecVehicle_descriptor_;
  metadata.reflection = RecVehicle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecVehicle

// optional int64 Id = 1;
void RecVehicle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecVehicle::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Id)
  return id_;
}
 void RecVehicle::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVehicle.Id)
}

// optional .dg.model.VehicleModelType ModelType = 2;
bool RecVehicle::has_modeltype() const {
  return !_is_default_instance_ && modeltype_ != NULL;
}
void RecVehicle::clear_modeltype() {
  if (GetArenaNoVirtual() == NULL && modeltype_ != NULL) delete modeltype_;
  modeltype_ = NULL;
}
const ::dg::model::VehicleModelType& RecVehicle::modeltype() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.ModelType)
  return modeltype_ != NULL ? *modeltype_ : *default_instance_->modeltype_;
}
::dg::model::VehicleModelType* RecVehicle::mutable_modeltype() {
  
  if (modeltype_ == NULL) {
    modeltype_ = new ::dg::model::VehicleModelType;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.ModelType)
  return modeltype_;
}
::dg::model::VehicleModelType* RecVehicle::release_modeltype() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.ModelType)
  
  ::dg::model::VehicleModelType* temp = modeltype_;
  modeltype_ = NULL;
  return temp;
}
void RecVehicle::set_allocated_modeltype(::dg::model::VehicleModelType* modeltype) {
  delete modeltype_;
  modeltype_ = modeltype;
  if (modeltype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.ModelType)
}

// optional .dg.model.Color Color = 3;
bool RecVehicle::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void RecVehicle::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::dg::model::Color& RecVehicle::color() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::dg::model::Color* RecVehicle::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::dg::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Color)
  return color_;
}
::dg::model::Color* RecVehicle::release_color() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.Color)
  
  ::dg::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void RecVehicle::set_allocated_color(::dg::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.Color)
}

// optional .dg.model.LicensePlate Plate = 4;
bool RecVehicle::has_plate() const {
  return !_is_default_instance_ && plate_ != NULL;
}
void RecVehicle::clear_plate() {
  if (GetArenaNoVirtual() == NULL && plate_ != NULL) delete plate_;
  plate_ = NULL;
}
const ::dg::model::LicensePlate& RecVehicle::plate() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Plate)
  return plate_ != NULL ? *plate_ : *default_instance_->plate_;
}
::dg::model::LicensePlate* RecVehicle::mutable_plate() {
  
  if (plate_ == NULL) {
    plate_ = new ::dg::model::LicensePlate;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Plate)
  return plate_;
}
::dg::model::LicensePlate* RecVehicle::release_plate() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.Plate)
  
  ::dg::model::LicensePlate* temp = plate_;
  plate_ = NULL;
  return temp;
}
void RecVehicle::set_allocated_plate(::dg::model::LicensePlate* plate) {
  delete plate_;
  plate_ = plate;
  if (plate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.Plate)
}

// optional .dg.model.CutboardImage Img = 5;
bool RecVehicle::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void RecVehicle::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::dg::model::CutboardImage& RecVehicle::img() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::dg::model::CutboardImage* RecVehicle::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Img)
  return img_;
}
::dg::model::CutboardImage* RecVehicle::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.Img)
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void RecVehicle::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.Img)
}

// repeated .dg.model.VehicleSymbol Symbols = 6;
int RecVehicle::symbols_size() const {
  return symbols_.size();
}
void RecVehicle::clear_symbols() {
  symbols_.Clear();
}
const ::dg::model::VehicleSymbol& RecVehicle::symbols(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Symbols)
  return symbols_.Get(index);
}
::dg::model::VehicleSymbol* RecVehicle::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Symbols)
  return symbols_.Mutable(index);
}
::dg::model::VehicleSymbol* RecVehicle::add_symbols() {
  // @@protoc_insertion_point(field_add:dg.model.RecVehicle.Symbols)
  return symbols_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::VehicleSymbol >*
RecVehicle::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecVehicle.Symbols)
  return &symbols_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::VehicleSymbol >&
RecVehicle::symbols() const {
  // @@protoc_insertion_point(field_list:dg.model.RecVehicle.Symbols)
  return symbols_;
}

// optional string Features = 7;
void RecVehicle::clear_features() {
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecVehicle::features() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Features)
  return features_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecVehicle::set_features(const ::std::string& value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecVehicle.Features)
}
 void RecVehicle::set_features(const char* value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecVehicle.Features)
}
 void RecVehicle::set_features(const char* value, size_t size) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecVehicle.Features)
}
 ::std::string* RecVehicle::mutable_features() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Features)
  return features_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecVehicle::release_features() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.Features)
  
  return features_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecVehicle::set_allocated_features(::std::string* features) {
  if (features != NULL) {
    
  } else {
    
  }
  features_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), features);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.Features)
}

// optional .dg.model.ObjType VehicleType = 8;
void RecVehicle::clear_vehicletype() {
  vehicletype_ = 0;
}
 ::dg::model::ObjType RecVehicle::vehicletype() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.VehicleType)
  return static_cast< ::dg::model::ObjType >(vehicletype_);
}
 void RecVehicle::set_vehicletype(::dg::model::ObjType value) {
  
  vehicletype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecVehicle.VehicleType)
}

// optional string VehicleTypeName = 9;
void RecVehicle::clear_vehicletypename() {
  vehicletypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecVehicle::vehicletypename() const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.VehicleTypeName)
  return vehicletypename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecVehicle::set_vehicletypename(const ::std::string& value) {
  
  vehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecVehicle.VehicleTypeName)
}
 void RecVehicle::set_vehicletypename(const char* value) {
  
  vehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecVehicle.VehicleTypeName)
}
 void RecVehicle::set_vehicletypename(const char* value, size_t size) {
  
  vehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecVehicle.VehicleTypeName)
}
 ::std::string* RecVehicle::mutable_vehicletypename() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.VehicleTypeName)
  return vehicletypename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecVehicle::release_vehicletypename() {
  // @@protoc_insertion_point(field_release:dg.model.RecVehicle.VehicleTypeName)
  
  return vehicletypename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecVehicle::set_allocated_vehicletypename(::std::string* vehicletypename) {
  if (vehicletypename != NULL) {
    
  } else {
    
  }
  vehicletypename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicletypename);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecVehicle.VehicleTypeName)
}

// repeated .dg.model.LicensePlate Plates = 10;
int RecVehicle::plates_size() const {
  return plates_.size();
}
void RecVehicle::clear_plates() {
  plates_.Clear();
}
const ::dg::model::LicensePlate& RecVehicle::plates(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Plates)
  return plates_.Get(index);
}
::dg::model::LicensePlate* RecVehicle::mutable_plates(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Plates)
  return plates_.Mutable(index);
}
::dg::model::LicensePlate* RecVehicle::add_plates() {
  // @@protoc_insertion_point(field_add:dg.model.RecVehicle.Plates)
  return plates_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::LicensePlate >*
RecVehicle::mutable_plates() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecVehicle.Plates)
  return &plates_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::LicensePlate >&
RecVehicle::plates() const {
  // @@protoc_insertion_point(field_list:dg.model.RecVehicle.Plates)
  return plates_;
}

// repeated .dg.model.Passenger Passengers = 11;
int RecVehicle::passengers_size() const {
  return passengers_.size();
}
void RecVehicle::clear_passengers() {
  passengers_.Clear();
}
const ::dg::model::Passenger& RecVehicle::passengers(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecVehicle.Passengers)
  return passengers_.Get(index);
}
::dg::model::Passenger* RecVehicle::mutable_passengers(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecVehicle.Passengers)
  return passengers_.Mutable(index);
}
::dg::model::Passenger* RecVehicle::add_passengers() {
  // @@protoc_insertion_point(field_add:dg.model.RecVehicle.Passengers)
  return passengers_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::Passenger >*
RecVehicle::mutable_passengers() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecVehicle.Passengers)
  return &passengers_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::Passenger >&
RecVehicle::passengers() const {
  // @@protoc_insertion_point(field_list:dg.model.RecVehicle.Passengers)
  return passengers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecNonMotorVehicle_NonMotorPedestrian::kIdFieldNumber;
const int RecNonMotorVehicle_NonMotorPedestrian::kSexFieldNumber;
const int RecNonMotorVehicle_NonMotorPedestrian::kAttributeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecNonMotorVehicle_NonMotorPedestrian::RecNonMotorVehicle_NonMotorPedestrian()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
}

void RecNonMotorVehicle_NonMotorPedestrian::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  sex_ = const_cast< ::dg::model::NameAndConfidence*>(&::dg::model::NameAndConfidence::default_instance());
}

RecNonMotorVehicle_NonMotorPedestrian::RecNonMotorVehicle_NonMotorPedestrian(const RecNonMotorVehicle_NonMotorPedestrian& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
}

void RecNonMotorVehicle_NonMotorPedestrian::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  sex_ = NULL;
}

RecNonMotorVehicle_NonMotorPedestrian::~RecNonMotorVehicle_NonMotorPedestrian() {
  // @@protoc_insertion_point(destructor:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  SharedDtor();
}

void RecNonMotorVehicle_NonMotorPedestrian::SharedDtor() {
  if (this != default_instance_) {
    delete sex_;
  }
}

void RecNonMotorVehicle_NonMotorPedestrian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecNonMotorVehicle_NonMotorPedestrian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecNonMotorVehicle_NonMotorPedestrian_descriptor_;
}

const RecNonMotorVehicle_NonMotorPedestrian& RecNonMotorVehicle_NonMotorPedestrian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RecNonMotorVehicle_NonMotorPedestrian* RecNonMotorVehicle_NonMotorPedestrian::default_instance_ = NULL;

RecNonMotorVehicle_NonMotorPedestrian* RecNonMotorVehicle_NonMotorPedestrian::New(::google::protobuf::Arena* arena) const {
  RecNonMotorVehicle_NonMotorPedestrian* n = new RecNonMotorVehicle_NonMotorPedestrian;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecNonMotorVehicle_NonMotorPedestrian::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && sex_ != NULL) delete sex_;
  sex_ = NULL;
  attribute_.Clear();
}

bool RecNonMotorVehicle_NonMotorPedestrian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Sex;
        break;
      }

      // optional .dg.model.NameAndConfidence Sex = 2;
      case 2: {
        if (tag == 18) {
         parse_Sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Attribute;
        break;
      }

      // repeated .dg.model.CategoryAndFeature Attribute = 3;
      case 3: {
        if (tag == 26) {
         parse_Attribute:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Attribute;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  return false;
#undef DO_
}

void RecNonMotorVehicle_NonMotorPedestrian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .dg.model.NameAndConfidence Sex = 2;
  if (this->has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sex_, output);
  }

  // repeated .dg.model.CategoryAndFeature Attribute = 3;
  for (unsigned int i = 0, n = this->attribute_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
}

::google::protobuf::uint8* RecNonMotorVehicle_NonMotorPedestrian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .dg.model.NameAndConfidence Sex = 2;
  if (this->has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->sex_, target);
  }

  // repeated .dg.model.CategoryAndFeature Attribute = 3;
  for (unsigned int i = 0, n = this->attribute_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  return target;
}

int RecNonMotorVehicle_NonMotorPedestrian::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .dg.model.NameAndConfidence Sex = 2;
  if (this->has_sex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sex_);
  }

  // repeated .dg.model.CategoryAndFeature Attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecNonMotorVehicle_NonMotorPedestrian::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecNonMotorVehicle_NonMotorPedestrian* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecNonMotorVehicle_NonMotorPedestrian>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
    MergeFrom(*source);
  }
}

void RecNonMotorVehicle_NonMotorPedestrian::MergeFrom(const RecNonMotorVehicle_NonMotorPedestrian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  attribute_.MergeFrom(from.attribute_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_sex()) {
    mutable_sex()->::dg::model::NameAndConfidence::MergeFrom(from.sex());
  }
}

void RecNonMotorVehicle_NonMotorPedestrian::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecNonMotorVehicle_NonMotorPedestrian::CopyFrom(const RecNonMotorVehicle_NonMotorPedestrian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.RecNonMotorVehicle.NonMotorPedestrian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecNonMotorVehicle_NonMotorPedestrian::IsInitialized() const {

  return true;
}

void RecNonMotorVehicle_NonMotorPedestrian::Swap(RecNonMotorVehicle_NonMotorPedestrian* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecNonMotorVehicle_NonMotorPedestrian::InternalSwap(RecNonMotorVehicle_NonMotorPedestrian* other) {
  std::swap(id_, other->id_);
  std::swap(sex_, other->sex_);
  attribute_.UnsafeArenaSwap(&other->attribute_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecNonMotorVehicle_NonMotorPedestrian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecNonMotorVehicle_NonMotorPedestrian_descriptor_;
  metadata.reflection = RecNonMotorVehicle_NonMotorPedestrian_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecNonMotorVehicle::kIdFieldNumber;
const int RecNonMotorVehicle::kNMVehicleTypeFieldNumber;
const int RecNonMotorVehicle::kNMVehicleTypeNameFieldNumber;
const int RecNonMotorVehicle::kImgFieldNumber;
const int RecNonMotorVehicle::kNMVehicleGestureFieldNumber;
const int RecNonMotorVehicle::kPassengerFieldNumber;
const int RecNonMotorVehicle::kNMVehicleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecNonMotorVehicle::RecNonMotorVehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.RecNonMotorVehicle)
}

void RecNonMotorVehicle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  img_ = const_cast< ::dg::model::CutboardImage*>(&::dg::model::CutboardImage::default_instance());
}

RecNonMotorVehicle::RecNonMotorVehicle(const RecNonMotorVehicle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.RecNonMotorVehicle)
}

void RecNonMotorVehicle::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  nmvehicletype_ = GOOGLE_LONGLONG(0);
  nmvehicletypename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_ = NULL;
  nmvehiclegesture_ = 0;
}

RecNonMotorVehicle::~RecNonMotorVehicle() {
  // @@protoc_insertion_point(destructor:dg.model.RecNonMotorVehicle)
  SharedDtor();
}

void RecNonMotorVehicle::SharedDtor() {
  nmvehicletypename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete img_;
  }
}

void RecNonMotorVehicle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecNonMotorVehicle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecNonMotorVehicle_descriptor_;
}

const RecNonMotorVehicle& RecNonMotorVehicle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RecNonMotorVehicle* RecNonMotorVehicle::default_instance_ = NULL;

RecNonMotorVehicle* RecNonMotorVehicle::New(::google::protobuf::Arena* arena) const {
  RecNonMotorVehicle* n = new RecNonMotorVehicle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecNonMotorVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.RecNonMotorVehicle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecNonMotorVehicle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecNonMotorVehicle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, nmvehicletype_);
  nmvehicletypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  nmvehiclegesture_ = 0;

#undef ZR_HELPER_
#undef ZR_

  passenger_.Clear();
  nmvehicle_.Clear();
}

bool RecNonMotorVehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.RecNonMotorVehicle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NMVehicleType;
        break;
      }

      // optional int64 NMVehicleType = 2;
      case 2: {
        if (tag == 16) {
         parse_NMVehicleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nmvehicletype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_NMVehicleTypeName;
        break;
      }

      // optional string NMVehicleTypeName = 3;
      case 3: {
        if (tag == 26) {
         parse_NMVehicleTypeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nmvehicletypename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nmvehicletypename().data(), this->nmvehicletypename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecNonMotorVehicle.NMVehicleTypeName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Img;
        break;
      }

      // optional .dg.model.CutboardImage Img = 4;
      case 4: {
        if (tag == 34) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_NMVehicleGesture;
        break;
      }

      // optional .dg.model.NonMotorVehicleGesture NMVehicleGesture = 5;
      case 5: {
        if (tag == 40) {
         parse_NMVehicleGesture:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nmvehiclegesture(static_cast< ::dg::model::NonMotorVehicleGesture >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Passenger;
        break;
      }

      // repeated .dg.model.RecNonMotorVehicle.NonMotorPedestrian Passenger = 6;
      case 6: {
        if (tag == 50) {
         parse_Passenger:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Passenger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_passenger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_Passenger;
        if (input->ExpectTag(58)) goto parse_loop_NMVehicle;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .dg.model.CategoryAndFeature NMVehicle = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_NMVehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nmvehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_NMVehicle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.RecNonMotorVehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.RecNonMotorVehicle)
  return false;
#undef DO_
}

void RecNonMotorVehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.RecNonMotorVehicle)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 NMVehicleType = 2;
  if (this->nmvehicletype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nmvehicletype(), output);
  }

  // optional string NMVehicleTypeName = 3;
  if (this->nmvehicletypename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nmvehicletypename().data(), this->nmvehicletypename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecNonMotorVehicle.NMVehicleTypeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nmvehicletypename(), output);
  }

  // optional .dg.model.CutboardImage Img = 4;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->img_, output);
  }

  // optional .dg.model.NonMotorVehicleGesture NMVehicleGesture = 5;
  if (this->nmvehiclegesture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->nmvehiclegesture(), output);
  }

  // repeated .dg.model.RecNonMotorVehicle.NonMotorPedestrian Passenger = 6;
  for (unsigned int i = 0, n = this->passenger_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->passenger(i), output);
  }

  // repeated .dg.model.CategoryAndFeature NMVehicle = 7;
  for (unsigned int i = 0, n = this->nmvehicle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->nmvehicle(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.RecNonMotorVehicle)
}

::google::protobuf::uint8* RecNonMotorVehicle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.RecNonMotorVehicle)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 NMVehicleType = 2;
  if (this->nmvehicletype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nmvehicletype(), target);
  }

  // optional string NMVehicleTypeName = 3;
  if (this->nmvehicletypename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nmvehicletypename().data(), this->nmvehicletypename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecNonMotorVehicle.NMVehicleTypeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nmvehicletypename(), target);
  }

  // optional .dg.model.CutboardImage Img = 4;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->img_, target);
  }

  // optional .dg.model.NonMotorVehicleGesture NMVehicleGesture = 5;
  if (this->nmvehiclegesture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->nmvehiclegesture(), target);
  }

  // repeated .dg.model.RecNonMotorVehicle.NonMotorPedestrian Passenger = 6;
  for (unsigned int i = 0, n = this->passenger_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->passenger(i), target);
  }

  // repeated .dg.model.CategoryAndFeature NMVehicle = 7;
  for (unsigned int i = 0, n = this->nmvehicle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->nmvehicle(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.RecNonMotorVehicle)
  return target;
}

int RecNonMotorVehicle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.RecNonMotorVehicle)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int64 NMVehicleType = 2;
  if (this->nmvehicletype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nmvehicletype());
  }

  // optional string NMVehicleTypeName = 3;
  if (this->nmvehicletypename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nmvehicletypename());
  }

  // optional .dg.model.CutboardImage Img = 4;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional .dg.model.NonMotorVehicleGesture NMVehicleGesture = 5;
  if (this->nmvehiclegesture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmvehiclegesture());
  }

  // repeated .dg.model.RecNonMotorVehicle.NonMotorPedestrian Passenger = 6;
  total_size += 1 * this->passenger_size();
  for (int i = 0; i < this->passenger_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passenger(i));
  }

  // repeated .dg.model.CategoryAndFeature NMVehicle = 7;
  total_size += 1 * this->nmvehicle_size();
  for (int i = 0; i < this->nmvehicle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nmvehicle(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecNonMotorVehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.RecNonMotorVehicle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecNonMotorVehicle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecNonMotorVehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.RecNonMotorVehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.RecNonMotorVehicle)
    MergeFrom(*source);
  }
}

void RecNonMotorVehicle::MergeFrom(const RecNonMotorVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.RecNonMotorVehicle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  passenger_.MergeFrom(from.passenger_);
  nmvehicle_.MergeFrom(from.nmvehicle_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.nmvehicletype() != 0) {
    set_nmvehicletype(from.nmvehicletype());
  }
  if (from.nmvehicletypename().size() > 0) {

    nmvehicletypename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nmvehicletypename_);
  }
  if (from.has_img()) {
    mutable_img()->::dg::model::CutboardImage::MergeFrom(from.img());
  }
  if (from.nmvehiclegesture() != 0) {
    set_nmvehiclegesture(from.nmvehiclegesture());
  }
}

void RecNonMotorVehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.RecNonMotorVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecNonMotorVehicle::CopyFrom(const RecNonMotorVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.RecNonMotorVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecNonMotorVehicle::IsInitialized() const {

  return true;
}

void RecNonMotorVehicle::Swap(RecNonMotorVehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecNonMotorVehicle::InternalSwap(RecNonMotorVehicle* other) {
  std::swap(id_, other->id_);
  std::swap(nmvehicletype_, other->nmvehicletype_);
  nmvehicletypename_.Swap(&other->nmvehicletypename_);
  std::swap(img_, other->img_);
  std::swap(nmvehiclegesture_, other->nmvehiclegesture_);
  passenger_.UnsafeArenaSwap(&other->passenger_);
  nmvehicle_.UnsafeArenaSwap(&other->nmvehicle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecNonMotorVehicle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecNonMotorVehicle_descriptor_;
  metadata.reflection = RecNonMotorVehicle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecNonMotorVehicle_NonMotorPedestrian

// optional int64 Id = 1;
void RecNonMotorVehicle_NonMotorPedestrian::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecNonMotorVehicle_NonMotorPedestrian::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Id)
  return id_;
}
 void RecNonMotorVehicle_NonMotorPedestrian::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Id)
}

// optional .dg.model.NameAndConfidence Sex = 2;
bool RecNonMotorVehicle_NonMotorPedestrian::has_sex() const {
  return !_is_default_instance_ && sex_ != NULL;
}
void RecNonMotorVehicle_NonMotorPedestrian::clear_sex() {
  if (GetArenaNoVirtual() == NULL && sex_ != NULL) delete sex_;
  sex_ = NULL;
}
const ::dg::model::NameAndConfidence& RecNonMotorVehicle_NonMotorPedestrian::sex() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Sex)
  return sex_ != NULL ? *sex_ : *default_instance_->sex_;
}
::dg::model::NameAndConfidence* RecNonMotorVehicle_NonMotorPedestrian::mutable_sex() {
  
  if (sex_ == NULL) {
    sex_ = new ::dg::model::NameAndConfidence;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Sex)
  return sex_;
}
::dg::model::NameAndConfidence* RecNonMotorVehicle_NonMotorPedestrian::release_sex() {
  // @@protoc_insertion_point(field_release:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Sex)
  
  ::dg::model::NameAndConfidence* temp = sex_;
  sex_ = NULL;
  return temp;
}
void RecNonMotorVehicle_NonMotorPedestrian::set_allocated_sex(::dg::model::NameAndConfidence* sex) {
  delete sex_;
  sex_ = sex;
  if (sex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Sex)
}

// repeated .dg.model.CategoryAndFeature Attribute = 3;
int RecNonMotorVehicle_NonMotorPedestrian::attribute_size() const {
  return attribute_.size();
}
void RecNonMotorVehicle_NonMotorPedestrian::clear_attribute() {
  attribute_.Clear();
}
const ::dg::model::CategoryAndFeature& RecNonMotorVehicle_NonMotorPedestrian::attribute(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Attribute)
  return attribute_.Get(index);
}
::dg::model::CategoryAndFeature* RecNonMotorVehicle_NonMotorPedestrian::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Attribute)
  return attribute_.Mutable(index);
}
::dg::model::CategoryAndFeature* RecNonMotorVehicle_NonMotorPedestrian::add_attribute() {
  // @@protoc_insertion_point(field_add:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Attribute)
  return attribute_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >*
RecNonMotorVehicle_NonMotorPedestrian::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Attribute)
  return &attribute_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >&
RecNonMotorVehicle_NonMotorPedestrian::attribute() const {
  // @@protoc_insertion_point(field_list:dg.model.RecNonMotorVehicle.NonMotorPedestrian.Attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// RecNonMotorVehicle

// optional int64 Id = 1;
void RecNonMotorVehicle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecNonMotorVehicle::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.Id)
  return id_;
}
 void RecNonMotorVehicle::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecNonMotorVehicle.Id)
}

// optional int64 NMVehicleType = 2;
void RecNonMotorVehicle::clear_nmvehicletype() {
  nmvehicletype_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecNonMotorVehicle::nmvehicletype() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NMVehicleType)
  return nmvehicletype_;
}
 void RecNonMotorVehicle::set_nmvehicletype(::google::protobuf::int64 value) {
  
  nmvehicletype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecNonMotorVehicle.NMVehicleType)
}

// optional string NMVehicleTypeName = 3;
void RecNonMotorVehicle::clear_nmvehicletypename() {
  nmvehicletypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecNonMotorVehicle::nmvehicletypename() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
  return nmvehicletypename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecNonMotorVehicle::set_nmvehicletypename(const ::std::string& value) {
  
  nmvehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
}
 void RecNonMotorVehicle::set_nmvehicletypename(const char* value) {
  
  nmvehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
}
 void RecNonMotorVehicle::set_nmvehicletypename(const char* value, size_t size) {
  
  nmvehicletypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
}
 ::std::string* RecNonMotorVehicle::mutable_nmvehicletypename() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
  return nmvehicletypename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecNonMotorVehicle::release_nmvehicletypename() {
  // @@protoc_insertion_point(field_release:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
  
  return nmvehicletypename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecNonMotorVehicle::set_allocated_nmvehicletypename(::std::string* nmvehicletypename) {
  if (nmvehicletypename != NULL) {
    
  } else {
    
  }
  nmvehicletypename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nmvehicletypename);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecNonMotorVehicle.NMVehicleTypeName)
}

// optional .dg.model.CutboardImage Img = 4;
bool RecNonMotorVehicle::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void RecNonMotorVehicle::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::dg::model::CutboardImage& RecNonMotorVehicle::img() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::dg::model::CutboardImage* RecNonMotorVehicle::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.Img)
  return img_;
}
::dg::model::CutboardImage* RecNonMotorVehicle::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.RecNonMotorVehicle.Img)
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void RecNonMotorVehicle::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecNonMotorVehicle.Img)
}

// optional .dg.model.NonMotorVehicleGesture NMVehicleGesture = 5;
void RecNonMotorVehicle::clear_nmvehiclegesture() {
  nmvehiclegesture_ = 0;
}
 ::dg::model::NonMotorVehicleGesture RecNonMotorVehicle::nmvehiclegesture() const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NMVehicleGesture)
  return static_cast< ::dg::model::NonMotorVehicleGesture >(nmvehiclegesture_);
}
 void RecNonMotorVehicle::set_nmvehiclegesture(::dg::model::NonMotorVehicleGesture value) {
  
  nmvehiclegesture_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecNonMotorVehicle.NMVehicleGesture)
}

// repeated .dg.model.RecNonMotorVehicle.NonMotorPedestrian Passenger = 6;
int RecNonMotorVehicle::passenger_size() const {
  return passenger_.size();
}
void RecNonMotorVehicle::clear_passenger() {
  passenger_.Clear();
}
const ::dg::model::RecNonMotorVehicle_NonMotorPedestrian& RecNonMotorVehicle::passenger(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.Passenger)
  return passenger_.Get(index);
}
::dg::model::RecNonMotorVehicle_NonMotorPedestrian* RecNonMotorVehicle::mutable_passenger(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.Passenger)
  return passenger_.Mutable(index);
}
::dg::model::RecNonMotorVehicle_NonMotorPedestrian* RecNonMotorVehicle::add_passenger() {
  // @@protoc_insertion_point(field_add:dg.model.RecNonMotorVehicle.Passenger)
  return passenger_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle_NonMotorPedestrian >*
RecNonMotorVehicle::mutable_passenger() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecNonMotorVehicle.Passenger)
  return &passenger_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle_NonMotorPedestrian >&
RecNonMotorVehicle::passenger() const {
  // @@protoc_insertion_point(field_list:dg.model.RecNonMotorVehicle.Passenger)
  return passenger_;
}

// repeated .dg.model.CategoryAndFeature NMVehicle = 7;
int RecNonMotorVehicle::nmvehicle_size() const {
  return nmvehicle_.size();
}
void RecNonMotorVehicle::clear_nmvehicle() {
  nmvehicle_.Clear();
}
const ::dg::model::CategoryAndFeature& RecNonMotorVehicle::nmvehicle(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecNonMotorVehicle.NMVehicle)
  return nmvehicle_.Get(index);
}
::dg::model::CategoryAndFeature* RecNonMotorVehicle::mutable_nmvehicle(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecNonMotorVehicle.NMVehicle)
  return nmvehicle_.Mutable(index);
}
::dg::model::CategoryAndFeature* RecNonMotorVehicle::add_nmvehicle() {
  // @@protoc_insertion_point(field_add:dg.model.RecNonMotorVehicle.NMVehicle)
  return nmvehicle_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >*
RecNonMotorVehicle::mutable_nmvehicle() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecNonMotorVehicle.NMVehicle)
  return &nmvehicle_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::CategoryAndFeature >&
RecNonMotorVehicle::nmvehicle() const {
  // @@protoc_insertion_point(field_list:dg.model.RecNonMotorVehicle.NMVehicle)
  return nmvehicle_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Passenger::kIdFieldNumber;
const int Passenger::kPassengerAttrFieldNumber;
const int Passenger::kFaceFieldNumber;
const int Passenger::kDriverFieldNumber;
const int Passenger::kImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Passenger::Passenger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Passenger)
}

void Passenger::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  passengerattr_ = const_cast< ::dg::model::PeopleAttr*>(&::dg::model::PeopleAttr::default_instance());
  face_ = const_cast< ::dg::model::RecFace*>(&::dg::model::RecFace::default_instance());
  img_ = const_cast< ::dg::model::CutboardImage*>(&::dg::model::CutboardImage::default_instance());
}

Passenger::Passenger(const Passenger& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Passenger)
}

void Passenger::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  passengerattr_ = NULL;
  face_ = NULL;
  driver_ = false;
  img_ = NULL;
}

Passenger::~Passenger() {
  // @@protoc_insertion_point(destructor:dg.model.Passenger)
  SharedDtor();
}

void Passenger::SharedDtor() {
  if (this != default_instance_) {
    delete passengerattr_;
    delete face_;
    delete img_;
  }
}

void Passenger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Passenger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Passenger_descriptor_;
}

const Passenger& Passenger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Passenger* Passenger::default_instance_ = NULL;

Passenger* Passenger::New(::google::protobuf::Arena* arena) const {
  Passenger* n = new Passenger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Passenger::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.Passenger)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && passengerattr_ != NULL) delete passengerattr_;
  passengerattr_ = NULL;
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
  driver_ = false;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}

bool Passenger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Passenger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PassengerAttr;
        break;
      }

      // optional .dg.model.PeopleAttr PassengerAttr = 2;
      case 2: {
        if (tag == 18) {
         parse_PassengerAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passengerattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Face;
        break;
      }

      // optional .dg.model.RecFace Face = 3;
      case 3: {
        if (tag == 26) {
         parse_Face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Driver;
        break;
      }

      // optional bool Driver = 4;
      case 4: {
        if (tag == 32) {
         parse_Driver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Img;
        break;
      }

      // optional .dg.model.CutboardImage Img = 5;
      case 5: {
        if (tag == 42) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Passenger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Passenger)
  return false;
#undef DO_
}

void Passenger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Passenger)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .dg.model.PeopleAttr PassengerAttr = 2;
  if (this->has_passengerattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->passengerattr_, output);
  }

  // optional .dg.model.RecFace Face = 3;
  if (this->has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->face_, output);
  }

  // optional bool Driver = 4;
  if (this->driver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->driver(), output);
  }

  // optional .dg.model.CutboardImage Img = 5;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->img_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Passenger)
}

::google::protobuf::uint8* Passenger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Passenger)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .dg.model.PeopleAttr PassengerAttr = 2;
  if (this->has_passengerattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->passengerattr_, target);
  }

  // optional .dg.model.RecFace Face = 3;
  if (this->has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->face_, target);
  }

  // optional bool Driver = 4;
  if (this->driver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->driver(), target);
  }

  // optional .dg.model.CutboardImage Img = 5;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->img_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Passenger)
  return target;
}

int Passenger::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.Passenger)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .dg.model.PeopleAttr PassengerAttr = 2;
  if (this->has_passengerattr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->passengerattr_);
  }

  // optional .dg.model.RecFace Face = 3;
  if (this->has_face()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->face_);
  }

  // optional bool Driver = 4;
  if (this->driver() != 0) {
    total_size += 1 + 1;
  }

  // optional .dg.model.CutboardImage Img = 5;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Passenger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.Passenger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Passenger* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Passenger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.Passenger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.Passenger)
    MergeFrom(*source);
  }
}

void Passenger::MergeFrom(const Passenger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.Passenger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_passengerattr()) {
    mutable_passengerattr()->::dg::model::PeopleAttr::MergeFrom(from.passengerattr());
  }
  if (from.has_face()) {
    mutable_face()->::dg::model::RecFace::MergeFrom(from.face());
  }
  if (from.driver() != 0) {
    set_driver(from.driver());
  }
  if (from.has_img()) {
    mutable_img()->::dg::model::CutboardImage::MergeFrom(from.img());
  }
}

void Passenger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.Passenger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Passenger::CopyFrom(const Passenger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.Passenger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passenger::IsInitialized() const {

  return true;
}

void Passenger::Swap(Passenger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Passenger::InternalSwap(Passenger* other) {
  std::swap(id_, other->id_);
  std::swap(passengerattr_, other->passengerattr_);
  std::swap(face_, other->face_);
  std::swap(driver_, other->driver_);
  std::swap(img_, other->img_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Passenger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Passenger_descriptor_;
  metadata.reflection = Passenger_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Passenger

// optional int64 Id = 1;
void Passenger::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Passenger::id() const {
  // @@protoc_insertion_point(field_get:dg.model.Passenger.Id)
  return id_;
}
 void Passenger::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Passenger.Id)
}

// optional .dg.model.PeopleAttr PassengerAttr = 2;
bool Passenger::has_passengerattr() const {
  return !_is_default_instance_ && passengerattr_ != NULL;
}
void Passenger::clear_passengerattr() {
  if (GetArenaNoVirtual() == NULL && passengerattr_ != NULL) delete passengerattr_;
  passengerattr_ = NULL;
}
const ::dg::model::PeopleAttr& Passenger::passengerattr() const {
  // @@protoc_insertion_point(field_get:dg.model.Passenger.PassengerAttr)
  return passengerattr_ != NULL ? *passengerattr_ : *default_instance_->passengerattr_;
}
::dg::model::PeopleAttr* Passenger::mutable_passengerattr() {
  
  if (passengerattr_ == NULL) {
    passengerattr_ = new ::dg::model::PeopleAttr;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.Passenger.PassengerAttr)
  return passengerattr_;
}
::dg::model::PeopleAttr* Passenger::release_passengerattr() {
  // @@protoc_insertion_point(field_release:dg.model.Passenger.PassengerAttr)
  
  ::dg::model::PeopleAttr* temp = passengerattr_;
  passengerattr_ = NULL;
  return temp;
}
void Passenger::set_allocated_passengerattr(::dg::model::PeopleAttr* passengerattr) {
  delete passengerattr_;
  passengerattr_ = passengerattr;
  if (passengerattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.Passenger.PassengerAttr)
}

// optional .dg.model.RecFace Face = 3;
bool Passenger::has_face() const {
  return !_is_default_instance_ && face_ != NULL;
}
void Passenger::clear_face() {
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
}
const ::dg::model::RecFace& Passenger::face() const {
  // @@protoc_insertion_point(field_get:dg.model.Passenger.Face)
  return face_ != NULL ? *face_ : *default_instance_->face_;
}
::dg::model::RecFace* Passenger::mutable_face() {
  
  if (face_ == NULL) {
    face_ = new ::dg::model::RecFace;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.Passenger.Face)
  return face_;
}
::dg::model::RecFace* Passenger::release_face() {
  // @@protoc_insertion_point(field_release:dg.model.Passenger.Face)
  
  ::dg::model::RecFace* temp = face_;
  face_ = NULL;
  return temp;
}
void Passenger::set_allocated_face(::dg::model::RecFace* face) {
  delete face_;
  face_ = face;
  if (face) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.Passenger.Face)
}

// optional bool Driver = 4;
void Passenger::clear_driver() {
  driver_ = false;
}
 bool Passenger::driver() const {
  // @@protoc_insertion_point(field_get:dg.model.Passenger.Driver)
  return driver_;
}
 void Passenger::set_driver(bool value) {
  
  driver_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Passenger.Driver)
}

// optional .dg.model.CutboardImage Img = 5;
bool Passenger::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void Passenger::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::dg::model::CutboardImage& Passenger::img() const {
  // @@protoc_insertion_point(field_get:dg.model.Passenger.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::dg::model::CutboardImage* Passenger::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.Passenger.Img)
  return img_;
}
::dg::model::CutboardImage* Passenger::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.Passenger.Img)
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void Passenger::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.Passenger.Img)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecPedestrian::kIdFieldNumber;
const int RecPedestrian::kImgFieldNumber;
const int RecPedestrian::kConfidenceFieldNumber;
const int RecPedestrian::kPedesAttrFieldNumber;
const int RecPedestrian::kFaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecPedestrian::RecPedestrian()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.RecPedestrian)
}

void RecPedestrian::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  img_ = const_cast< ::dg::model::CutboardImage*>(&::dg::model::CutboardImage::default_instance());
  pedesattr_ = const_cast< ::dg::model::PeopleAttr*>(&::dg::model::PeopleAttr::default_instance());
  face_ = const_cast< ::dg::model::RecFace*>(&::dg::model::RecFace::default_instance());
}

RecPedestrian::RecPedestrian(const RecPedestrian& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.RecPedestrian)
}

void RecPedestrian::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  img_ = NULL;
  confidence_ = 0;
  pedesattr_ = NULL;
  face_ = NULL;
}

RecPedestrian::~RecPedestrian() {
  // @@protoc_insertion_point(destructor:dg.model.RecPedestrian)
  SharedDtor();
}

void RecPedestrian::SharedDtor() {
  if (this != default_instance_) {
    delete img_;
    delete pedesattr_;
    delete face_;
  }
}

void RecPedestrian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecPedestrian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecPedestrian_descriptor_;
}

const RecPedestrian& RecPedestrian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RecPedestrian* RecPedestrian::default_instance_ = NULL;

RecPedestrian* RecPedestrian::New(::google::protobuf::Arena* arena) const {
  RecPedestrian* n = new RecPedestrian;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecPedestrian::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.RecPedestrian)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  confidence_ = 0;
  if (GetArenaNoVirtual() == NULL && pedesattr_ != NULL) delete pedesattr_;
  pedesattr_ = NULL;
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
}

bool RecPedestrian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.RecPedestrian)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Img;
        break;
      }

      // optional .dg.model.CutboardImage Img = 2;
      case 2: {
        if (tag == 18) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 3;
      case 3: {
        if (tag == 29) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_PedesAttr;
        break;
      }

      // optional .dg.model.PeopleAttr PedesAttr = 4;
      case 4: {
        if (tag == 34) {
         parse_PedesAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pedesattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Face;
        break;
      }

      // optional .dg.model.RecFace Face = 5;
      case 5: {
        if (tag == 42) {
         parse_Face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.RecPedestrian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.RecPedestrian)
  return false;
#undef DO_
}

void RecPedestrian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.RecPedestrian)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .dg.model.CutboardImage Img = 2;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_, output);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // optional .dg.model.PeopleAttr PedesAttr = 4;
  if (this->has_pedesattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pedesattr_, output);
  }

  // optional .dg.model.RecFace Face = 5;
  if (this->has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->face_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.RecPedestrian)
}

::google::protobuf::uint8* RecPedestrian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.RecPedestrian)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .dg.model.CutboardImage Img = 2;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->img_, target);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // optional .dg.model.PeopleAttr PedesAttr = 4;
  if (this->has_pedesattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->pedesattr_, target);
  }

  // optional .dg.model.RecFace Face = 5;
  if (this->has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->face_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.RecPedestrian)
  return target;
}

int RecPedestrian::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.RecPedestrian)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .dg.model.CutboardImage Img = 2;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional .dg.model.PeopleAttr PedesAttr = 4;
  if (this->has_pedesattr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pedesattr_);
  }

  // optional .dg.model.RecFace Face = 5;
  if (this->has_face()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->face_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecPedestrian::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.RecPedestrian)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecPedestrian* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecPedestrian>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.RecPedestrian)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.RecPedestrian)
    MergeFrom(*source);
  }
}

void RecPedestrian::MergeFrom(const RecPedestrian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.RecPedestrian)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_img()) {
    mutable_img()->::dg::model::CutboardImage::MergeFrom(from.img());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.has_pedesattr()) {
    mutable_pedesattr()->::dg::model::PeopleAttr::MergeFrom(from.pedesattr());
  }
  if (from.has_face()) {
    mutable_face()->::dg::model::RecFace::MergeFrom(from.face());
  }
}

void RecPedestrian::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.RecPedestrian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecPedestrian::CopyFrom(const RecPedestrian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.RecPedestrian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecPedestrian::IsInitialized() const {

  return true;
}

void RecPedestrian::Swap(RecPedestrian* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecPedestrian::InternalSwap(RecPedestrian* other) {
  std::swap(id_, other->id_);
  std::swap(img_, other->img_);
  std::swap(confidence_, other->confidence_);
  std::swap(pedesattr_, other->pedesattr_);
  std::swap(face_, other->face_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecPedestrian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecPedestrian_descriptor_;
  metadata.reflection = RecPedestrian_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecPedestrian

// optional int64 Id = 1;
void RecPedestrian::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecPedestrian::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecPedestrian.Id)
  return id_;
}
 void RecPedestrian::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecPedestrian.Id)
}

// optional .dg.model.CutboardImage Img = 2;
bool RecPedestrian::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void RecPedestrian::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::dg::model::CutboardImage& RecPedestrian::img() const {
  // @@protoc_insertion_point(field_get:dg.model.RecPedestrian.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::dg::model::CutboardImage* RecPedestrian::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecPedestrian.Img)
  return img_;
}
::dg::model::CutboardImage* RecPedestrian::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.RecPedestrian.Img)
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void RecPedestrian::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecPedestrian.Img)
}

// optional float Confidence = 3;
void RecPedestrian::clear_confidence() {
  confidence_ = 0;
}
 float RecPedestrian::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.RecPedestrian.Confidence)
  return confidence_;
}
 void RecPedestrian::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecPedestrian.Confidence)
}

// optional .dg.model.PeopleAttr PedesAttr = 4;
bool RecPedestrian::has_pedesattr() const {
  return !_is_default_instance_ && pedesattr_ != NULL;
}
void RecPedestrian::clear_pedesattr() {
  if (GetArenaNoVirtual() == NULL && pedesattr_ != NULL) delete pedesattr_;
  pedesattr_ = NULL;
}
const ::dg::model::PeopleAttr& RecPedestrian::pedesattr() const {
  // @@protoc_insertion_point(field_get:dg.model.RecPedestrian.PedesAttr)
  return pedesattr_ != NULL ? *pedesattr_ : *default_instance_->pedesattr_;
}
::dg::model::PeopleAttr* RecPedestrian::mutable_pedesattr() {
  
  if (pedesattr_ == NULL) {
    pedesattr_ = new ::dg::model::PeopleAttr;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecPedestrian.PedesAttr)
  return pedesattr_;
}
::dg::model::PeopleAttr* RecPedestrian::release_pedesattr() {
  // @@protoc_insertion_point(field_release:dg.model.RecPedestrian.PedesAttr)
  
  ::dg::model::PeopleAttr* temp = pedesattr_;
  pedesattr_ = NULL;
  return temp;
}
void RecPedestrian::set_allocated_pedesattr(::dg::model::PeopleAttr* pedesattr) {
  delete pedesattr_;
  pedesattr_ = pedesattr;
  if (pedesattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecPedestrian.PedesAttr)
}

// optional .dg.model.RecFace Face = 5;
bool RecPedestrian::has_face() const {
  return !_is_default_instance_ && face_ != NULL;
}
void RecPedestrian::clear_face() {
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
}
const ::dg::model::RecFace& RecPedestrian::face() const {
  // @@protoc_insertion_point(field_get:dg.model.RecPedestrian.Face)
  return face_ != NULL ? *face_ : *default_instance_->face_;
}
::dg::model::RecFace* RecPedestrian::mutable_face() {
  
  if (face_ == NULL) {
    face_ = new ::dg::model::RecFace;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecPedestrian.Face)
  return face_;
}
::dg::model::RecFace* RecPedestrian::release_face() {
  // @@protoc_insertion_point(field_release:dg.model.RecPedestrian.Face)
  
  ::dg::model::RecFace* temp = face_;
  face_ = NULL;
  return temp;
}
void RecPedestrian::set_allocated_face(::dg::model::RecFace* face) {
  delete face_;
  face_ = face;
  if (face) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecPedestrian.Face)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleModelType::kIdFieldNumber;
const int VehicleModelType::kBrandIdFieldNumber;
const int VehicleModelType::kSubBrandIdFieldNumber;
const int VehicleModelType::kModelYearIdFieldNumber;
const int VehicleModelType::kConfidenceFieldNumber;
const int VehicleModelType::kTypeFieldNumber;
const int VehicleModelType::kBrandFieldNumber;
const int VehicleModelType::kSubBrandFieldNumber;
const int VehicleModelType::kModelYearFieldNumber;
const int VehicleModelType::kTypeIdFieldNumber;
const int VehicleModelType::kModelFieldNumber;
const int VehicleModelType::kIsHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleModelType::VehicleModelType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.VehicleModelType)
}

void VehicleModelType::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VehicleModelType::VehicleModelType(const VehicleModelType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.VehicleModelType)
}

void VehicleModelType::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  brandid_ = 0;
  subbrandid_ = 0;
  modelyearid_ = 0;
  confidence_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subbrand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelyear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typeid__ = 0;
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ishead_ = 0;
}

VehicleModelType::~VehicleModelType() {
  // @@protoc_insertion_point(destructor:dg.model.VehicleModelType)
  SharedDtor();
}

void VehicleModelType::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subbrand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelyear_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VehicleModelType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleModelType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleModelType_descriptor_;
}

const VehicleModelType& VehicleModelType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

VehicleModelType* VehicleModelType::default_instance_ = NULL;

VehicleModelType* VehicleModelType::New(::google::protobuf::Arena* arena) const {
  VehicleModelType* n = new VehicleModelType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleModelType::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.VehicleModelType)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleModelType, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleModelType*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, confidence_);
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subbrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(typeid__, ishead_);
  modelyear_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool VehicleModelType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.VehicleModelType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BrandId;
        break;
      }

      // optional int32 BrandId = 2;
      case 2: {
        if (tag == 16) {
         parse_BrandId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brandid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SubBrandId;
        break;
      }

      // optional int32 SubBrandId = 3;
      case 3: {
        if (tag == 24) {
         parse_SubBrandId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subbrandid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ModelYearId;
        break;
      }

      // optional int32 ModelYearId = 4;
      case 4: {
        if (tag == 32) {
         parse_ModelYearId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelyearid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 5;
      case 5: {
        if (tag == 45) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Type;
        break;
      }

      // optional string Type = 6;
      case 6: {
        if (tag == 50) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.VehicleModelType.Type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Brand;
        break;
      }

      // optional string Brand = 7;
      case 7: {
        if (tag == 58) {
         parse_Brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.VehicleModelType.Brand"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SubBrand;
        break;
      }

      // optional string SubBrand = 8;
      case 8: {
        if (tag == 66) {
         parse_SubBrand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subbrand()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subbrand().data(), this->subbrand().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.VehicleModelType.SubBrand"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ModelYear;
        break;
      }

      // optional string ModelYear = 9;
      case 9: {
        if (tag == 74) {
         parse_ModelYear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelyear()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modelyear().data(), this->modelyear().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.VehicleModelType.ModelYear"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TypeId;
        break;
      }

      // optional int32 TypeId = 10;
      case 10: {
        if (tag == 80) {
         parse_TypeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Model;
        break;
      }

      // optional string Model = 11;
      case 11: {
        if (tag == 90) {
         parse_Model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.VehicleModelType.Model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_IsHead;
        break;
      }

      // optional int32 IsHead = 12;
      case 12: {
        if (tag == 96) {
         parse_IsHead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishead_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.VehicleModelType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.VehicleModelType)
  return false;
#undef DO_
}

void VehicleModelType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.VehicleModelType)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 BrandId = 2;
  if (this->brandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->brandid(), output);
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subbrandid(), output);
  }

  // optional int32 ModelYearId = 4;
  if (this->modelyearid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->modelyearid(), output);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->confidence(), output);
  }

  // optional string Type = 6;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModelType.Type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  // optional string Brand = 7;
  if (this->brand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModelType.Brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->brand(), output);
  }

  // optional string SubBrand = 8;
  if (this->subbrand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subbrand().data(), this->subbrand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModelType.SubBrand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->subbrand(), output);
  }

  // optional string ModelYear = 9;
  if (this->modelyear().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelyear().data(), this->modelyear().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModelType.ModelYear");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->modelyear(), output);
  }

  // optional int32 TypeId = 10;
  if (this->typeid_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->typeid_(), output);
  }

  // optional string Model = 11;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModelType.Model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->model(), output);
  }

  // optional int32 IsHead = 12;
  if (this->ishead() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ishead(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.VehicleModelType)
}

::google::protobuf::uint8* VehicleModelType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.VehicleModelType)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 BrandId = 2;
  if (this->brandid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->brandid(), target);
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subbrandid(), target);
  }

  // optional int32 ModelYearId = 4;
  if (this->modelyearid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->modelyearid(), target);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->confidence(), target);
  }

  // optional string Type = 6;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModelType.Type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  // optional string Brand = 7;
  if (this->brand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModelType.Brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->brand(), target);
  }

  // optional string SubBrand = 8;
  if (this->subbrand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subbrand().data(), this->subbrand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModelType.SubBrand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->subbrand(), target);
  }

  // optional string ModelYear = 9;
  if (this->modelyear().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelyear().data(), this->modelyear().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModelType.ModelYear");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->modelyear(), target);
  }

  // optional int32 TypeId = 10;
  if (this->typeid_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->typeid_(), target);
  }

  // optional string Model = 11;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleModelType.Model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->model(), target);
  }

  // optional int32 IsHead = 12;
  if (this->ishead() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ishead(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.VehicleModelType)
  return target;
}

int VehicleModelType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.VehicleModelType)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int32 BrandId = 2;
  if (this->brandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brandid());
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subbrandid());
  }

  // optional int32 ModelYearId = 4;
  if (this->modelyearid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modelyearid());
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional string Type = 6;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string Brand = 7;
  if (this->brand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brand());
  }

  // optional string SubBrand = 8;
  if (this->subbrand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subbrand());
  }

  // optional string ModelYear = 9;
  if (this->modelyear().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modelyear());
  }

  // optional int32 TypeId = 10;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  // optional string Model = 11;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional int32 IsHead = 12;
  if (this->ishead() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ishead());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleModelType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.VehicleModelType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehicleModelType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleModelType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.VehicleModelType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.VehicleModelType)
    MergeFrom(*source);
  }
}

void VehicleModelType::MergeFrom(const VehicleModelType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.VehicleModelType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.brandid() != 0) {
    set_brandid(from.brandid());
  }
  if (from.subbrandid() != 0) {
    set_subbrandid(from.subbrandid());
  }
  if (from.modelyearid() != 0) {
    set_modelyearid(from.modelyearid());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.brand().size() > 0) {

    brand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
  }
  if (from.subbrand().size() > 0) {

    subbrand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subbrand_);
  }
  if (from.modelyear().size() > 0) {

    modelyear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelyear_);
  }
  if (from.typeid_() != 0) {
    set_typeid_(from.typeid_());
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.ishead() != 0) {
    set_ishead(from.ishead());
  }
}

void VehicleModelType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.VehicleModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleModelType::CopyFrom(const VehicleModelType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.VehicleModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleModelType::IsInitialized() const {

  return true;
}

void VehicleModelType::Swap(VehicleModelType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleModelType::InternalSwap(VehicleModelType* other) {
  std::swap(id_, other->id_);
  std::swap(brandid_, other->brandid_);
  std::swap(subbrandid_, other->subbrandid_);
  std::swap(modelyearid_, other->modelyearid_);
  std::swap(confidence_, other->confidence_);
  type_.Swap(&other->type_);
  brand_.Swap(&other->brand_);
  subbrand_.Swap(&other->subbrand_);
  modelyear_.Swap(&other->modelyear_);
  std::swap(typeid__, other->typeid__);
  model_.Swap(&other->model_);
  std::swap(ishead_, other->ishead_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleModelType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleModelType_descriptor_;
  metadata.reflection = VehicleModelType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleModelType

// optional int64 Id = 1;
void VehicleModelType::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 VehicleModelType::id() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.Id)
  return id_;
}
 void VehicleModelType::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.Id)
}

// optional int32 BrandId = 2;
void VehicleModelType::clear_brandid() {
  brandid_ = 0;
}
 ::google::protobuf::int32 VehicleModelType::brandid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.BrandId)
  return brandid_;
}
 void VehicleModelType::set_brandid(::google::protobuf::int32 value) {
  
  brandid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.BrandId)
}

// optional int32 SubBrandId = 3;
void VehicleModelType::clear_subbrandid() {
  subbrandid_ = 0;
}
 ::google::protobuf::int32 VehicleModelType::subbrandid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.SubBrandId)
  return subbrandid_;
}
 void VehicleModelType::set_subbrandid(::google::protobuf::int32 value) {
  
  subbrandid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.SubBrandId)
}

// optional int32 ModelYearId = 4;
void VehicleModelType::clear_modelyearid() {
  modelyearid_ = 0;
}
 ::google::protobuf::int32 VehicleModelType::modelyearid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.ModelYearId)
  return modelyearid_;
}
 void VehicleModelType::set_modelyearid(::google::protobuf::int32 value) {
  
  modelyearid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.ModelYearId)
}

// optional float Confidence = 5;
void VehicleModelType::clear_confidence() {
  confidence_ = 0;
}
 float VehicleModelType::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.Confidence)
  return confidence_;
}
 void VehicleModelType::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.Confidence)
}

// optional string Type = 6;
void VehicleModelType::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleModelType::type() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.Type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.Type)
}
 void VehicleModelType::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModelType.Type)
}
 void VehicleModelType::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModelType.Type)
}
 ::std::string* VehicleModelType::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModelType.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleModelType::release_type() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleModelType.Type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModelType.Type)
}

// optional string Brand = 7;
void VehicleModelType::clear_brand() {
  brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleModelType::brand() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.Brand)
  return brand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_brand(const ::std::string& value) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.Brand)
}
 void VehicleModelType::set_brand(const char* value) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModelType.Brand)
}
 void VehicleModelType::set_brand(const char* value, size_t size) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModelType.Brand)
}
 ::std::string* VehicleModelType::mutable_brand() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModelType.Brand)
  return brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleModelType::release_brand() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleModelType.Brand)
  
  return brand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    
  } else {
    
  }
  brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModelType.Brand)
}

// optional string SubBrand = 8;
void VehicleModelType::clear_subbrand() {
  subbrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleModelType::subbrand() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.SubBrand)
  return subbrand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_subbrand(const ::std::string& value) {
  
  subbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.SubBrand)
}
 void VehicleModelType::set_subbrand(const char* value) {
  
  subbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModelType.SubBrand)
}
 void VehicleModelType::set_subbrand(const char* value, size_t size) {
  
  subbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModelType.SubBrand)
}
 ::std::string* VehicleModelType::mutable_subbrand() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModelType.SubBrand)
  return subbrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleModelType::release_subbrand() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleModelType.SubBrand)
  
  return subbrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_allocated_subbrand(::std::string* subbrand) {
  if (subbrand != NULL) {
    
  } else {
    
  }
  subbrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subbrand);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModelType.SubBrand)
}

// optional string ModelYear = 9;
void VehicleModelType::clear_modelyear() {
  modelyear_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleModelType::modelyear() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.ModelYear)
  return modelyear_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_modelyear(const ::std::string& value) {
  
  modelyear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.ModelYear)
}
 void VehicleModelType::set_modelyear(const char* value) {
  
  modelyear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModelType.ModelYear)
}
 void VehicleModelType::set_modelyear(const char* value, size_t size) {
  
  modelyear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModelType.ModelYear)
}
 ::std::string* VehicleModelType::mutable_modelyear() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModelType.ModelYear)
  return modelyear_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleModelType::release_modelyear() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleModelType.ModelYear)
  
  return modelyear_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_allocated_modelyear(::std::string* modelyear) {
  if (modelyear != NULL) {
    
  } else {
    
  }
  modelyear_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelyear);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModelType.ModelYear)
}

// optional int32 TypeId = 10;
void VehicleModelType::clear_typeid_() {
  typeid__ = 0;
}
 ::google::protobuf::int32 VehicleModelType::typeid_() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.TypeId)
  return typeid__;
}
 void VehicleModelType::set_typeid_(::google::protobuf::int32 value) {
  
  typeid__ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.TypeId)
}

// optional string Model = 11;
void VehicleModelType::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleModelType::model() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.Model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.Model)
}
 void VehicleModelType::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleModelType.Model)
}
 void VehicleModelType::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleModelType.Model)
}
 ::std::string* VehicleModelType::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleModelType.Model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleModelType::release_model() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleModelType.Model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleModelType.Model)
}

// optional int32 IsHead = 12;
void VehicleModelType::clear_ishead() {
  ishead_ = 0;
}
 ::google::protobuf::int32 VehicleModelType::ishead() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleModelType.IsHead)
  return ishead_;
}
 void VehicleModelType::set_ishead(::google::protobuf::int32 value) {
  
  ishead_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleModelType.IsHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicensePlate::kPlateTextFieldNumber;
const int LicensePlate::kColorFieldNumber;
const int LicensePlate::kTypeIdFieldNumber;
const int LicensePlate::kTypeNameFieldNumber;
const int LicensePlate::kConfidenceFieldNumber;
const int LicensePlate::kCutboardFieldNumber;
const int LicensePlate::kLocalProvinceConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicensePlate::LicensePlate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.LicensePlate)
}

void LicensePlate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  color_ = const_cast< ::dg::model::Color*>(&::dg::model::Color::default_instance());
  cutboard_ = const_cast< ::dg::model::Cutboard*>(&::dg::model::Cutboard::default_instance());
}

LicensePlate::LicensePlate(const LicensePlate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.LicensePlate)
}

void LicensePlate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platetext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = NULL;
  typeid__ = 0;
  typename__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  cutboard_ = NULL;
  localprovinceconfidence_ = 0;
}

LicensePlate::~LicensePlate() {
  // @@protoc_insertion_point(destructor:dg.model.LicensePlate)
  SharedDtor();
}

void LicensePlate::SharedDtor() {
  platetext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typename__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete color_;
    delete cutboard_;
  }
}

void LicensePlate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LicensePlate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LicensePlate_descriptor_;
}

const LicensePlate& LicensePlate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LicensePlate* LicensePlate::default_instance_ = NULL;

LicensePlate* LicensePlate::New(::google::protobuf::Arena* arena) const {
  LicensePlate* n = new LicensePlate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LicensePlate::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.LicensePlate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LicensePlate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LicensePlate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(typeid__, confidence_);
  platetext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
  typename__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
  localprovinceconfidence_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool LicensePlate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.LicensePlate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PlateText = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platetext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->platetext().data(), this->platetext().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.LicensePlate.PlateText"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Color;
        break;
      }

      // optional .dg.model.Color Color = 2;
      case 2: {
        if (tag == 18) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TypeId;
        break;
      }

      // optional int32 TypeId = 3;
      case 3: {
        if (tag == 24) {
         parse_TypeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TypeName;
        break;
      }

      // optional string TypeName = 4;
      case 4: {
        if (tag == 34) {
         parse_TypeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typename_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->typename_().data(), this->typename_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.LicensePlate.TypeName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 5;
      case 5: {
        if (tag == 45) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Cutboard;
        break;
      }

      // optional .dg.model.Cutboard Cutboard = 6;
      case 6: {
        if (tag == 50) {
         parse_Cutboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_LocalProvinceConfidence;
        break;
      }

      // optional float LocalProvinceConfidence = 7;
      case 7: {
        if (tag == 61) {
         parse_LocalProvinceConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &localprovinceconfidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.LicensePlate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.LicensePlate)
  return false;
#undef DO_
}

void LicensePlate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.LicensePlate)
  // optional string PlateText = 1;
  if (this->platetext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platetext().data(), this->platetext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.LicensePlate.PlateText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->platetext(), output);
  }

  // optional .dg.model.Color Color = 2;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->color_, output);
  }

  // optional int32 TypeId = 3;
  if (this->typeid_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeid_(), output);
  }

  // optional string TypeName = 4;
  if (this->typename_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.LicensePlate.TypeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->typename_(), output);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->confidence(), output);
  }

  // optional .dg.model.Cutboard Cutboard = 6;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->cutboard_, output);
  }

  // optional float LocalProvinceConfidence = 7;
  if (this->localprovinceconfidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->localprovinceconfidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.LicensePlate)
}

::google::protobuf::uint8* LicensePlate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.LicensePlate)
  // optional string PlateText = 1;
  if (this->platetext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platetext().data(), this->platetext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.LicensePlate.PlateText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platetext(), target);
  }

  // optional .dg.model.Color Color = 2;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->color_, target);
  }

  // optional int32 TypeId = 3;
  if (this->typeid_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeid_(), target);
  }

  // optional string TypeName = 4;
  if (this->typename_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.LicensePlate.TypeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->typename_(), target);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->confidence(), target);
  }

  // optional .dg.model.Cutboard Cutboard = 6;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->cutboard_, target);
  }

  // optional float LocalProvinceConfidence = 7;
  if (this->localprovinceconfidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->localprovinceconfidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.LicensePlate)
  return target;
}

int LicensePlate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.LicensePlate)
  int total_size = 0;

  // optional string PlateText = 1;
  if (this->platetext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platetext());
  }

  // optional .dg.model.Color Color = 2;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // optional int32 TypeId = 3;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  // optional string TypeName = 4;
  if (this->typename_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->typename_());
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional .dg.model.Cutboard Cutboard = 6;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  // optional float LocalProvinceConfidence = 7;
  if (this->localprovinceconfidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LicensePlate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.LicensePlate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LicensePlate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LicensePlate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.LicensePlate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.LicensePlate)
    MergeFrom(*source);
  }
}

void LicensePlate::MergeFrom(const LicensePlate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.LicensePlate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.platetext().size() > 0) {

    platetext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platetext_);
  }
  if (from.has_color()) {
    mutable_color()->::dg::model::Color::MergeFrom(from.color());
  }
  if (from.typeid_() != 0) {
    set_typeid_(from.typeid_());
  }
  if (from.typename_().size() > 0) {

    typename__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.typename__);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.has_cutboard()) {
    mutable_cutboard()->::dg::model::Cutboard::MergeFrom(from.cutboard());
  }
  if (from.localprovinceconfidence() != 0) {
    set_localprovinceconfidence(from.localprovinceconfidence());
  }
}

void LicensePlate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.LicensePlate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicensePlate::CopyFrom(const LicensePlate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.LicensePlate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicensePlate::IsInitialized() const {

  return true;
}

void LicensePlate::Swap(LicensePlate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicensePlate::InternalSwap(LicensePlate* other) {
  platetext_.Swap(&other->platetext_);
  std::swap(color_, other->color_);
  std::swap(typeid__, other->typeid__);
  typename__.Swap(&other->typename__);
  std::swap(confidence_, other->confidence_);
  std::swap(cutboard_, other->cutboard_);
  std::swap(localprovinceconfidence_, other->localprovinceconfidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LicensePlate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LicensePlate_descriptor_;
  metadata.reflection = LicensePlate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LicensePlate

// optional string PlateText = 1;
void LicensePlate::clear_platetext() {
  platetext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LicensePlate::platetext() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.PlateText)
  return platetext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_platetext(const ::std::string& value) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.PlateText)
}
 void LicensePlate::set_platetext(const char* value) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.LicensePlate.PlateText)
}
 void LicensePlate::set_platetext(const char* value, size_t size) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.LicensePlate.PlateText)
}
 ::std::string* LicensePlate::mutable_platetext() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.PlateText)
  return platetext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LicensePlate::release_platetext() {
  // @@protoc_insertion_point(field_release:dg.model.LicensePlate.PlateText)
  
  return platetext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_allocated_platetext(::std::string* platetext) {
  if (platetext != NULL) {
    
  } else {
    
  }
  platetext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platetext);
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.PlateText)
}

// optional .dg.model.Color Color = 2;
bool LicensePlate::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void LicensePlate::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::dg::model::Color& LicensePlate::color() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::dg::model::Color* LicensePlate::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::dg::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.Color)
  return color_;
}
::dg::model::Color* LicensePlate::release_color() {
  // @@protoc_insertion_point(field_release:dg.model.LicensePlate.Color)
  
  ::dg::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void LicensePlate::set_allocated_color(::dg::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.Color)
}

// optional int32 TypeId = 3;
void LicensePlate::clear_typeid_() {
  typeid__ = 0;
}
 ::google::protobuf::int32 LicensePlate::typeid_() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.TypeId)
  return typeid__;
}
 void LicensePlate::set_typeid_(::google::protobuf::int32 value) {
  
  typeid__ = value;
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.TypeId)
}

// optional string TypeName = 4;
void LicensePlate::clear_typename_() {
  typename__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LicensePlate::typename_() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.TypeName)
  return typename__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_typename_(const ::std::string& value) {
  
  typename__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.TypeName)
}
 void LicensePlate::set_typename_(const char* value) {
  
  typename__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.LicensePlate.TypeName)
}
 void LicensePlate::set_typename_(const char* value, size_t size) {
  
  typename__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.LicensePlate.TypeName)
}
 ::std::string* LicensePlate::mutable_typename_() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.TypeName)
  return typename__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LicensePlate::release_typename_() {
  // @@protoc_insertion_point(field_release:dg.model.LicensePlate.TypeName)
  
  return typename__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_allocated_typename_(::std::string* typename_) {
  if (typename_ != NULL) {
    
  } else {
    
  }
  typename__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), typename_);
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.TypeName)
}

// optional float Confidence = 5;
void LicensePlate::clear_confidence() {
  confidence_ = 0;
}
 float LicensePlate::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.Confidence)
  return confidence_;
}
 void LicensePlate::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.Confidence)
}

// optional .dg.model.Cutboard Cutboard = 6;
bool LicensePlate::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void LicensePlate::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::dg::model::Cutboard& LicensePlate::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::dg::model::Cutboard* LicensePlate::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.LicensePlate.Cutboard)
  return cutboard_;
}
::dg::model::Cutboard* LicensePlate::release_cutboard() {
  // @@protoc_insertion_point(field_release:dg.model.LicensePlate.Cutboard)
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void LicensePlate::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.LicensePlate.Cutboard)
}

// optional float LocalProvinceConfidence = 7;
void LicensePlate::clear_localprovinceconfidence() {
  localprovinceconfidence_ = 0;
}
 float LicensePlate::localprovinceconfidence() const {
  // @@protoc_insertion_point(field_get:dg.model.LicensePlate.LocalProvinceConfidence)
  return localprovinceconfidence_;
}
 void LicensePlate::set_localprovinceconfidence(float value) {
  
  localprovinceconfidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.LicensePlate.LocalProvinceConfidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSymbol::kSymbolIdFieldNumber;
const int VehicleSymbol::kSymbolNameFieldNumber;
const int VehicleSymbol::kSymbolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSymbol::VehicleSymbol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.VehicleSymbol)
}

void VehicleSymbol::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VehicleSymbol::VehicleSymbol(const VehicleSymbol& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.VehicleSymbol)
}

void VehicleSymbol::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbolid_ = 0;
  symbolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VehicleSymbol::~VehicleSymbol() {
  // @@protoc_insertion_point(destructor:dg.model.VehicleSymbol)
  SharedDtor();
}

void VehicleSymbol::SharedDtor() {
  symbolname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VehicleSymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleSymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleSymbol_descriptor_;
}

const VehicleSymbol& VehicleSymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

VehicleSymbol* VehicleSymbol::default_instance_ = NULL;

VehicleSymbol* VehicleSymbol::New(::google::protobuf::Arena* arena) const {
  VehicleSymbol* n = new VehicleSymbol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.VehicleSymbol)
  symbolid_ = 0;
  symbolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbols_.Clear();
}

bool VehicleSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.VehicleSymbol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SymbolId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symbolid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SymbolName;
        break;
      }

      // optional string SymbolName = 2;
      case 2: {
        if (tag == 18) {
         parse_SymbolName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbolname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbolname().data(), this->symbolname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.VehicleSymbol.SymbolName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Symbols;
        break;
      }

      // repeated .dg.model.Symbol Symbols = 3;
      case 3: {
        if (tag == 26) {
         parse_Symbols:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Symbols;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.VehicleSymbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.VehicleSymbol)
  return false;
#undef DO_
}

void VehicleSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.VehicleSymbol)
  // optional int32 SymbolId = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->symbolid(), output);
  }

  // optional string SymbolName = 2;
  if (this->symbolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbolname().data(), this->symbolname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleSymbol.SymbolName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbolname(), output);
  }

  // repeated .dg.model.Symbol Symbols = 3;
  for (unsigned int i = 0, n = this->symbols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->symbols(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.VehicleSymbol)
}

::google::protobuf::uint8* VehicleSymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.VehicleSymbol)
  // optional int32 SymbolId = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->symbolid(), target);
  }

  // optional string SymbolName = 2;
  if (this->symbolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbolname().data(), this->symbolname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.VehicleSymbol.SymbolName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbolname(), target);
  }

  // repeated .dg.model.Symbol Symbols = 3;
  for (unsigned int i = 0, n = this->symbols_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->symbols(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.VehicleSymbol)
  return target;
}

int VehicleSymbol::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.VehicleSymbol)
  int total_size = 0;

  // optional int32 SymbolId = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->symbolid());
  }

  // optional string SymbolName = 2;
  if (this->symbolname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbolname());
  }

  // repeated .dg.model.Symbol Symbols = 3;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleSymbol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.VehicleSymbol)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehicleSymbol* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleSymbol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.VehicleSymbol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.VehicleSymbol)
    MergeFrom(*source);
  }
}

void VehicleSymbol::MergeFrom(const VehicleSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.VehicleSymbol)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  symbols_.MergeFrom(from.symbols_);
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.symbolname().size() > 0) {

    symbolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbolname_);
  }
}

void VehicleSymbol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.VehicleSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSymbol::CopyFrom(const VehicleSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.VehicleSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSymbol::IsInitialized() const {

  return true;
}

void VehicleSymbol::Swap(VehicleSymbol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleSymbol::InternalSwap(VehicleSymbol* other) {
  std::swap(symbolid_, other->symbolid_);
  symbolname_.Swap(&other->symbolname_);
  symbols_.UnsafeArenaSwap(&other->symbols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleSymbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleSymbol_descriptor_;
  metadata.reflection = VehicleSymbol_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleSymbol

// optional int32 SymbolId = 1;
void VehicleSymbol::clear_symbolid() {
  symbolid_ = 0;
}
 ::google::protobuf::int32 VehicleSymbol::symbolid() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleSymbol.SymbolId)
  return symbolid_;
}
 void VehicleSymbol::set_symbolid(::google::protobuf::int32 value) {
  
  symbolid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.VehicleSymbol.SymbolId)
}

// optional string SymbolName = 2;
void VehicleSymbol::clear_symbolname() {
  symbolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleSymbol::symbolname() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleSymbol.SymbolName)
  return symbolname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleSymbol::set_symbolname(const ::std::string& value) {
  
  symbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.VehicleSymbol.SymbolName)
}
 void VehicleSymbol::set_symbolname(const char* value) {
  
  symbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.VehicleSymbol.SymbolName)
}
 void VehicleSymbol::set_symbolname(const char* value, size_t size) {
  
  symbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.VehicleSymbol.SymbolName)
}
 ::std::string* VehicleSymbol::mutable_symbolname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleSymbol.SymbolName)
  return symbolname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleSymbol::release_symbolname() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleSymbol.SymbolName)
  
  return symbolname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleSymbol::set_allocated_symbolname(::std::string* symbolname) {
  if (symbolname != NULL) {
    
  } else {
    
  }
  symbolname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbolname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleSymbol.SymbolName)
}

// repeated .dg.model.Symbol Symbols = 3;
int VehicleSymbol::symbols_size() const {
  return symbols_.size();
}
void VehicleSymbol::clear_symbols() {
  symbols_.Clear();
}
const ::dg::model::Symbol& VehicleSymbol::symbols(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleSymbol.Symbols)
  return symbols_.Get(index);
}
::dg::model::Symbol* VehicleSymbol::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleSymbol.Symbols)
  return symbols_.Mutable(index);
}
::dg::model::Symbol* VehicleSymbol::add_symbols() {
  // @@protoc_insertion_point(field_add:dg.model.VehicleSymbol.Symbols)
  return symbols_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::Symbol >*
VehicleSymbol::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.VehicleSymbol.Symbols)
  return &symbols_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::Symbol >&
VehicleSymbol::symbols() const {
  // @@protoc_insertion_point(field_list:dg.model.VehicleSymbol.Symbols)
  return symbols_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Symbol::kCutboardFieldNumber;
const int Symbol::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Symbol::Symbol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Symbol)
}

void Symbol::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cutboard_ = const_cast< ::dg::model::Cutboard*>(&::dg::model::Cutboard::default_instance());
}

Symbol::Symbol(const Symbol& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Symbol)
}

void Symbol::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cutboard_ = NULL;
  confidence_ = 0;
}

Symbol::~Symbol() {
  // @@protoc_insertion_point(destructor:dg.model.Symbol)
  SharedDtor();
}

void Symbol::SharedDtor() {
  if (this != default_instance_) {
    delete cutboard_;
  }
}

void Symbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Symbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Symbol_descriptor_;
}

const Symbol& Symbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Symbol* Symbol::default_instance_ = NULL;

Symbol* Symbol::New(::google::protobuf::Arena* arena) const {
  Symbol* n = new Symbol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Symbol::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.Symbol)
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
  confidence_ = 0;
}

bool Symbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Symbol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.Cutboard Cutboard = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 2;
      case 2: {
        if (tag == 21) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Symbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Symbol)
  return false;
#undef DO_
}

void Symbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Symbol)
  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cutboard_, output);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Symbol)
}

::google::protobuf::uint8* Symbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Symbol)
  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->cutboard_, target);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Symbol)
  return target;
}

int Symbol::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.Symbol)
  int total_size = 0;

  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Symbol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.Symbol)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Symbol* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Symbol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.Symbol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.Symbol)
    MergeFrom(*source);
  }
}

void Symbol::MergeFrom(const Symbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.Symbol)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_cutboard()) {
    mutable_cutboard()->::dg::model::Cutboard::MergeFrom(from.cutboard());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void Symbol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Symbol::CopyFrom(const Symbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Symbol::IsInitialized() const {

  return true;
}

void Symbol::Swap(Symbol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Symbol::InternalSwap(Symbol* other) {
  std::swap(cutboard_, other->cutboard_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Symbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Symbol_descriptor_;
  metadata.reflection = Symbol_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Symbol

// optional .dg.model.Cutboard Cutboard = 1;
bool Symbol::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void Symbol::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::dg::model::Cutboard& Symbol::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.Symbol.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::dg::model::Cutboard* Symbol::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.Symbol.Cutboard)
  return cutboard_;
}
::dg::model::Cutboard* Symbol::release_cutboard() {
  // @@protoc_insertion_point(field_release:dg.model.Symbol.Cutboard)
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void Symbol::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.Symbol.Cutboard)
}

// optional float Confidence = 2;
void Symbol::clear_confidence() {
  confidence_ = 0;
}
 float Symbol::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Symbol.Confidence)
  return confidence_;
}
 void Symbol::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Symbol.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageConfig::kAddressFieldNumber;
const int StorageConfig::kTypeFieldNumber;
const int StorageConfig::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageConfig::StorageConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.StorageConfig)
}

void StorageConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StorageConfig::StorageConfig(const StorageConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.StorageConfig)
}

void StorageConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

StorageConfig::~StorageConfig() {
  // @@protoc_insertion_point(destructor:dg.model.StorageConfig)
  SharedDtor();
}

void StorageConfig::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageConfig_descriptor_;
}

const StorageConfig& StorageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

StorageConfig* StorageConfig::default_instance_ = NULL;

StorageConfig* StorageConfig::New(::google::protobuf::Arena* arena) const {
  StorageConfig* n = new StorageConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.StorageConfig)
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  tags_.Clear();
}

bool StorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.StorageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.StorageConfig.Address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .dg.model.DBType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dg::model::DBType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Tags;
        break;
      }

      // repeated string Tags = 3;
      case 3: {
        if (tag == 26) {
         parse_Tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.StorageConfig.Tags"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Tags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.StorageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.StorageConfig)
  return false;
#undef DO_
}

void StorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.StorageConfig)
  // optional string Address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.StorageConfig.Address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional .dg.model.DBType Type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated string Tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.StorageConfig.Tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.StorageConfig)
}

::google::protobuf::uint8* StorageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.StorageConfig)
  // optional string Address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.StorageConfig.Address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional .dg.model.DBType Type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated string Tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.StorageConfig.Tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tags(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.StorageConfig)
  return target;
}

int StorageConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.StorageConfig)
  int total_size = 0;

  // optional string Address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional .dg.model.DBType Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated string Tags = 3;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.StorageConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StorageConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.StorageConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.StorageConfig)
    MergeFrom(*source);
  }
}

void StorageConfig::MergeFrom(const StorageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.StorageConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tags_.MergeFrom(from.tags_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void StorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.StorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageConfig::CopyFrom(const StorageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.StorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageConfig::IsInitialized() const {

  return true;
}

void StorageConfig::Swap(StorageConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageConfig::InternalSwap(StorageConfig* other) {
  address_.Swap(&other->address_);
  std::swap(type_, other->type_);
  tags_.UnsafeArenaSwap(&other->tags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageConfig_descriptor_;
  metadata.reflection = StorageConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageConfig

// optional string Address = 1;
void StorageConfig::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StorageConfig::address() const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StorageConfig::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Address)
}
 void StorageConfig::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.StorageConfig.Address)
}
 void StorageConfig::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.StorageConfig.Address)
}
 ::std::string* StorageConfig::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.StorageConfig.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StorageConfig::release_address() {
  // @@protoc_insertion_point(field_release:dg.model.StorageConfig.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StorageConfig::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:dg.model.StorageConfig.Address)
}

// optional .dg.model.DBType Type = 2;
void StorageConfig::clear_type() {
  type_ = 0;
}
 ::dg::model::DBType StorageConfig::type() const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Type)
  return static_cast< ::dg::model::DBType >(type_);
}
 void StorageConfig::set_type(::dg::model::DBType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Type)
}

// repeated string Tags = 3;
int StorageConfig::tags_size() const {
  return tags_.size();
}
void StorageConfig::clear_tags() {
  tags_.Clear();
}
 const ::std::string& StorageConfig::tags(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Tags)
  return tags_.Get(index);
}
 ::std::string* StorageConfig::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.StorageConfig.Tags)
  return tags_.Mutable(index);
}
 void StorageConfig::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Tags)
  tags_.Mutable(index)->assign(value);
}
 void StorageConfig::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dg.model.StorageConfig.Tags)
}
 void StorageConfig::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dg.model.StorageConfig.Tags)
}
 ::std::string* StorageConfig::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:dg.model.StorageConfig.Tags)
  return tags_.Add();
}
 void StorageConfig::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dg.model.StorageConfig.Tags)
}
 void StorageConfig::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dg.model.StorageConfig.Tags)
}
 void StorageConfig::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dg.model.StorageConfig.Tags)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
StorageConfig::tags() const {
  // @@protoc_insertion_point(field_list:dg.model.StorageConfig.Tags)
  return tags_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
StorageConfig::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.StorageConfig.Tags)
  return &tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleObj::kMetadataFieldNumber;
const int VehicleObj::kImgFieldNumber;
const int VehicleObj::kVehicleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleObj::VehicleObj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.VehicleObj)
}

void VehicleObj::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::dg::model::SrcMetadata*>(&::dg::model::SrcMetadata::default_instance());
  img_ = const_cast< ::dg::model::Image*>(&::dg::model::Image::default_instance());
}

VehicleObj::VehicleObj(const VehicleObj& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.VehicleObj)
}

void VehicleObj::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  metadata_ = NULL;
  img_ = NULL;
}

VehicleObj::~VehicleObj() {
  // @@protoc_insertion_point(destructor:dg.model.VehicleObj)
  SharedDtor();
}

void VehicleObj::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
    delete img_;
  }
}

void VehicleObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleObj_descriptor_;
}

const VehicleObj& VehicleObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

VehicleObj* VehicleObj::default_instance_ = NULL;

VehicleObj* VehicleObj::New(::google::protobuf::Arena* arena) const {
  VehicleObj* n = new VehicleObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleObj::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.VehicleObj)
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  vehicle_.Clear();
}

bool VehicleObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.VehicleObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.SrcMetadata Metadata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Img;
        break;
      }

      // optional .dg.model.Image Img = 2;
      case 2: {
        if (tag == 18) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Vehicle;
        break;
      }

      // repeated .dg.model.RecVehicle Vehicle = 3;
      case 3: {
        if (tag == 26) {
         parse_Vehicle:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Vehicle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.VehicleObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.VehicleObj)
  return false;
#undef DO_
}

void VehicleObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.VehicleObj)
  // optional .dg.model.SrcMetadata Metadata = 1;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->metadata_, output);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_, output);
  }

  // repeated .dg.model.RecVehicle Vehicle = 3;
  for (unsigned int i = 0, n = this->vehicle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vehicle(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.VehicleObj)
}

::google::protobuf::uint8* VehicleObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.VehicleObj)
  // optional .dg.model.SrcMetadata Metadata = 1;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->metadata_, target);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->img_, target);
  }

  // repeated .dg.model.RecVehicle Vehicle = 3;
  for (unsigned int i = 0, n = this->vehicle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vehicle(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.VehicleObj)
  return target;
}

int VehicleObj::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.VehicleObj)
  int total_size = 0;

  // optional .dg.model.SrcMetadata Metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // repeated .dg.model.RecVehicle Vehicle = 3;
  total_size += 1 * this->vehicle_size();
  for (int i = 0; i < this->vehicle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicle(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleObj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.VehicleObj)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehicleObj* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleObj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.VehicleObj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.VehicleObj)
    MergeFrom(*source);
  }
}

void VehicleObj::MergeFrom(const VehicleObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.VehicleObj)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vehicle_.MergeFrom(from.vehicle_);
  if (from.has_metadata()) {
    mutable_metadata()->::dg::model::SrcMetadata::MergeFrom(from.metadata());
  }
  if (from.has_img()) {
    mutable_img()->::dg::model::Image::MergeFrom(from.img());
  }
}

void VehicleObj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.VehicleObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleObj::CopyFrom(const VehicleObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.VehicleObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleObj::IsInitialized() const {

  return true;
}

void VehicleObj::Swap(VehicleObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleObj::InternalSwap(VehicleObj* other) {
  std::swap(metadata_, other->metadata_);
  std::swap(img_, other->img_);
  vehicle_.UnsafeArenaSwap(&other->vehicle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleObj_descriptor_;
  metadata.reflection = VehicleObj_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleObj

// optional .dg.model.SrcMetadata Metadata = 1;
bool VehicleObj::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void VehicleObj::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::dg::model::SrcMetadata& VehicleObj::metadata() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleObj.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::dg::model::SrcMetadata* VehicleObj::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::dg::model::SrcMetadata;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleObj.Metadata)
  return metadata_;
}
::dg::model::SrcMetadata* VehicleObj::release_metadata() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleObj.Metadata)
  
  ::dg::model::SrcMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void VehicleObj::set_allocated_metadata(::dg::model::SrcMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleObj.Metadata)
}

// optional .dg.model.Image Img = 2;
bool VehicleObj::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void VehicleObj::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::dg::model::Image& VehicleObj::img() const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleObj.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::dg::model::Image* VehicleObj::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleObj.Img)
  return img_;
}
::dg::model::Image* VehicleObj::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.VehicleObj.Img)
  
  ::dg::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
void VehicleObj::set_allocated_img(::dg::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.VehicleObj.Img)
}

// repeated .dg.model.RecVehicle Vehicle = 3;
int VehicleObj::vehicle_size() const {
  return vehicle_.size();
}
void VehicleObj::clear_vehicle() {
  vehicle_.Clear();
}
const ::dg::model::RecVehicle& VehicleObj::vehicle(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.VehicleObj.Vehicle)
  return vehicle_.Get(index);
}
::dg::model::RecVehicle* VehicleObj::mutable_vehicle(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.VehicleObj.Vehicle)
  return vehicle_.Mutable(index);
}
::dg::model::RecVehicle* VehicleObj::add_vehicle() {
  // @@protoc_insertion_point(field_add:dg.model.VehicleObj.Vehicle)
  return vehicle_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >*
VehicleObj::mutable_vehicle() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.VehicleObj.Vehicle)
  return &vehicle_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >&
VehicleObj::vehicle() const {
  // @@protoc_insertion_point(field_list:dg.model.VehicleObj.Vehicle)
  return vehicle_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PedestrianObj::kMetadataFieldNumber;
const int PedestrianObj::kImgFieldNumber;
const int PedestrianObj::kPedestrianFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PedestrianObj::PedestrianObj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.PedestrianObj)
}

void PedestrianObj::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::dg::model::SrcMetadata*>(&::dg::model::SrcMetadata::default_instance());
  img_ = const_cast< ::dg::model::Image*>(&::dg::model::Image::default_instance());
}

PedestrianObj::PedestrianObj(const PedestrianObj& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.PedestrianObj)
}

void PedestrianObj::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  metadata_ = NULL;
  img_ = NULL;
}

PedestrianObj::~PedestrianObj() {
  // @@protoc_insertion_point(destructor:dg.model.PedestrianObj)
  SharedDtor();
}

void PedestrianObj::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
    delete img_;
  }
}

void PedestrianObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PedestrianObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PedestrianObj_descriptor_;
}

const PedestrianObj& PedestrianObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PedestrianObj* PedestrianObj::default_instance_ = NULL;

PedestrianObj* PedestrianObj::New(::google::protobuf::Arena* arena) const {
  PedestrianObj* n = new PedestrianObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PedestrianObj::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.PedestrianObj)
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  pedestrian_.Clear();
}

bool PedestrianObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.PedestrianObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.SrcMetadata Metadata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Img;
        break;
      }

      // optional .dg.model.Image Img = 2;
      case 2: {
        if (tag == 18) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Pedestrian;
        break;
      }

      // repeated .dg.model.RecPedestrian Pedestrian = 3;
      case 3: {
        if (tag == 26) {
         parse_Pedestrian:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Pedestrian:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pedestrian()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Pedestrian;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.PedestrianObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.PedestrianObj)
  return false;
#undef DO_
}

void PedestrianObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.PedestrianObj)
  // optional .dg.model.SrcMetadata Metadata = 1;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->metadata_, output);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_, output);
  }

  // repeated .dg.model.RecPedestrian Pedestrian = 3;
  for (unsigned int i = 0, n = this->pedestrian_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pedestrian(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.PedestrianObj)
}

::google::protobuf::uint8* PedestrianObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.PedestrianObj)
  // optional .dg.model.SrcMetadata Metadata = 1;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->metadata_, target);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->img_, target);
  }

  // repeated .dg.model.RecPedestrian Pedestrian = 3;
  for (unsigned int i = 0, n = this->pedestrian_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pedestrian(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.PedestrianObj)
  return target;
}

int PedestrianObj::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.PedestrianObj)
  int total_size = 0;

  // optional .dg.model.SrcMetadata Metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // repeated .dg.model.RecPedestrian Pedestrian = 3;
  total_size += 1 * this->pedestrian_size();
  for (int i = 0; i < this->pedestrian_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pedestrian(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PedestrianObj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.PedestrianObj)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PedestrianObj* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PedestrianObj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.PedestrianObj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.PedestrianObj)
    MergeFrom(*source);
  }
}

void PedestrianObj::MergeFrom(const PedestrianObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.PedestrianObj)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  pedestrian_.MergeFrom(from.pedestrian_);
  if (from.has_metadata()) {
    mutable_metadata()->::dg::model::SrcMetadata::MergeFrom(from.metadata());
  }
  if (from.has_img()) {
    mutable_img()->::dg::model::Image::MergeFrom(from.img());
  }
}

void PedestrianObj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.PedestrianObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PedestrianObj::CopyFrom(const PedestrianObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.PedestrianObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PedestrianObj::IsInitialized() const {

  return true;
}

void PedestrianObj::Swap(PedestrianObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PedestrianObj::InternalSwap(PedestrianObj* other) {
  std::swap(metadata_, other->metadata_);
  std::swap(img_, other->img_);
  pedestrian_.UnsafeArenaSwap(&other->pedestrian_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PedestrianObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PedestrianObj_descriptor_;
  metadata.reflection = PedestrianObj_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PedestrianObj

// optional .dg.model.SrcMetadata Metadata = 1;
bool PedestrianObj::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void PedestrianObj::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::dg::model::SrcMetadata& PedestrianObj::metadata() const {
  // @@protoc_insertion_point(field_get:dg.model.PedestrianObj.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::dg::model::SrcMetadata* PedestrianObj::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::dg::model::SrcMetadata;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.PedestrianObj.Metadata)
  return metadata_;
}
::dg::model::SrcMetadata* PedestrianObj::release_metadata() {
  // @@protoc_insertion_point(field_release:dg.model.PedestrianObj.Metadata)
  
  ::dg::model::SrcMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void PedestrianObj::set_allocated_metadata(::dg::model::SrcMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.PedestrianObj.Metadata)
}

// optional .dg.model.Image Img = 2;
bool PedestrianObj::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void PedestrianObj::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::dg::model::Image& PedestrianObj::img() const {
  // @@protoc_insertion_point(field_get:dg.model.PedestrianObj.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::dg::model::Image* PedestrianObj::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.PedestrianObj.Img)
  return img_;
}
::dg::model::Image* PedestrianObj::release_img() {
  // @@protoc_insertion_point(field_release:dg.model.PedestrianObj.Img)
  
  ::dg::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
void PedestrianObj::set_allocated_img(::dg::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.PedestrianObj.Img)
}

// repeated .dg.model.RecPedestrian Pedestrian = 3;
int PedestrianObj::pedestrian_size() const {
  return pedestrian_.size();
}
void PedestrianObj::clear_pedestrian() {
  pedestrian_.Clear();
}
const ::dg::model::RecPedestrian& PedestrianObj::pedestrian(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.PedestrianObj.Pedestrian)
  return pedestrian_.Get(index);
}
::dg::model::RecPedestrian* PedestrianObj::mutable_pedestrian(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.PedestrianObj.Pedestrian)
  return pedestrian_.Mutable(index);
}
::dg::model::RecPedestrian* PedestrianObj::add_pedestrian() {
  // @@protoc_insertion_point(field_add:dg.model.PedestrianObj.Pedestrian)
  return pedestrian_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >*
PedestrianObj::mutable_pedestrian() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.PedestrianObj.Pedestrian)
  return &pedestrian_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >&
PedestrianObj::pedestrian() const {
  // @@protoc_insertion_point(field_list:dg.model.PedestrianObj.Pedestrian)
  return pedestrian_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace dg

// @@protoc_insertion_point(global_scope)
