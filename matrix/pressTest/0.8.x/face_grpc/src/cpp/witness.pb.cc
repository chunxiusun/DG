// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: witness.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "witness.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dg {
namespace model {

namespace {

const ::google::protobuf::Descriptor* WitnessUserObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessUserObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexTxtRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexTxtRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexTxtResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexTxtResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonIndex_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonIndex_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrandIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrandIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrandIndex_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrandIndex_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexResponse_reflection_ = NULL;
struct IndexResponseOneofInstance {
  const ::dg::model::CommonIndex* index_;
  const ::dg::model::BrandIndex* brandindex_;
}* IndexResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* WitnessRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessBatchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessBatchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessBatchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessBatchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessRelativeROI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessRelativeROI_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessMarginROI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessMarginROI_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessRequestContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessRequestContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessRequestContext_ParamsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WitnessImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessResponseContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessResponseContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* WitnessResponseContext_DebugTsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WitnessResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WitnessResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IndexType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WitnessUserObjectType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_witness_2eproto() {
  protobuf_AddDesc_witness_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "witness.proto");
  GOOGLE_CHECK(file != NULL);
  WitnessUserObject_descriptor_ = file->message_type(0);
  static const int WitnessUserObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessUserObject, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessUserObject, detectresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessUserObject, alignresult_),
  };
  WitnessUserObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessUserObject_descriptor_,
      WitnessUserObject::default_instance_,
      WitnessUserObject_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessUserObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessUserObject, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessUserObject, _is_default_instance_));
  IndexRequest_descriptor_ = file->message_type(1);
  static const int IndexRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRequest, indextype_),
  };
  IndexRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IndexRequest_descriptor_,
      IndexRequest::default_instance_,
      IndexRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(IndexRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRequest, _is_default_instance_));
  IndexTxtRequest_descriptor_ = file->message_type(2);
  static const int IndexTxtRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexTxtRequest, indextype_),
  };
  IndexTxtRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IndexTxtRequest_descriptor_,
      IndexTxtRequest::default_instance_,
      IndexTxtRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(IndexTxtRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexTxtRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexTxtRequest, _is_default_instance_));
  IndexTxtResponse_descriptor_ = file->message_type(3);
  static const int IndexTxtResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexTxtResponse, context_),
  };
  IndexTxtResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IndexTxtResponse_descriptor_,
      IndexTxtResponse::default_instance_,
      IndexTxtResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(IndexTxtResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexTxtResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexTxtResponse, _is_default_instance_));
  CommonIndex_descriptor_ = file->message_type(4);
  static const int CommonIndex_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonIndex, items_),
  };
  CommonIndex_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommonIndex_descriptor_,
      CommonIndex::default_instance_,
      CommonIndex_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommonIndex),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonIndex, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonIndex, _is_default_instance_));
  CommonIndex_Item_descriptor_ = CommonIndex_descriptor_->nested_type(0);
  static const int CommonIndex_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonIndex_Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonIndex_Item, name_),
  };
  CommonIndex_Item_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommonIndex_Item_descriptor_,
      CommonIndex_Item::default_instance_,
      CommonIndex_Item_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommonIndex_Item),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonIndex_Item, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonIndex_Item, _is_default_instance_));
  BrandIndex_descriptor_ = file->message_type(5);
  static const int BrandIndex_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex, items_),
  };
  BrandIndex_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BrandIndex_descriptor_,
      BrandIndex::default_instance_,
      BrandIndex_offsets_,
      -1,
      -1,
      -1,
      sizeof(BrandIndex),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex, _is_default_instance_));
  BrandIndex_Item_descriptor_ = BrandIndex_descriptor_->nested_type(0);
  static const int BrandIndex_Item_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex_Item, mainbrandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex_Item, subbrandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex_Item, yearmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex_Item, mainbrandname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex_Item, subbrandname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex_Item, yearmodelname_),
  };
  BrandIndex_Item_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BrandIndex_Item_descriptor_,
      BrandIndex_Item::default_instance_,
      BrandIndex_Item_offsets_,
      -1,
      -1,
      -1,
      sizeof(BrandIndex_Item),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex_Item, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrandIndex_Item, _is_default_instance_));
  IndexResponse_descriptor_ = file->message_type(6);
  static const int IndexResponse_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(IndexResponse_default_oneof_instance_, index_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(IndexResponse_default_oneof_instance_, brandindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexResponse, index_content_),
  };
  IndexResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IndexResponse_descriptor_,
      IndexResponse::default_instance_,
      IndexResponse_offsets_,
      -1,
      -1,
      -1,
      IndexResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexResponse, _oneof_case_[0]),
      sizeof(IndexResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexResponse, _is_default_instance_));
  WitnessRequest_descriptor_ = file->message_type(7);
  static const int WitnessRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequest, image_),
  };
  WitnessRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessRequest_descriptor_,
      WitnessRequest::default_instance_,
      WitnessRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequest, _is_default_instance_));
  WitnessBatchRequest_descriptor_ = file->message_type(8);
  static const int WitnessBatchRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchRequest, images_),
  };
  WitnessBatchRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessBatchRequest_descriptor_,
      WitnessBatchRequest::default_instance_,
      WitnessBatchRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessBatchRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchRequest, _is_default_instance_));
  WitnessResponse_descriptor_ = file->message_type(9);
  static const int WitnessResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponse, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponse, result_),
  };
  WitnessResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessResponse_descriptor_,
      WitnessResponse::default_instance_,
      WitnessResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponse, _is_default_instance_));
  WitnessBatchResponse_descriptor_ = file->message_type(10);
  static const int WitnessBatchResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchResponse, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchResponse, results_),
  };
  WitnessBatchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessBatchResponse_descriptor_,
      WitnessBatchResponse::default_instance_,
      WitnessBatchResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessBatchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessBatchResponse, _is_default_instance_));
  WitnessRelativeROI_descriptor_ = file->message_type(11);
  static const int WitnessRelativeROI_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRelativeROI, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRelativeROI, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRelativeROI, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRelativeROI, height_),
  };
  WitnessRelativeROI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessRelativeROI_descriptor_,
      WitnessRelativeROI::default_instance_,
      WitnessRelativeROI_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessRelativeROI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRelativeROI, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRelativeROI, _is_default_instance_));
  WitnessMarginROI_descriptor_ = file->message_type(12);
  static const int WitnessMarginROI_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessMarginROI, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessMarginROI, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessMarginROI, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessMarginROI, bottom_),
  };
  WitnessMarginROI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessMarginROI_descriptor_,
      WitnessMarginROI::default_instance_,
      WitnessMarginROI_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessMarginROI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessMarginROI, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessMarginROI, _is_default_instance_));
  WitnessRequestContext_descriptor_ = file->message_type(13);
  static const int WitnessRequestContext_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, functions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, storages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, minfacesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, maxfacesize_),
  };
  WitnessRequestContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessRequestContext_descriptor_,
      WitnessRequestContext::default_instance_,
      WitnessRequestContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessRequestContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessRequestContext, _is_default_instance_));
  WitnessRequestContext_ParamsEntry_descriptor_ = WitnessRequestContext_descriptor_->nested_type(0);
  WitnessImage_descriptor_ = file->message_type(14);
  static const int WitnessImage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, witnessmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, relativeroi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, marginroi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, userobject_),
  };
  WitnessImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessImage_descriptor_,
      WitnessImage::default_instance_,
      WitnessImage_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessImage, _is_default_instance_));
  WitnessResponseContext_descriptor_ = file->message_type(15);
  static const int WitnessResponseContext_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, requestts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, responsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, debugts_),
  };
  WitnessResponseContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessResponseContext_descriptor_,
      WitnessResponseContext::default_instance_,
      WitnessResponseContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessResponseContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResponseContext, _is_default_instance_));
  WitnessResponseContext_DebugTsEntry_descriptor_ = WitnessResponseContext_descriptor_->nested_type(0);
  WitnessResult_descriptor_ = file->message_type(16);
  static const int WitnessResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, innerstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, innermessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, vehicles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, pedestrian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, nonmotorvehicles_),
  };
  WitnessResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WitnessResult_descriptor_,
      WitnessResult::default_instance_,
      WitnessResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(WitnessResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WitnessResult, _is_default_instance_));
  IndexType_descriptor_ = file->enum_type(0);
  WitnessUserObjectType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_witness_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessUserObject_descriptor_, &WitnessUserObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IndexRequest_descriptor_, &IndexRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IndexTxtRequest_descriptor_, &IndexTxtRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IndexTxtResponse_descriptor_, &IndexTxtResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommonIndex_descriptor_, &CommonIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommonIndex_Item_descriptor_, &CommonIndex_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BrandIndex_descriptor_, &BrandIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BrandIndex_Item_descriptor_, &BrandIndex_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IndexResponse_descriptor_, &IndexResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessRequest_descriptor_, &WitnessRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessBatchRequest_descriptor_, &WitnessBatchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessResponse_descriptor_, &WitnessResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessBatchResponse_descriptor_, &WitnessBatchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessRelativeROI_descriptor_, &WitnessRelativeROI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessMarginROI_descriptor_, &WitnessMarginROI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessRequestContext_descriptor_, &WitnessRequestContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        WitnessRequestContext_ParamsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                WitnessRequestContext_ParamsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessImage_descriptor_, &WitnessImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessResponseContext_descriptor_, &WitnessResponseContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        WitnessResponseContext_DebugTsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::dg::model::Time,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                WitnessResponseContext_DebugTsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WitnessResult_descriptor_, &WitnessResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_witness_2eproto() {
  delete WitnessUserObject::default_instance_;
  delete WitnessUserObject_reflection_;
  delete IndexRequest::default_instance_;
  delete IndexRequest_reflection_;
  delete IndexTxtRequest::default_instance_;
  delete IndexTxtRequest_reflection_;
  delete IndexTxtResponse::default_instance_;
  delete IndexTxtResponse_reflection_;
  delete CommonIndex::default_instance_;
  delete CommonIndex_reflection_;
  delete CommonIndex_Item::default_instance_;
  delete CommonIndex_Item_reflection_;
  delete BrandIndex::default_instance_;
  delete BrandIndex_reflection_;
  delete BrandIndex_Item::default_instance_;
  delete BrandIndex_Item_reflection_;
  delete IndexResponse::default_instance_;
  delete IndexResponse_default_oneof_instance_;
  delete IndexResponse_reflection_;
  delete WitnessRequest::default_instance_;
  delete WitnessRequest_reflection_;
  delete WitnessBatchRequest::default_instance_;
  delete WitnessBatchRequest_reflection_;
  delete WitnessResponse::default_instance_;
  delete WitnessResponse_reflection_;
  delete WitnessBatchResponse::default_instance_;
  delete WitnessBatchResponse_reflection_;
  delete WitnessRelativeROI::default_instance_;
  delete WitnessRelativeROI_reflection_;
  delete WitnessMarginROI::default_instance_;
  delete WitnessMarginROI_reflection_;
  delete WitnessRequestContext::default_instance_;
  delete WitnessRequestContext_reflection_;
  delete WitnessImage::default_instance_;
  delete WitnessImage_reflection_;
  delete WitnessResponseContext::default_instance_;
  delete WitnessResponseContext_reflection_;
  delete WitnessResult::default_instance_;
  delete WitnessResult_reflection_;
}

void protobuf_AddDesc_witness_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dg::model::protobuf_AddDesc_common_2eproto();
  ::dg::model::protobuf_AddDesc_localcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rwitness.proto\022\010dg.model\032\014common.proto\032"
    "\021localcommon.proto\"m\n\021WitnessUserObject\022"
    "-\n\004Type\030\001 \001(\0162\037.dg.model.WitnessUserObje"
    "ctType\022\024\n\014DetectResult\030\002 \001(\t\022\023\n\013AlignRes"
    "ult\030\003 \001(\t\"6\n\014IndexRequest\022&\n\tIndexType\030\001"
    " \001(\0162\023.dg.model.IndexType\"9\n\017IndexTxtReq"
    "uest\022&\n\tIndexType\030\001 \001(\0162\023.dg.model.Index"
    "Type\"#\n\020IndexTxtResponse\022\017\n\007Context\030\001 \001("
    "\t\"Z\n\013CommonIndex\022)\n\005Items\030\001 \003(\0132\032.dg.mod"
    "el.CommonIndex.Item\032 \n\004Item\022\n\n\002Id\030\001 \001(\005\022"
    "\014\n\004Name\030\002 \001(\t\"\301\001\n\nBrandIndex\022(\n\005Items\030\001 "
    "\003(\0132\031.dg.model.BrandIndex.Item\032\210\001\n\004Item\022"
    "\023\n\013MainBrandId\030\002 \001(\005\022\022\n\nSubBrandId\030\003 \001(\005"
    "\022\023\n\013YearModelId\030\004 \001(\005\022\025\n\rMainBrandName\030\005"
    " \001(\t\022\024\n\014SubBrandName\030\006 \001(\t\022\025\n\rYearModelN"
    "ame\030\007 \001(\t\"t\n\rIndexResponse\022&\n\005Index\030\001 \001("
    "\0132\025.dg.model.CommonIndexH\000\022*\n\nBrandIndex"
    "\030\002 \001(\0132\024.dg.model.BrandIndexH\000B\017\n\rindex_"
    "content\"i\n\016WitnessRequest\0220\n\007Context\030\001 \001"
    "(\0132\037.dg.model.WitnessRequestContext\022%\n\005I"
    "mage\030\002 \001(\0132\026.dg.model.WitnessImage\"o\n\023Wi"
    "tnessBatchRequest\0220\n\007Context\030\001 \001(\0132\037.dg."
    "model.WitnessRequestContext\022&\n\006Images\030\002 "
    "\003(\0132\026.dg.model.WitnessImage\"m\n\017WitnessRe"
    "sponse\0221\n\007Context\030\001 \001(\0132 .dg.model.Witne"
    "ssResponseContext\022\'\n\006Result\030\002 \001(\0132\027.dg.m"
    "odel.WitnessResult\"s\n\024WitnessBatchRespon"
    "se\0221\n\007Context\030\001 \001(\0132 .dg.model.WitnessRe"
    "sponseContext\022(\n\007Results\030\002 \003(\0132\027.dg.mode"
    "l.WitnessResult\"O\n\022WitnessRelativeROI\022\014\n"
    "\004PosX\030\001 \001(\005\022\014\n\004PosY\030\002 \001(\005\022\r\n\005Width\030\003 \001(\005"
    "\022\016\n\006Height\030\004 \001(\005\"L\n\020WitnessMarginROI\022\014\n\004"
    "Left\030\001 \001(\005\022\013\n\003Top\030\002 \001(\005\022\r\n\005Right\030\003 \001(\005\022\016"
    "\n\006Bottom\030\004 \001(\005\"\344\002\n\025WitnessRequestContext"
    "\022\021\n\tSessionId\030\001 \001(\t\022\020\n\010UserName\030\002 \001(\t\022\r\n"
    "\005Token\030\003 \001(\t\022/\n\tFunctions\030\004 \003(\0162\034.dg.mod"
    "el.RecognizeFunctions\022%\n\004Type\030\005 \001(\0162\027.dg"
    ".model.RecognizeType\022)\n\010Storages\030\006 \003(\0132\027"
    ".dg.model.StorageConfig\022;\n\006Params\030\007 \003(\0132"
    "+.dg.model.WitnessRequestContext.ParamsE"
    "ntry\022\023\n\013MinFaceSize\030\010 \001(\005\022\023\n\013MaxFaceSize"
    "\030\t \001(\005\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
    "lue\030\002 \001(\t:\0028\001\"\360\001\n\014WitnessImage\022\035\n\004Data\030\001"
    " \001(\0132\017.dg.model.Image\022.\n\017WitnessMetaData"
    "\030\002 \001(\0132\025.dg.model.SrcMetadata\0221\n\013Relativ"
    "eRoi\030\003 \003(\0132\034.dg.model.WitnessRelativeROI"
    "\022-\n\tMarginRoi\030\004 \003(\0132\032.dg.model.WitnessMa"
    "rginROI\022/\n\nUserObject\030\005 \003(\0132\033.dg.model.W"
    "itnessUserObject\"\223\002\n\026WitnessResponseCont"
    "ext\022\021\n\tSessionId\030\001 \001(\t\022\016\n\006Status\030\002 \001(\t\022\017"
    "\n\007Message\030\003 \001(\t\022!\n\tRequestTs\030\004 \001(\0132\016.dg."
    "model.Time\022\"\n\nResponseTs\030\005 \001(\0132\016.dg.mode"
    "l.Time\022>\n\007DebugTs\030\006 \003(\0132-.dg.model.Witne"
    "ssResponseContext.DebugTsEntry\032>\n\014DebugT"
    "sEntry\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016.dg."
    "model.Time:\0028\001\"\356\001\n\rWitnessResult\022\023\n\013Inne"
    "rStatus\030\001 \001(\t\022\024\n\014InnerMessage\030\002 \001(\t\022%\n\005I"
    "mage\030\003 \001(\0132\026.dg.model.WitnessImage\022&\n\010Ve"
    "hicles\030\004 \003(\0132\024.dg.model.RecVehicle\022+\n\nPe"
    "destrian\030\005 \003(\0132\027.dg.model.RecPedestrian\022"
    "6\n\020NonMotorVehicles\030\006 \003(\0132\034.dg.model.Rec"
    "NonMotorVehicle*\360\001\n\tIndexType\022\021\n\rINDEX_D"
    "EFAULT\020\000\022\023\n\017INDEX_CAR_BRAND\020\001\022\022\n\016INDEX_C"
    "AR_TYPE\020\002\022\023\n\017INDEX_CAR_COLOR\020\003\022\024\n\020INDEX_"
    "CAR_MARKER\020\004\022\030\n\024INDEX_CAR_PLATE_TYPE\020\005\022\031"
    "\n\025INDEX_CAR_PLATE_COLOR\020\006\022\"\n\036INDEX_CAR_P"
    "EDESTRIAN_ATTR_TYPE\020\007\022#\n\037INDEX_NONMOTORV"
    "EHICLE_ATTR_TYPE\020\010*\273\001\n\025WitnessUserObject"
    "Type\022\037\n\033WITNESS_USER_OBJECT_INVALID\020\000\022\034\n"
    "\030WITNESS_USER_OBJECT_FACE\020\001\022\035\n\031WITNESS_U"
    "SER_OBJECT_MOTOR\020\002\022 \n\034WITNESS_USER_OBJEC"
    "T_NONMOTOR\020\003\022\"\n\036WITNESS_USER_OBJECT_PEDE"
    "STRIAN\020\0042\256\002\n\016WitnessService\022B\n\tRecognize"
    "\022\030.dg.model.WitnessRequest\032\031.dg.model.Wi"
    "tnessResponse\"\000\022Q\n\016BatchRecognize\022\035.dg.m"
    "odel.WitnessBatchRequest\032\036.dg.model.Witn"
    "essBatchResponse\"\000\022=\n\010GetIndex\022\026.dg.mode"
    "l.IndexRequest\032\027.dg.model.IndexResponse\""
    "\000\022F\n\013GetIndexTxt\022\031.dg.model.IndexTxtRequ"
    "est\032\032.dg.model.IndexTxtResponse\"\000b\006proto"
    "3", 3201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "witness.proto", &protobuf_RegisterTypes);
  WitnessUserObject::default_instance_ = new WitnessUserObject();
  IndexRequest::default_instance_ = new IndexRequest();
  IndexTxtRequest::default_instance_ = new IndexTxtRequest();
  IndexTxtResponse::default_instance_ = new IndexTxtResponse();
  CommonIndex::default_instance_ = new CommonIndex();
  CommonIndex_Item::default_instance_ = new CommonIndex_Item();
  BrandIndex::default_instance_ = new BrandIndex();
  BrandIndex_Item::default_instance_ = new BrandIndex_Item();
  IndexResponse::default_instance_ = new IndexResponse();
  IndexResponse_default_oneof_instance_ = new IndexResponseOneofInstance();
  WitnessRequest::default_instance_ = new WitnessRequest();
  WitnessBatchRequest::default_instance_ = new WitnessBatchRequest();
  WitnessResponse::default_instance_ = new WitnessResponse();
  WitnessBatchResponse::default_instance_ = new WitnessBatchResponse();
  WitnessRelativeROI::default_instance_ = new WitnessRelativeROI();
  WitnessMarginROI::default_instance_ = new WitnessMarginROI();
  WitnessRequestContext::default_instance_ = new WitnessRequestContext();
  WitnessImage::default_instance_ = new WitnessImage();
  WitnessResponseContext::default_instance_ = new WitnessResponseContext();
  WitnessResult::default_instance_ = new WitnessResult();
  WitnessUserObject::default_instance_->InitAsDefaultInstance();
  IndexRequest::default_instance_->InitAsDefaultInstance();
  IndexTxtRequest::default_instance_->InitAsDefaultInstance();
  IndexTxtResponse::default_instance_->InitAsDefaultInstance();
  CommonIndex::default_instance_->InitAsDefaultInstance();
  CommonIndex_Item::default_instance_->InitAsDefaultInstance();
  BrandIndex::default_instance_->InitAsDefaultInstance();
  BrandIndex_Item::default_instance_->InitAsDefaultInstance();
  IndexResponse::default_instance_->InitAsDefaultInstance();
  WitnessRequest::default_instance_->InitAsDefaultInstance();
  WitnessBatchRequest::default_instance_->InitAsDefaultInstance();
  WitnessResponse::default_instance_->InitAsDefaultInstance();
  WitnessBatchResponse::default_instance_->InitAsDefaultInstance();
  WitnessRelativeROI::default_instance_->InitAsDefaultInstance();
  WitnessMarginROI::default_instance_->InitAsDefaultInstance();
  WitnessRequestContext::default_instance_->InitAsDefaultInstance();
  WitnessImage::default_instance_->InitAsDefaultInstance();
  WitnessResponseContext::default_instance_->InitAsDefaultInstance();
  WitnessResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_witness_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_witness_2eproto {
  StaticDescriptorInitializer_witness_2eproto() {
    protobuf_AddDesc_witness_2eproto();
  }
} static_descriptor_initializer_witness_2eproto_;
const ::google::protobuf::EnumDescriptor* IndexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexType_descriptor_;
}
bool IndexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WitnessUserObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessUserObjectType_descriptor_;
}
bool WitnessUserObjectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessUserObject::kTypeFieldNumber;
const int WitnessUserObject::kDetectResultFieldNumber;
const int WitnessUserObject::kAlignResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessUserObject::WitnessUserObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessUserObject)
}

void WitnessUserObject::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WitnessUserObject::WitnessUserObject(const WitnessUserObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessUserObject)
}

void WitnessUserObject::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  detectresult_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alignresult_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WitnessUserObject::~WitnessUserObject() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessUserObject)
  SharedDtor();
}

void WitnessUserObject::SharedDtor() {
  detectresult_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alignresult_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WitnessUserObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessUserObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessUserObject_descriptor_;
}

const WitnessUserObject& WitnessUserObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessUserObject* WitnessUserObject::default_instance_ = NULL;

WitnessUserObject* WitnessUserObject::New(::google::protobuf::Arena* arena) const {
  WitnessUserObject* n = new WitnessUserObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessUserObject::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessUserObject)
  type_ = 0;
  detectresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alignresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WitnessUserObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessUserObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.WitnessUserObjectType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dg::model::WitnessUserObjectType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DetectResult;
        break;
      }

      // optional string DetectResult = 2;
      case 2: {
        if (tag == 18) {
         parse_DetectResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detectresult()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detectresult().data(), this->detectresult().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessUserObject.DetectResult"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AlignResult;
        break;
      }

      // optional string AlignResult = 3;
      case 3: {
        if (tag == 26) {
         parse_AlignResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alignresult()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alignresult().data(), this->alignresult().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessUserObject.AlignResult"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessUserObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessUserObject)
  return false;
#undef DO_
}

void WitnessUserObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessUserObject)
  // optional .dg.model.WitnessUserObjectType Type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string DetectResult = 2;
  if (this->detectresult().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detectresult().data(), this->detectresult().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessUserObject.DetectResult");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->detectresult(), output);
  }

  // optional string AlignResult = 3;
  if (this->alignresult().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alignresult().data(), this->alignresult().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessUserObject.AlignResult");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->alignresult(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessUserObject)
}

::google::protobuf::uint8* WitnessUserObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessUserObject)
  // optional .dg.model.WitnessUserObjectType Type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string DetectResult = 2;
  if (this->detectresult().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detectresult().data(), this->detectresult().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessUserObject.DetectResult");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->detectresult(), target);
  }

  // optional string AlignResult = 3;
  if (this->alignresult().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alignresult().data(), this->alignresult().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessUserObject.AlignResult");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alignresult(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessUserObject)
  return target;
}

int WitnessUserObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessUserObject)
  int total_size = 0;

  // optional .dg.model.WitnessUserObjectType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string DetectResult = 2;
  if (this->detectresult().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detectresult());
  }

  // optional string AlignResult = 3;
  if (this->alignresult().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alignresult());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessUserObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessUserObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessUserObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessUserObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessUserObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessUserObject)
    MergeFrom(*source);
  }
}

void WitnessUserObject::MergeFrom(const WitnessUserObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessUserObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.detectresult().size() > 0) {

    detectresult_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detectresult_);
  }
  if (from.alignresult().size() > 0) {

    alignresult_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alignresult_);
  }
}

void WitnessUserObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessUserObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessUserObject::CopyFrom(const WitnessUserObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessUserObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessUserObject::IsInitialized() const {

  return true;
}

void WitnessUserObject::Swap(WitnessUserObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessUserObject::InternalSwap(WitnessUserObject* other) {
  std::swap(type_, other->type_);
  detectresult_.Swap(&other->detectresult_);
  alignresult_.Swap(&other->alignresult_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessUserObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessUserObject_descriptor_;
  metadata.reflection = WitnessUserObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessUserObject

// optional .dg.model.WitnessUserObjectType Type = 1;
void WitnessUserObject::clear_type() {
  type_ = 0;
}
 ::dg::model::WitnessUserObjectType WitnessUserObject::type() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessUserObject.Type)
  return static_cast< ::dg::model::WitnessUserObjectType >(type_);
}
 void WitnessUserObject::set_type(::dg::model::WitnessUserObjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessUserObject.Type)
}

// optional string DetectResult = 2;
void WitnessUserObject::clear_detectresult() {
  detectresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessUserObject::detectresult() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessUserObject.DetectResult)
  return detectresult_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessUserObject::set_detectresult(const ::std::string& value) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessUserObject.DetectResult)
}
 void WitnessUserObject::set_detectresult(const char* value) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessUserObject.DetectResult)
}
 void WitnessUserObject::set_detectresult(const char* value, size_t size) {
  
  detectresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessUserObject.DetectResult)
}
 ::std::string* WitnessUserObject::mutable_detectresult() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessUserObject.DetectResult)
  return detectresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessUserObject::release_detectresult() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessUserObject.DetectResult)
  
  return detectresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessUserObject::set_allocated_detectresult(::std::string* detectresult) {
  if (detectresult != NULL) {
    
  } else {
    
  }
  detectresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detectresult);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessUserObject.DetectResult)
}

// optional string AlignResult = 3;
void WitnessUserObject::clear_alignresult() {
  alignresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessUserObject::alignresult() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessUserObject.AlignResult)
  return alignresult_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessUserObject::set_alignresult(const ::std::string& value) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessUserObject.AlignResult)
}
 void WitnessUserObject::set_alignresult(const char* value) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessUserObject.AlignResult)
}
 void WitnessUserObject::set_alignresult(const char* value, size_t size) {
  
  alignresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessUserObject.AlignResult)
}
 ::std::string* WitnessUserObject::mutable_alignresult() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessUserObject.AlignResult)
  return alignresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessUserObject::release_alignresult() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessUserObject.AlignResult)
  
  return alignresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessUserObject::set_allocated_alignresult(::std::string* alignresult) {
  if (alignresult != NULL) {
    
  } else {
    
  }
  alignresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alignresult);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessUserObject.AlignResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexRequest::kIndexTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexRequest::IndexRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.IndexRequest)
}

void IndexRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IndexRequest::IndexRequest(const IndexRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.IndexRequest)
}

void IndexRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  indextype_ = 0;
}

IndexRequest::~IndexRequest() {
  // @@protoc_insertion_point(destructor:dg.model.IndexRequest)
  SharedDtor();
}

void IndexRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexRequest_descriptor_;
}

const IndexRequest& IndexRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

IndexRequest* IndexRequest::default_instance_ = NULL;

IndexRequest* IndexRequest::New(::google::protobuf::Arena* arena) const {
  IndexRequest* n = new IndexRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.IndexRequest)
  indextype_ = 0;
}

bool IndexRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.IndexRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.IndexType IndexType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_indextype(static_cast< ::dg::model::IndexType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.IndexRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.IndexRequest)
  return false;
#undef DO_
}

void IndexRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.IndexRequest)
  // optional .dg.model.IndexType IndexType = 1;
  if (this->indextype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->indextype(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.IndexRequest)
}

::google::protobuf::uint8* IndexRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.IndexRequest)
  // optional .dg.model.IndexType IndexType = 1;
  if (this->indextype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->indextype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.IndexRequest)
  return target;
}

int IndexRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.IndexRequest)
  int total_size = 0;

  // optional .dg.model.IndexType IndexType = 1;
  if (this->indextype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->indextype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.IndexRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IndexRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.IndexRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.IndexRequest)
    MergeFrom(*source);
  }
}

void IndexRequest::MergeFrom(const IndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.IndexRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.indextype() != 0) {
    set_indextype(from.indextype());
  }
}

void IndexRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.IndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexRequest::CopyFrom(const IndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.IndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRequest::IsInitialized() const {

  return true;
}

void IndexRequest::Swap(IndexRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexRequest::InternalSwap(IndexRequest* other) {
  std::swap(indextype_, other->indextype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexRequest_descriptor_;
  metadata.reflection = IndexRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexRequest

// optional .dg.model.IndexType IndexType = 1;
void IndexRequest::clear_indextype() {
  indextype_ = 0;
}
 ::dg::model::IndexType IndexRequest::indextype() const {
  // @@protoc_insertion_point(field_get:dg.model.IndexRequest.IndexType)
  return static_cast< ::dg::model::IndexType >(indextype_);
}
 void IndexRequest::set_indextype(::dg::model::IndexType value) {
  
  indextype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.IndexRequest.IndexType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexTxtRequest::kIndexTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexTxtRequest::IndexTxtRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.IndexTxtRequest)
}

void IndexTxtRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IndexTxtRequest::IndexTxtRequest(const IndexTxtRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.IndexTxtRequest)
}

void IndexTxtRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  indextype_ = 0;
}

IndexTxtRequest::~IndexTxtRequest() {
  // @@protoc_insertion_point(destructor:dg.model.IndexTxtRequest)
  SharedDtor();
}

void IndexTxtRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexTxtRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexTxtRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexTxtRequest_descriptor_;
}

const IndexTxtRequest& IndexTxtRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

IndexTxtRequest* IndexTxtRequest::default_instance_ = NULL;

IndexTxtRequest* IndexTxtRequest::New(::google::protobuf::Arena* arena) const {
  IndexTxtRequest* n = new IndexTxtRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexTxtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.IndexTxtRequest)
  indextype_ = 0;
}

bool IndexTxtRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.IndexTxtRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.IndexType IndexType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_indextype(static_cast< ::dg::model::IndexType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.IndexTxtRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.IndexTxtRequest)
  return false;
#undef DO_
}

void IndexTxtRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.IndexTxtRequest)
  // optional .dg.model.IndexType IndexType = 1;
  if (this->indextype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->indextype(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.IndexTxtRequest)
}

::google::protobuf::uint8* IndexTxtRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.IndexTxtRequest)
  // optional .dg.model.IndexType IndexType = 1;
  if (this->indextype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->indextype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.IndexTxtRequest)
  return target;
}

int IndexTxtRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.IndexTxtRequest)
  int total_size = 0;

  // optional .dg.model.IndexType IndexType = 1;
  if (this->indextype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->indextype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexTxtRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.IndexTxtRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IndexTxtRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexTxtRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.IndexTxtRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.IndexTxtRequest)
    MergeFrom(*source);
  }
}

void IndexTxtRequest::MergeFrom(const IndexTxtRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.IndexTxtRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.indextype() != 0) {
    set_indextype(from.indextype());
  }
}

void IndexTxtRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.IndexTxtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexTxtRequest::CopyFrom(const IndexTxtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.IndexTxtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexTxtRequest::IsInitialized() const {

  return true;
}

void IndexTxtRequest::Swap(IndexTxtRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexTxtRequest::InternalSwap(IndexTxtRequest* other) {
  std::swap(indextype_, other->indextype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexTxtRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexTxtRequest_descriptor_;
  metadata.reflection = IndexTxtRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexTxtRequest

// optional .dg.model.IndexType IndexType = 1;
void IndexTxtRequest::clear_indextype() {
  indextype_ = 0;
}
 ::dg::model::IndexType IndexTxtRequest::indextype() const {
  // @@protoc_insertion_point(field_get:dg.model.IndexTxtRequest.IndexType)
  return static_cast< ::dg::model::IndexType >(indextype_);
}
 void IndexTxtRequest::set_indextype(::dg::model::IndexType value) {
  
  indextype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.IndexTxtRequest.IndexType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexTxtResponse::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexTxtResponse::IndexTxtResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.IndexTxtResponse)
}

void IndexTxtResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IndexTxtResponse::IndexTxtResponse(const IndexTxtResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.IndexTxtResponse)
}

void IndexTxtResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IndexTxtResponse::~IndexTxtResponse() {
  // @@protoc_insertion_point(destructor:dg.model.IndexTxtResponse)
  SharedDtor();
}

void IndexTxtResponse::SharedDtor() {
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IndexTxtResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexTxtResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexTxtResponse_descriptor_;
}

const IndexTxtResponse& IndexTxtResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

IndexTxtResponse* IndexTxtResponse::default_instance_ = NULL;

IndexTxtResponse* IndexTxtResponse::New(::google::protobuf::Arena* arena) const {
  IndexTxtResponse* n = new IndexTxtResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexTxtResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.IndexTxtResponse)
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IndexTxtResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.IndexTxtResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.IndexTxtResponse.Context"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.IndexTxtResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.IndexTxtResponse)
  return false;
#undef DO_
}

void IndexTxtResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.IndexTxtResponse)
  // optional string Context = 1;
  if (this->context().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.IndexTxtResponse.Context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->context(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.IndexTxtResponse)
}

::google::protobuf::uint8* IndexTxtResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.IndexTxtResponse)
  // optional string Context = 1;
  if (this->context().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.IndexTxtResponse.Context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->context(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.IndexTxtResponse)
  return target;
}

int IndexTxtResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.IndexTxtResponse)
  int total_size = 0;

  // optional string Context = 1;
  if (this->context().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->context());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexTxtResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.IndexTxtResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IndexTxtResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexTxtResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.IndexTxtResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.IndexTxtResponse)
    MergeFrom(*source);
  }
}

void IndexTxtResponse::MergeFrom(const IndexTxtResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.IndexTxtResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.context().size() > 0) {

    context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
}

void IndexTxtResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.IndexTxtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexTxtResponse::CopyFrom(const IndexTxtResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.IndexTxtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexTxtResponse::IsInitialized() const {

  return true;
}

void IndexTxtResponse::Swap(IndexTxtResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexTxtResponse::InternalSwap(IndexTxtResponse* other) {
  context_.Swap(&other->context_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexTxtResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexTxtResponse_descriptor_;
  metadata.reflection = IndexTxtResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexTxtResponse

// optional string Context = 1;
void IndexTxtResponse::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IndexTxtResponse::context() const {
  // @@protoc_insertion_point(field_get:dg.model.IndexTxtResponse.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IndexTxtResponse::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.IndexTxtResponse.Context)
}
 void IndexTxtResponse::set_context(const char* value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.IndexTxtResponse.Context)
}
 void IndexTxtResponse::set_context(const char* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.IndexTxtResponse.Context)
}
 ::std::string* IndexTxtResponse::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.IndexTxtResponse.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IndexTxtResponse::release_context() {
  // @@protoc_insertion_point(field_release:dg.model.IndexTxtResponse.Context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IndexTxtResponse::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dg.model.IndexTxtResponse.Context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonIndex_Item::kIdFieldNumber;
const int CommonIndex_Item::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonIndex_Item::CommonIndex_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.CommonIndex.Item)
}

void CommonIndex_Item::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommonIndex_Item::CommonIndex_Item(const CommonIndex_Item& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.CommonIndex.Item)
}

void CommonIndex_Item::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CommonIndex_Item::~CommonIndex_Item() {
  // @@protoc_insertion_point(destructor:dg.model.CommonIndex.Item)
  SharedDtor();
}

void CommonIndex_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CommonIndex_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonIndex_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonIndex_Item_descriptor_;
}

const CommonIndex_Item& CommonIndex_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

CommonIndex_Item* CommonIndex_Item::default_instance_ = NULL;

CommonIndex_Item* CommonIndex_Item::New(::google::protobuf::Arena* arena) const {
  CommonIndex_Item* n = new CommonIndex_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonIndex_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.CommonIndex.Item)
  id_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CommonIndex_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.CommonIndex.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.CommonIndex.Item.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.CommonIndex.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.CommonIndex.Item)
  return false;
#undef DO_
}

void CommonIndex_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.CommonIndex.Item)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.CommonIndex.Item.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.CommonIndex.Item)
}

::google::protobuf::uint8* CommonIndex_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.CommonIndex.Item)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.CommonIndex.Item.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.CommonIndex.Item)
  return target;
}

int CommonIndex_Item::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.CommonIndex.Item)
  int total_size = 0;

  // optional int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonIndex_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.CommonIndex.Item)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommonIndex_Item* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonIndex_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.CommonIndex.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.CommonIndex.Item)
    MergeFrom(*source);
  }
}

void CommonIndex_Item::MergeFrom(const CommonIndex_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.CommonIndex.Item)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CommonIndex_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.CommonIndex.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonIndex_Item::CopyFrom(const CommonIndex_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.CommonIndex.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonIndex_Item::IsInitialized() const {

  return true;
}

void CommonIndex_Item::Swap(CommonIndex_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonIndex_Item::InternalSwap(CommonIndex_Item* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonIndex_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonIndex_Item_descriptor_;
  metadata.reflection = CommonIndex_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonIndex::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonIndex::CommonIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.CommonIndex)
}

void CommonIndex::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommonIndex::CommonIndex(const CommonIndex& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.CommonIndex)
}

void CommonIndex::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CommonIndex::~CommonIndex() {
  // @@protoc_insertion_point(destructor:dg.model.CommonIndex)
  SharedDtor();
}

void CommonIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonIndex_descriptor_;
}

const CommonIndex& CommonIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

CommonIndex* CommonIndex::default_instance_ = NULL;

CommonIndex* CommonIndex::New(::google::protobuf::Arena* arena) const {
  CommonIndex* n = new CommonIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.CommonIndex)
  items_.Clear();
}

bool CommonIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.CommonIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dg.model.CommonIndex.Item Items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.CommonIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.CommonIndex)
  return false;
#undef DO_
}

void CommonIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.CommonIndex)
  // repeated .dg.model.CommonIndex.Item Items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.CommonIndex)
}

::google::protobuf::uint8* CommonIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.CommonIndex)
  // repeated .dg.model.CommonIndex.Item Items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.CommonIndex)
  return target;
}

int CommonIndex::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.CommonIndex)
  int total_size = 0;

  // repeated .dg.model.CommonIndex.Item Items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.CommonIndex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommonIndex* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.CommonIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.CommonIndex)
    MergeFrom(*source);
  }
}

void CommonIndex::MergeFrom(const CommonIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.CommonIndex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
}

void CommonIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.CommonIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonIndex::CopyFrom(const CommonIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.CommonIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonIndex::IsInitialized() const {

  return true;
}

void CommonIndex::Swap(CommonIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonIndex::InternalSwap(CommonIndex* other) {
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonIndex_descriptor_;
  metadata.reflection = CommonIndex_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonIndex_Item

// optional int32 Id = 1;
void CommonIndex_Item::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 CommonIndex_Item::id() const {
  // @@protoc_insertion_point(field_get:dg.model.CommonIndex.Item.Id)
  return id_;
}
 void CommonIndex_Item::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.CommonIndex.Item.Id)
}

// optional string Name = 2;
void CommonIndex_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CommonIndex_Item::name() const {
  // @@protoc_insertion_point(field_get:dg.model.CommonIndex.Item.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommonIndex_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.CommonIndex.Item.Name)
}
 void CommonIndex_Item::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.CommonIndex.Item.Name)
}
 void CommonIndex_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.CommonIndex.Item.Name)
}
 ::std::string* CommonIndex_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.CommonIndex.Item.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommonIndex_Item::release_name() {
  // @@protoc_insertion_point(field_release:dg.model.CommonIndex.Item.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommonIndex_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dg.model.CommonIndex.Item.Name)
}

// -------------------------------------------------------------------

// CommonIndex

// repeated .dg.model.CommonIndex.Item Items = 1;
int CommonIndex::items_size() const {
  return items_.size();
}
void CommonIndex::clear_items() {
  items_.Clear();
}
const ::dg::model::CommonIndex_Item& CommonIndex::items(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.CommonIndex.Items)
  return items_.Get(index);
}
::dg::model::CommonIndex_Item* CommonIndex::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.CommonIndex.Items)
  return items_.Mutable(index);
}
::dg::model::CommonIndex_Item* CommonIndex::add_items() {
  // @@protoc_insertion_point(field_add:dg.model.CommonIndex.Items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::CommonIndex_Item >*
CommonIndex::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.CommonIndex.Items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::CommonIndex_Item >&
CommonIndex::items() const {
  // @@protoc_insertion_point(field_list:dg.model.CommonIndex.Items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrandIndex_Item::kMainBrandIdFieldNumber;
const int BrandIndex_Item::kSubBrandIdFieldNumber;
const int BrandIndex_Item::kYearModelIdFieldNumber;
const int BrandIndex_Item::kMainBrandNameFieldNumber;
const int BrandIndex_Item::kSubBrandNameFieldNumber;
const int BrandIndex_Item::kYearModelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrandIndex_Item::BrandIndex_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.BrandIndex.Item)
}

void BrandIndex_Item::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BrandIndex_Item::BrandIndex_Item(const BrandIndex_Item& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.BrandIndex.Item)
}

void BrandIndex_Item::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mainbrandid_ = 0;
  subbrandid_ = 0;
  yearmodelid_ = 0;
  mainbrandname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subbrandname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yearmodelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BrandIndex_Item::~BrandIndex_Item() {
  // @@protoc_insertion_point(destructor:dg.model.BrandIndex.Item)
  SharedDtor();
}

void BrandIndex_Item::SharedDtor() {
  mainbrandname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subbrandname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yearmodelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BrandIndex_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrandIndex_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrandIndex_Item_descriptor_;
}

const BrandIndex_Item& BrandIndex_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

BrandIndex_Item* BrandIndex_Item::default_instance_ = NULL;

BrandIndex_Item* BrandIndex_Item::New(::google::protobuf::Arena* arena) const {
  BrandIndex_Item* n = new BrandIndex_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrandIndex_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.BrandIndex.Item)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BrandIndex_Item, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BrandIndex_Item*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mainbrandid_, subbrandid_);
  yearmodelid_ = 0;
  mainbrandname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subbrandname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yearmodelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool BrandIndex_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.BrandIndex.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MainBrandId = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainbrandid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SubBrandId;
        break;
      }

      // optional int32 SubBrandId = 3;
      case 3: {
        if (tag == 24) {
         parse_SubBrandId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subbrandid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_YearModelId;
        break;
      }

      // optional int32 YearModelId = 4;
      case 4: {
        if (tag == 32) {
         parse_YearModelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yearmodelid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_MainBrandName;
        break;
      }

      // optional string MainBrandName = 5;
      case 5: {
        if (tag == 42) {
         parse_MainBrandName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainbrandname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mainbrandname().data(), this->mainbrandname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.BrandIndex.Item.MainBrandName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SubBrandName;
        break;
      }

      // optional string SubBrandName = 6;
      case 6: {
        if (tag == 50) {
         parse_SubBrandName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subbrandname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subbrandname().data(), this->subbrandname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.BrandIndex.Item.SubBrandName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_YearModelName;
        break;
      }

      // optional string YearModelName = 7;
      case 7: {
        if (tag == 58) {
         parse_YearModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yearmodelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->yearmodelname().data(), this->yearmodelname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.BrandIndex.Item.YearModelName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.BrandIndex.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.BrandIndex.Item)
  return false;
#undef DO_
}

void BrandIndex_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.BrandIndex.Item)
  // optional int32 MainBrandId = 2;
  if (this->mainbrandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mainbrandid(), output);
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subbrandid(), output);
  }

  // optional int32 YearModelId = 4;
  if (this->yearmodelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->yearmodelid(), output);
  }

  // optional string MainBrandName = 5;
  if (this->mainbrandname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainbrandname().data(), this->mainbrandname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.BrandIndex.Item.MainBrandName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mainbrandname(), output);
  }

  // optional string SubBrandName = 6;
  if (this->subbrandname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subbrandname().data(), this->subbrandname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.BrandIndex.Item.SubBrandName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->subbrandname(), output);
  }

  // optional string YearModelName = 7;
  if (this->yearmodelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->yearmodelname().data(), this->yearmodelname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.BrandIndex.Item.YearModelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->yearmodelname(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.BrandIndex.Item)
}

::google::protobuf::uint8* BrandIndex_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.BrandIndex.Item)
  // optional int32 MainBrandId = 2;
  if (this->mainbrandid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mainbrandid(), target);
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subbrandid(), target);
  }

  // optional int32 YearModelId = 4;
  if (this->yearmodelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->yearmodelid(), target);
  }

  // optional string MainBrandName = 5;
  if (this->mainbrandname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainbrandname().data(), this->mainbrandname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.BrandIndex.Item.MainBrandName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mainbrandname(), target);
  }

  // optional string SubBrandName = 6;
  if (this->subbrandname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subbrandname().data(), this->subbrandname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.BrandIndex.Item.SubBrandName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subbrandname(), target);
  }

  // optional string YearModelName = 7;
  if (this->yearmodelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->yearmodelname().data(), this->yearmodelname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.BrandIndex.Item.YearModelName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->yearmodelname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.BrandIndex.Item)
  return target;
}

int BrandIndex_Item::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.BrandIndex.Item)
  int total_size = 0;

  // optional int32 MainBrandId = 2;
  if (this->mainbrandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mainbrandid());
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subbrandid());
  }

  // optional int32 YearModelId = 4;
  if (this->yearmodelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->yearmodelid());
  }

  // optional string MainBrandName = 5;
  if (this->mainbrandname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mainbrandname());
  }

  // optional string SubBrandName = 6;
  if (this->subbrandname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subbrandname());
  }

  // optional string YearModelName = 7;
  if (this->yearmodelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->yearmodelname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrandIndex_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.BrandIndex.Item)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BrandIndex_Item* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BrandIndex_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.BrandIndex.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.BrandIndex.Item)
    MergeFrom(*source);
  }
}

void BrandIndex_Item::MergeFrom(const BrandIndex_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.BrandIndex.Item)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mainbrandid() != 0) {
    set_mainbrandid(from.mainbrandid());
  }
  if (from.subbrandid() != 0) {
    set_subbrandid(from.subbrandid());
  }
  if (from.yearmodelid() != 0) {
    set_yearmodelid(from.yearmodelid());
  }
  if (from.mainbrandname().size() > 0) {

    mainbrandname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainbrandname_);
  }
  if (from.subbrandname().size() > 0) {

    subbrandname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subbrandname_);
  }
  if (from.yearmodelname().size() > 0) {

    yearmodelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yearmodelname_);
  }
}

void BrandIndex_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.BrandIndex.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrandIndex_Item::CopyFrom(const BrandIndex_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.BrandIndex.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrandIndex_Item::IsInitialized() const {

  return true;
}

void BrandIndex_Item::Swap(BrandIndex_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrandIndex_Item::InternalSwap(BrandIndex_Item* other) {
  std::swap(mainbrandid_, other->mainbrandid_);
  std::swap(subbrandid_, other->subbrandid_);
  std::swap(yearmodelid_, other->yearmodelid_);
  mainbrandname_.Swap(&other->mainbrandname_);
  subbrandname_.Swap(&other->subbrandname_);
  yearmodelname_.Swap(&other->yearmodelname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrandIndex_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrandIndex_Item_descriptor_;
  metadata.reflection = BrandIndex_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrandIndex::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrandIndex::BrandIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.BrandIndex)
}

void BrandIndex::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BrandIndex::BrandIndex(const BrandIndex& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.BrandIndex)
}

void BrandIndex::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BrandIndex::~BrandIndex() {
  // @@protoc_insertion_point(destructor:dg.model.BrandIndex)
  SharedDtor();
}

void BrandIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrandIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrandIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrandIndex_descriptor_;
}

const BrandIndex& BrandIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

BrandIndex* BrandIndex::default_instance_ = NULL;

BrandIndex* BrandIndex::New(::google::protobuf::Arena* arena) const {
  BrandIndex* n = new BrandIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrandIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.BrandIndex)
  items_.Clear();
}

bool BrandIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.BrandIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dg.model.BrandIndex.Item Items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.BrandIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.BrandIndex)
  return false;
#undef DO_
}

void BrandIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.BrandIndex)
  // repeated .dg.model.BrandIndex.Item Items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.BrandIndex)
}

::google::protobuf::uint8* BrandIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.BrandIndex)
  // repeated .dg.model.BrandIndex.Item Items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.BrandIndex)
  return target;
}

int BrandIndex::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.BrandIndex)
  int total_size = 0;

  // repeated .dg.model.BrandIndex.Item Items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrandIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.BrandIndex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BrandIndex* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BrandIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.BrandIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.BrandIndex)
    MergeFrom(*source);
  }
}

void BrandIndex::MergeFrom(const BrandIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.BrandIndex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
}

void BrandIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.BrandIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrandIndex::CopyFrom(const BrandIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.BrandIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrandIndex::IsInitialized() const {

  return true;
}

void BrandIndex::Swap(BrandIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrandIndex::InternalSwap(BrandIndex* other) {
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrandIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrandIndex_descriptor_;
  metadata.reflection = BrandIndex_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrandIndex_Item

// optional int32 MainBrandId = 2;
void BrandIndex_Item::clear_mainbrandid() {
  mainbrandid_ = 0;
}
 ::google::protobuf::int32 BrandIndex_Item::mainbrandid() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.MainBrandId)
  return mainbrandid_;
}
 void BrandIndex_Item::set_mainbrandid(::google::protobuf::int32 value) {
  
  mainbrandid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.MainBrandId)
}

// optional int32 SubBrandId = 3;
void BrandIndex_Item::clear_subbrandid() {
  subbrandid_ = 0;
}
 ::google::protobuf::int32 BrandIndex_Item::subbrandid() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.SubBrandId)
  return subbrandid_;
}
 void BrandIndex_Item::set_subbrandid(::google::protobuf::int32 value) {
  
  subbrandid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.SubBrandId)
}

// optional int32 YearModelId = 4;
void BrandIndex_Item::clear_yearmodelid() {
  yearmodelid_ = 0;
}
 ::google::protobuf::int32 BrandIndex_Item::yearmodelid() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.YearModelId)
  return yearmodelid_;
}
 void BrandIndex_Item::set_yearmodelid(::google::protobuf::int32 value) {
  
  yearmodelid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.YearModelId)
}

// optional string MainBrandName = 5;
void BrandIndex_Item::clear_mainbrandname() {
  mainbrandname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BrandIndex_Item::mainbrandname() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.MainBrandName)
  return mainbrandname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrandIndex_Item::set_mainbrandname(const ::std::string& value) {
  
  mainbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.MainBrandName)
}
 void BrandIndex_Item::set_mainbrandname(const char* value) {
  
  mainbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.BrandIndex.Item.MainBrandName)
}
 void BrandIndex_Item::set_mainbrandname(const char* value, size_t size) {
  
  mainbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.BrandIndex.Item.MainBrandName)
}
 ::std::string* BrandIndex_Item::mutable_mainbrandname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.BrandIndex.Item.MainBrandName)
  return mainbrandname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrandIndex_Item::release_mainbrandname() {
  // @@protoc_insertion_point(field_release:dg.model.BrandIndex.Item.MainBrandName)
  
  return mainbrandname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrandIndex_Item::set_allocated_mainbrandname(::std::string* mainbrandname) {
  if (mainbrandname != NULL) {
    
  } else {
    
  }
  mainbrandname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainbrandname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.BrandIndex.Item.MainBrandName)
}

// optional string SubBrandName = 6;
void BrandIndex_Item::clear_subbrandname() {
  subbrandname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BrandIndex_Item::subbrandname() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.SubBrandName)
  return subbrandname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrandIndex_Item::set_subbrandname(const ::std::string& value) {
  
  subbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.SubBrandName)
}
 void BrandIndex_Item::set_subbrandname(const char* value) {
  
  subbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.BrandIndex.Item.SubBrandName)
}
 void BrandIndex_Item::set_subbrandname(const char* value, size_t size) {
  
  subbrandname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.BrandIndex.Item.SubBrandName)
}
 ::std::string* BrandIndex_Item::mutable_subbrandname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.BrandIndex.Item.SubBrandName)
  return subbrandname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrandIndex_Item::release_subbrandname() {
  // @@protoc_insertion_point(field_release:dg.model.BrandIndex.Item.SubBrandName)
  
  return subbrandname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrandIndex_Item::set_allocated_subbrandname(::std::string* subbrandname) {
  if (subbrandname != NULL) {
    
  } else {
    
  }
  subbrandname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subbrandname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.BrandIndex.Item.SubBrandName)
}

// optional string YearModelName = 7;
void BrandIndex_Item::clear_yearmodelname() {
  yearmodelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BrandIndex_Item::yearmodelname() const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Item.YearModelName)
  return yearmodelname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrandIndex_Item::set_yearmodelname(const ::std::string& value) {
  
  yearmodelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.BrandIndex.Item.YearModelName)
}
 void BrandIndex_Item::set_yearmodelname(const char* value) {
  
  yearmodelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.BrandIndex.Item.YearModelName)
}
 void BrandIndex_Item::set_yearmodelname(const char* value, size_t size) {
  
  yearmodelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.BrandIndex.Item.YearModelName)
}
 ::std::string* BrandIndex_Item::mutable_yearmodelname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.BrandIndex.Item.YearModelName)
  return yearmodelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrandIndex_Item::release_yearmodelname() {
  // @@protoc_insertion_point(field_release:dg.model.BrandIndex.Item.YearModelName)
  
  return yearmodelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrandIndex_Item::set_allocated_yearmodelname(::std::string* yearmodelname) {
  if (yearmodelname != NULL) {
    
  } else {
    
  }
  yearmodelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yearmodelname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.BrandIndex.Item.YearModelName)
}

// -------------------------------------------------------------------

// BrandIndex

// repeated .dg.model.BrandIndex.Item Items = 1;
int BrandIndex::items_size() const {
  return items_.size();
}
void BrandIndex::clear_items() {
  items_.Clear();
}
const ::dg::model::BrandIndex_Item& BrandIndex::items(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.BrandIndex.Items)
  return items_.Get(index);
}
::dg::model::BrandIndex_Item* BrandIndex::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.BrandIndex.Items)
  return items_.Mutable(index);
}
::dg::model::BrandIndex_Item* BrandIndex::add_items() {
  // @@protoc_insertion_point(field_add:dg.model.BrandIndex.Items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::BrandIndex_Item >*
BrandIndex::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.BrandIndex.Items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::BrandIndex_Item >&
BrandIndex::items() const {
  // @@protoc_insertion_point(field_list:dg.model.BrandIndex.Items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexResponse::kIndexFieldNumber;
const int IndexResponse::kBrandIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexResponse::IndexResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.IndexResponse)
}

void IndexResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  IndexResponse_default_oneof_instance_->index_ = const_cast< ::dg::model::CommonIndex*>(&::dg::model::CommonIndex::default_instance());
  IndexResponse_default_oneof_instance_->brandindex_ = const_cast< ::dg::model::BrandIndex*>(&::dg::model::BrandIndex::default_instance());
}

IndexResponse::IndexResponse(const IndexResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.IndexResponse)
}

void IndexResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_index_content();
}

IndexResponse::~IndexResponse() {
  // @@protoc_insertion_point(destructor:dg.model.IndexResponse)
  SharedDtor();
}

void IndexResponse::SharedDtor() {
  if (has_index_content()) {
    clear_index_content();
  }
  if (this != default_instance_) {
  }
}

void IndexResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexResponse_descriptor_;
}

const IndexResponse& IndexResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

IndexResponse* IndexResponse::default_instance_ = NULL;

IndexResponse* IndexResponse::New(::google::protobuf::Arena* arena) const {
  IndexResponse* n = new IndexResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexResponse::clear_index_content() {
// @@protoc_insertion_point(one_of_clear_start:dg.model.IndexResponse)
  switch(index_content_case()) {
    case kIndex: {
      delete index_content_.index_;
      break;
    }
    case kBrandIndex: {
      delete index_content_.brandindex_;
      break;
    }
    case INDEX_CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INDEX_CONTENT_NOT_SET;
}


void IndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.IndexResponse)
  clear_index_content();
}

bool IndexResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.IndexResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.CommonIndex Index = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BrandIndex;
        break;
      }

      // optional .dg.model.BrandIndex BrandIndex = 2;
      case 2: {
        if (tag == 18) {
         parse_BrandIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brandindex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.IndexResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.IndexResponse)
  return false;
#undef DO_
}

void IndexResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.IndexResponse)
  // optional .dg.model.CommonIndex Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *index_content_.index_, output);
  }

  // optional .dg.model.BrandIndex BrandIndex = 2;
  if (has_brandindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *index_content_.brandindex_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.IndexResponse)
}

::google::protobuf::uint8* IndexResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.IndexResponse)
  // optional .dg.model.CommonIndex Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *index_content_.index_, target);
  }

  // optional .dg.model.BrandIndex BrandIndex = 2;
  if (has_brandindex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *index_content_.brandindex_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.IndexResponse)
  return target;
}

int IndexResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.IndexResponse)
  int total_size = 0;

  switch (index_content_case()) {
    // optional .dg.model.CommonIndex Index = 1;
    case kIndex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *index_content_.index_);
      break;
    }
    // optional .dg.model.BrandIndex BrandIndex = 2;
    case kBrandIndex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *index_content_.brandindex_);
      break;
    }
    case INDEX_CONTENT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.IndexResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IndexResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.IndexResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.IndexResponse)
    MergeFrom(*source);
  }
}

void IndexResponse::MergeFrom(const IndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.IndexResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.index_content_case()) {
    case kIndex: {
      mutable_index()->::dg::model::CommonIndex::MergeFrom(from.index());
      break;
    }
    case kBrandIndex: {
      mutable_brandindex()->::dg::model::BrandIndex::MergeFrom(from.brandindex());
      break;
    }
    case INDEX_CONTENT_NOT_SET: {
      break;
    }
  }
}

void IndexResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.IndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexResponse::CopyFrom(const IndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.IndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexResponse::IsInitialized() const {

  return true;
}

void IndexResponse::Swap(IndexResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexResponse::InternalSwap(IndexResponse* other) {
  std::swap(index_content_, other->index_content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexResponse_descriptor_;
  metadata.reflection = IndexResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexResponse

// optional .dg.model.CommonIndex Index = 1;
bool IndexResponse::has_index() const {
  return index_content_case() == kIndex;
}
void IndexResponse::set_has_index() {
  _oneof_case_[0] = kIndex;
}
void IndexResponse::clear_index() {
  if (has_index()) {
    delete index_content_.index_;
    clear_has_index_content();
  }
}
 const ::dg::model::CommonIndex& IndexResponse::index() const {
  // @@protoc_insertion_point(field_get:dg.model.IndexResponse.Index)
  return has_index()
      ? *index_content_.index_
      : ::dg::model::CommonIndex::default_instance();
}
::dg::model::CommonIndex* IndexResponse::mutable_index() {
  if (!has_index()) {
    clear_index_content();
    set_has_index();
    index_content_.index_ = new ::dg::model::CommonIndex;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.IndexResponse.Index)
  return index_content_.index_;
}
::dg::model::CommonIndex* IndexResponse::release_index() {
  // @@protoc_insertion_point(field_release:dg.model.IndexResponse.Index)
  if (has_index()) {
    clear_has_index_content();
    ::dg::model::CommonIndex* temp = index_content_.index_;
    index_content_.index_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void IndexResponse::set_allocated_index(::dg::model::CommonIndex* index) {
  clear_index_content();
  if (index) {
    set_has_index();
    index_content_.index_ = index;
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.IndexResponse.Index)
}

// optional .dg.model.BrandIndex BrandIndex = 2;
bool IndexResponse::has_brandindex() const {
  return index_content_case() == kBrandIndex;
}
void IndexResponse::set_has_brandindex() {
  _oneof_case_[0] = kBrandIndex;
}
void IndexResponse::clear_brandindex() {
  if (has_brandindex()) {
    delete index_content_.brandindex_;
    clear_has_index_content();
  }
}
 const ::dg::model::BrandIndex& IndexResponse::brandindex() const {
  // @@protoc_insertion_point(field_get:dg.model.IndexResponse.BrandIndex)
  return has_brandindex()
      ? *index_content_.brandindex_
      : ::dg::model::BrandIndex::default_instance();
}
::dg::model::BrandIndex* IndexResponse::mutable_brandindex() {
  if (!has_brandindex()) {
    clear_index_content();
    set_has_brandindex();
    index_content_.brandindex_ = new ::dg::model::BrandIndex;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.IndexResponse.BrandIndex)
  return index_content_.brandindex_;
}
::dg::model::BrandIndex* IndexResponse::release_brandindex() {
  // @@protoc_insertion_point(field_release:dg.model.IndexResponse.BrandIndex)
  if (has_brandindex()) {
    clear_has_index_content();
    ::dg::model::BrandIndex* temp = index_content_.brandindex_;
    index_content_.brandindex_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void IndexResponse::set_allocated_brandindex(::dg::model::BrandIndex* brandindex) {
  clear_index_content();
  if (brandindex) {
    set_has_brandindex();
    index_content_.brandindex_ = brandindex;
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.IndexResponse.BrandIndex)
}

bool IndexResponse::has_index_content() const {
  return index_content_case() != INDEX_CONTENT_NOT_SET;
}
void IndexResponse::clear_has_index_content() {
  _oneof_case_[0] = INDEX_CONTENT_NOT_SET;
}
IndexResponse::IndexContentCase IndexResponse::index_content_case() const {
  return IndexResponse::IndexContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessRequest::kContextFieldNumber;
const int WitnessRequest::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessRequest::WitnessRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessRequest)
}

void WitnessRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  context_ = const_cast< ::dg::model::WitnessRequestContext*>(&::dg::model::WitnessRequestContext::default_instance());
  image_ = const_cast< ::dg::model::WitnessImage*>(&::dg::model::WitnessImage::default_instance());
}

WitnessRequest::WitnessRequest(const WitnessRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessRequest)
}

void WitnessRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  context_ = NULL;
  image_ = NULL;
}

WitnessRequest::~WitnessRequest() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessRequest)
  SharedDtor();
}

void WitnessRequest::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
    delete image_;
  }
}

void WitnessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessRequest_descriptor_;
}

const WitnessRequest& WitnessRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessRequest* WitnessRequest::default_instance_ = NULL;

WitnessRequest* WitnessRequest::New(::google::protobuf::Arena* arena) const {
  WitnessRequest* n = new WitnessRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}

bool WitnessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.WitnessRequestContext Context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Image;
        break;
      }

      // optional .dg.model.WitnessImage Image = 2;
      case 2: {
        if (tag == 18) {
         parse_Image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessRequest)
  return false;
#undef DO_
}

void WitnessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessRequest)
  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional .dg.model.WitnessImage Image = 2;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessRequest)
}

::google::protobuf::uint8* WitnessRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessRequest)
  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // optional .dg.model.WitnessImage Image = 2;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->image_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessRequest)
  return target;
}

int WitnessRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessRequest)
  int total_size = 0;

  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional .dg.model.WitnessImage Image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessRequest)
    MergeFrom(*source);
  }
}

void WitnessRequest::MergeFrom(const WitnessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_context()) {
    mutable_context()->::dg::model::WitnessRequestContext::MergeFrom(from.context());
  }
  if (from.has_image()) {
    mutable_image()->::dg::model::WitnessImage::MergeFrom(from.image());
  }
}

void WitnessRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessRequest::CopyFrom(const WitnessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessRequest::IsInitialized() const {

  return true;
}

void WitnessRequest::Swap(WitnessRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessRequest::InternalSwap(WitnessRequest* other) {
  std::swap(context_, other->context_);
  std::swap(image_, other->image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessRequest_descriptor_;
  metadata.reflection = WitnessRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessRequest

// optional .dg.model.WitnessRequestContext Context = 1;
bool WitnessRequest::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
void WitnessRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::dg::model::WitnessRequestContext& WitnessRequest::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequest.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::dg::model::WitnessRequestContext* WitnessRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessRequestContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequest.Context)
  return context_;
}
::dg::model::WitnessRequestContext* WitnessRequest::release_context() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessRequest.Context)
  
  ::dg::model::WitnessRequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
void WitnessRequest::set_allocated_context(::dg::model::WitnessRequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequest.Context)
}

// optional .dg.model.WitnessImage Image = 2;
bool WitnessRequest::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void WitnessRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::dg::model::WitnessImage& WitnessRequest::image() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequest.Image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::dg::model::WitnessImage* WitnessRequest::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::dg::model::WitnessImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequest.Image)
  return image_;
}
::dg::model::WitnessImage* WitnessRequest::release_image() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessRequest.Image)
  
  ::dg::model::WitnessImage* temp = image_;
  image_ = NULL;
  return temp;
}
void WitnessRequest::set_allocated_image(::dg::model::WitnessImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequest.Image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessBatchRequest::kContextFieldNumber;
const int WitnessBatchRequest::kImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessBatchRequest::WitnessBatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessBatchRequest)
}

void WitnessBatchRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  context_ = const_cast< ::dg::model::WitnessRequestContext*>(&::dg::model::WitnessRequestContext::default_instance());
}

WitnessBatchRequest::WitnessBatchRequest(const WitnessBatchRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessBatchRequest)
}

void WitnessBatchRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  context_ = NULL;
}

WitnessBatchRequest::~WitnessBatchRequest() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessBatchRequest)
  SharedDtor();
}

void WitnessBatchRequest::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
  }
}

void WitnessBatchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessBatchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessBatchRequest_descriptor_;
}

const WitnessBatchRequest& WitnessBatchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessBatchRequest* WitnessBatchRequest::default_instance_ = NULL;

WitnessBatchRequest* WitnessBatchRequest::New(::google::protobuf::Arena* arena) const {
  WitnessBatchRequest* n = new WitnessBatchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessBatchRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  images_.Clear();
}

bool WitnessBatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessBatchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.WitnessRequestContext Context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Images;
        break;
      }

      // repeated .dg.model.WitnessImage Images = 2;
      case 2: {
        if (tag == 18) {
         parse_Images:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Images;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessBatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessBatchRequest)
  return false;
#undef DO_
}

void WitnessBatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessBatchRequest)
  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated .dg.model.WitnessImage Images = 2;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->images(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessBatchRequest)
}

::google::protobuf::uint8* WitnessBatchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessBatchRequest)
  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // repeated .dg.model.WitnessImage Images = 2;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->images(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessBatchRequest)
  return target;
}

int WitnessBatchRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessBatchRequest)
  int total_size = 0;

  // optional .dg.model.WitnessRequestContext Context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // repeated .dg.model.WitnessImage Images = 2;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessBatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessBatchRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessBatchRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessBatchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessBatchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessBatchRequest)
    MergeFrom(*source);
  }
}

void WitnessBatchRequest::MergeFrom(const WitnessBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessBatchRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  images_.MergeFrom(from.images_);
  if (from.has_context()) {
    mutable_context()->::dg::model::WitnessRequestContext::MergeFrom(from.context());
  }
}

void WitnessBatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessBatchRequest::CopyFrom(const WitnessBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessBatchRequest::IsInitialized() const {

  return true;
}

void WitnessBatchRequest::Swap(WitnessBatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessBatchRequest::InternalSwap(WitnessBatchRequest* other) {
  std::swap(context_, other->context_);
  images_.UnsafeArenaSwap(&other->images_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessBatchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessBatchRequest_descriptor_;
  metadata.reflection = WitnessBatchRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessBatchRequest

// optional .dg.model.WitnessRequestContext Context = 1;
bool WitnessBatchRequest::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
void WitnessBatchRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::dg::model::WitnessRequestContext& WitnessBatchRequest::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchRequest.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::dg::model::WitnessRequestContext* WitnessBatchRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessRequestContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchRequest.Context)
  return context_;
}
::dg::model::WitnessRequestContext* WitnessBatchRequest::release_context() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessBatchRequest.Context)
  
  ::dg::model::WitnessRequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
void WitnessBatchRequest::set_allocated_context(::dg::model::WitnessRequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessBatchRequest.Context)
}

// repeated .dg.model.WitnessImage Images = 2;
int WitnessBatchRequest::images_size() const {
  return images_.size();
}
void WitnessBatchRequest::clear_images() {
  images_.Clear();
}
const ::dg::model::WitnessImage& WitnessBatchRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchRequest.Images)
  return images_.Get(index);
}
::dg::model::WitnessImage* WitnessBatchRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchRequest.Images)
  return images_.Mutable(index);
}
::dg::model::WitnessImage* WitnessBatchRequest::add_images() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessBatchRequest.Images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::WitnessImage >*
WitnessBatchRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessBatchRequest.Images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessImage >&
WitnessBatchRequest::images() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessBatchRequest.Images)
  return images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessResponse::kContextFieldNumber;
const int WitnessResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessResponse::WitnessResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessResponse)
}

void WitnessResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  context_ = const_cast< ::dg::model::WitnessResponseContext*>(&::dg::model::WitnessResponseContext::default_instance());
  result_ = const_cast< ::dg::model::WitnessResult*>(&::dg::model::WitnessResult::default_instance());
}

WitnessResponse::WitnessResponse(const WitnessResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessResponse)
}

void WitnessResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  context_ = NULL;
  result_ = NULL;
}

WitnessResponse::~WitnessResponse() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessResponse)
  SharedDtor();
}

void WitnessResponse::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
    delete result_;
  }
}

void WitnessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessResponse_descriptor_;
}

const WitnessResponse& WitnessResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessResponse* WitnessResponse::default_instance_ = NULL;

WitnessResponse* WitnessResponse::New(::google::protobuf::Arena* arena) const {
  WitnessResponse* n = new WitnessResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessResponse)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}

bool WitnessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.WitnessResponseContext Context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Result;
        break;
      }

      // optional .dg.model.WitnessResult Result = 2;
      case 2: {
        if (tag == 18) {
         parse_Result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessResponse)
  return false;
#undef DO_
}

void WitnessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessResponse)
  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional .dg.model.WitnessResult Result = 2;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->result_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessResponse)
}

::google::protobuf::uint8* WitnessResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessResponse)
  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // optional .dg.model.WitnessResult Result = 2;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->result_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessResponse)
  return target;
}

int WitnessResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessResponse)
  int total_size = 0;

  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional .dg.model.WitnessResult Result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessResponse)
    MergeFrom(*source);
  }
}

void WitnessResponse::MergeFrom(const WitnessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_context()) {
    mutable_context()->::dg::model::WitnessResponseContext::MergeFrom(from.context());
  }
  if (from.has_result()) {
    mutable_result()->::dg::model::WitnessResult::MergeFrom(from.result());
  }
}

void WitnessResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessResponse::CopyFrom(const WitnessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessResponse::IsInitialized() const {

  return true;
}

void WitnessResponse::Swap(WitnessResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessResponse::InternalSwap(WitnessResponse* other) {
  std::swap(context_, other->context_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessResponse_descriptor_;
  metadata.reflection = WitnessResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessResponse

// optional .dg.model.WitnessResponseContext Context = 1;
bool WitnessResponse::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
void WitnessResponse::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::dg::model::WitnessResponseContext& WitnessResponse::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponse.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::dg::model::WitnessResponseContext* WitnessResponse::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessResponseContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponse.Context)
  return context_;
}
::dg::model::WitnessResponseContext* WitnessResponse::release_context() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponse.Context)
  
  ::dg::model::WitnessResponseContext* temp = context_;
  context_ = NULL;
  return temp;
}
void WitnessResponse::set_allocated_context(::dg::model::WitnessResponseContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponse.Context)
}

// optional .dg.model.WitnessResult Result = 2;
bool WitnessResponse::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
void WitnessResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::dg::model::WitnessResult& WitnessResponse::result() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponse.Result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::dg::model::WitnessResult* WitnessResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::dg::model::WitnessResult;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponse.Result)
  return result_;
}
::dg::model::WitnessResult* WitnessResponse::release_result() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponse.Result)
  
  ::dg::model::WitnessResult* temp = result_;
  result_ = NULL;
  return temp;
}
void WitnessResponse::set_allocated_result(::dg::model::WitnessResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponse.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessBatchResponse::kContextFieldNumber;
const int WitnessBatchResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessBatchResponse::WitnessBatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessBatchResponse)
}

void WitnessBatchResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  context_ = const_cast< ::dg::model::WitnessResponseContext*>(&::dg::model::WitnessResponseContext::default_instance());
}

WitnessBatchResponse::WitnessBatchResponse(const WitnessBatchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessBatchResponse)
}

void WitnessBatchResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  context_ = NULL;
}

WitnessBatchResponse::~WitnessBatchResponse() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessBatchResponse)
  SharedDtor();
}

void WitnessBatchResponse::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
  }
}

void WitnessBatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessBatchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessBatchResponse_descriptor_;
}

const WitnessBatchResponse& WitnessBatchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessBatchResponse* WitnessBatchResponse::default_instance_ = NULL;

WitnessBatchResponse* WitnessBatchResponse::New(::google::protobuf::Arena* arena) const {
  WitnessBatchResponse* n = new WitnessBatchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessBatchResponse)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  results_.Clear();
}

bool WitnessBatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessBatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.WitnessResponseContext Context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Results;
        break;
      }

      // repeated .dg.model.WitnessResult Results = 2;
      case 2: {
        if (tag == 18) {
         parse_Results:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessBatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessBatchResponse)
  return false;
#undef DO_
}

void WitnessBatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessBatchResponse)
  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated .dg.model.WitnessResult Results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessBatchResponse)
}

::google::protobuf::uint8* WitnessBatchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessBatchResponse)
  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // repeated .dg.model.WitnessResult Results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessBatchResponse)
  return target;
}

int WitnessBatchResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessBatchResponse)
  int total_size = 0;

  // optional .dg.model.WitnessResponseContext Context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // repeated .dg.model.WitnessResult Results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessBatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessBatchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessBatchResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessBatchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessBatchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessBatchResponse)
    MergeFrom(*source);
  }
}

void WitnessBatchResponse::MergeFrom(const WitnessBatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessBatchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  results_.MergeFrom(from.results_);
  if (from.has_context()) {
    mutable_context()->::dg::model::WitnessResponseContext::MergeFrom(from.context());
  }
}

void WitnessBatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessBatchResponse::CopyFrom(const WitnessBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessBatchResponse::IsInitialized() const {

  return true;
}

void WitnessBatchResponse::Swap(WitnessBatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessBatchResponse::InternalSwap(WitnessBatchResponse* other) {
  std::swap(context_, other->context_);
  results_.UnsafeArenaSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessBatchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessBatchResponse_descriptor_;
  metadata.reflection = WitnessBatchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessBatchResponse

// optional .dg.model.WitnessResponseContext Context = 1;
bool WitnessBatchResponse::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
void WitnessBatchResponse::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::dg::model::WitnessResponseContext& WitnessBatchResponse::context() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchResponse.Context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::dg::model::WitnessResponseContext* WitnessBatchResponse::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::dg::model::WitnessResponseContext;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchResponse.Context)
  return context_;
}
::dg::model::WitnessResponseContext* WitnessBatchResponse::release_context() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessBatchResponse.Context)
  
  ::dg::model::WitnessResponseContext* temp = context_;
  context_ = NULL;
  return temp;
}
void WitnessBatchResponse::set_allocated_context(::dg::model::WitnessResponseContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessBatchResponse.Context)
}

// repeated .dg.model.WitnessResult Results = 2;
int WitnessBatchResponse::results_size() const {
  return results_.size();
}
void WitnessBatchResponse::clear_results() {
  results_.Clear();
}
const ::dg::model::WitnessResult& WitnessBatchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessBatchResponse.Results)
  return results_.Get(index);
}
::dg::model::WitnessResult* WitnessBatchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessBatchResponse.Results)
  return results_.Mutable(index);
}
::dg::model::WitnessResult* WitnessBatchResponse::add_results() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessBatchResponse.Results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::WitnessResult >*
WitnessBatchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessBatchResponse.Results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessResult >&
WitnessBatchResponse::results() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessBatchResponse.Results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessRelativeROI::kPosXFieldNumber;
const int WitnessRelativeROI::kPosYFieldNumber;
const int WitnessRelativeROI::kWidthFieldNumber;
const int WitnessRelativeROI::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessRelativeROI::WitnessRelativeROI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessRelativeROI)
}

void WitnessRelativeROI::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WitnessRelativeROI::WitnessRelativeROI(const WitnessRelativeROI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessRelativeROI)
}

void WitnessRelativeROI::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  width_ = 0;
  height_ = 0;
}

WitnessRelativeROI::~WitnessRelativeROI() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessRelativeROI)
  SharedDtor();
}

void WitnessRelativeROI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WitnessRelativeROI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessRelativeROI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessRelativeROI_descriptor_;
}

const WitnessRelativeROI& WitnessRelativeROI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessRelativeROI* WitnessRelativeROI::default_instance_ = NULL;

WitnessRelativeROI* WitnessRelativeROI::New(::google::protobuf::Arena* arena) const {
  WitnessRelativeROI* n = new WitnessRelativeROI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessRelativeROI::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessRelativeROI)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WitnessRelativeROI, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WitnessRelativeROI*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(posx_, height_);

#undef ZR_HELPER_
#undef ZR_

}

bool WitnessRelativeROI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessRelativeROI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PosX = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 2;
      case 2: {
        if (tag == 16) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Width;
        break;
      }

      // optional int32 Width = 3;
      case 3: {
        if (tag == 24) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Height;
        break;
      }

      // optional int32 Height = 4;
      case 4: {
        if (tag == 32) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessRelativeROI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessRelativeROI)
  return false;
#undef DO_
}

void WitnessRelativeROI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessRelativeROI)
  // optional int32 PosX = 1;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posx(), output);
  }

  // optional int32 PosY = 2;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posy(), output);
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 Height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessRelativeROI)
}

::google::protobuf::uint8* WitnessRelativeROI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessRelativeROI)
  // optional int32 PosX = 1;
  if (this->posx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posx(), target);
  }

  // optional int32 PosY = 2;
  if (this->posy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posy(), target);
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 Height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessRelativeROI)
  return target;
}

int WitnessRelativeROI::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessRelativeROI)
  int total_size = 0;

  // optional int32 PosX = 1;
  if (this->posx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posx());
  }

  // optional int32 PosY = 2;
  if (this->posy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posy());
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 Height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessRelativeROI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessRelativeROI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessRelativeROI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessRelativeROI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessRelativeROI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessRelativeROI)
    MergeFrom(*source);
  }
}

void WitnessRelativeROI::MergeFrom(const WitnessRelativeROI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessRelativeROI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void WitnessRelativeROI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessRelativeROI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessRelativeROI::CopyFrom(const WitnessRelativeROI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessRelativeROI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessRelativeROI::IsInitialized() const {

  return true;
}

void WitnessRelativeROI::Swap(WitnessRelativeROI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessRelativeROI::InternalSwap(WitnessRelativeROI* other) {
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessRelativeROI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessRelativeROI_descriptor_;
  metadata.reflection = WitnessRelativeROI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessRelativeROI

// optional int32 PosX = 1;
void WitnessRelativeROI::clear_posx() {
  posx_ = 0;
}
 ::google::protobuf::int32 WitnessRelativeROI::posx() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRelativeROI.PosX)
  return posx_;
}
 void WitnessRelativeROI::set_posx(::google::protobuf::int32 value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRelativeROI.PosX)
}

// optional int32 PosY = 2;
void WitnessRelativeROI::clear_posy() {
  posy_ = 0;
}
 ::google::protobuf::int32 WitnessRelativeROI::posy() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRelativeROI.PosY)
  return posy_;
}
 void WitnessRelativeROI::set_posy(::google::protobuf::int32 value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRelativeROI.PosY)
}

// optional int32 Width = 3;
void WitnessRelativeROI::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 WitnessRelativeROI::width() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRelativeROI.Width)
  return width_;
}
 void WitnessRelativeROI::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRelativeROI.Width)
}

// optional int32 Height = 4;
void WitnessRelativeROI::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 WitnessRelativeROI::height() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRelativeROI.Height)
  return height_;
}
 void WitnessRelativeROI::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRelativeROI.Height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessMarginROI::kLeftFieldNumber;
const int WitnessMarginROI::kTopFieldNumber;
const int WitnessMarginROI::kRightFieldNumber;
const int WitnessMarginROI::kBottomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessMarginROI::WitnessMarginROI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessMarginROI)
}

void WitnessMarginROI::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WitnessMarginROI::WitnessMarginROI(const WitnessMarginROI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessMarginROI)
}

void WitnessMarginROI::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  left_ = 0;
  top_ = 0;
  right_ = 0;
  bottom_ = 0;
}

WitnessMarginROI::~WitnessMarginROI() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessMarginROI)
  SharedDtor();
}

void WitnessMarginROI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WitnessMarginROI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessMarginROI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessMarginROI_descriptor_;
}

const WitnessMarginROI& WitnessMarginROI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessMarginROI* WitnessMarginROI::default_instance_ = NULL;

WitnessMarginROI* WitnessMarginROI::New(::google::protobuf::Arena* arena) const {
  WitnessMarginROI* n = new WitnessMarginROI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessMarginROI::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessMarginROI)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WitnessMarginROI, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WitnessMarginROI*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(left_, bottom_);

#undef ZR_HELPER_
#undef ZR_

}

bool WitnessMarginROI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessMarginROI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Top;
        break;
      }

      // optional int32 Top = 2;
      case 2: {
        if (tag == 16) {
         parse_Top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Right;
        break;
      }

      // optional int32 Right = 3;
      case 3: {
        if (tag == 24) {
         parse_Right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Bottom;
        break;
      }

      // optional int32 Bottom = 4;
      case 4: {
        if (tag == 32) {
         parse_Bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessMarginROI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessMarginROI)
  return false;
#undef DO_
}

void WitnessMarginROI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessMarginROI)
  // optional int32 Left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // optional int32 Top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top(), output);
  }

  // optional int32 Right = 3;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right(), output);
  }

  // optional int32 Bottom = 4;
  if (this->bottom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bottom(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessMarginROI)
}

::google::protobuf::uint8* WitnessMarginROI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessMarginROI)
  // optional int32 Left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left(), target);
  }

  // optional int32 Top = 2;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top(), target);
  }

  // optional int32 Right = 3;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right(), target);
  }

  // optional int32 Bottom = 4;
  if (this->bottom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bottom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessMarginROI)
  return target;
}

int WitnessMarginROI::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessMarginROI)
  int total_size = 0;

  // optional int32 Left = 1;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // optional int32 Top = 2;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // optional int32 Right = 3;
  if (this->right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right());
  }

  // optional int32 Bottom = 4;
  if (this->bottom() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bottom());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessMarginROI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessMarginROI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessMarginROI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessMarginROI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessMarginROI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessMarginROI)
    MergeFrom(*source);
  }
}

void WitnessMarginROI::MergeFrom(const WitnessMarginROI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessMarginROI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
  if (from.bottom() != 0) {
    set_bottom(from.bottom());
  }
}

void WitnessMarginROI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessMarginROI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessMarginROI::CopyFrom(const WitnessMarginROI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessMarginROI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessMarginROI::IsInitialized() const {

  return true;
}

void WitnessMarginROI::Swap(WitnessMarginROI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessMarginROI::InternalSwap(WitnessMarginROI* other) {
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(right_, other->right_);
  std::swap(bottom_, other->bottom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessMarginROI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessMarginROI_descriptor_;
  metadata.reflection = WitnessMarginROI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessMarginROI

// optional int32 Left = 1;
void WitnessMarginROI::clear_left() {
  left_ = 0;
}
 ::google::protobuf::int32 WitnessMarginROI::left() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessMarginROI.Left)
  return left_;
}
 void WitnessMarginROI::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessMarginROI.Left)
}

// optional int32 Top = 2;
void WitnessMarginROI::clear_top() {
  top_ = 0;
}
 ::google::protobuf::int32 WitnessMarginROI::top() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessMarginROI.Top)
  return top_;
}
 void WitnessMarginROI::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessMarginROI.Top)
}

// optional int32 Right = 3;
void WitnessMarginROI::clear_right() {
  right_ = 0;
}
 ::google::protobuf::int32 WitnessMarginROI::right() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessMarginROI.Right)
  return right_;
}
 void WitnessMarginROI::set_right(::google::protobuf::int32 value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessMarginROI.Right)
}

// optional int32 Bottom = 4;
void WitnessMarginROI::clear_bottom() {
  bottom_ = 0;
}
 ::google::protobuf::int32 WitnessMarginROI::bottom() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessMarginROI.Bottom)
  return bottom_;
}
 void WitnessMarginROI::set_bottom(::google::protobuf::int32 value) {
  
  bottom_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessMarginROI.Bottom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessRequestContext::kSessionIdFieldNumber;
const int WitnessRequestContext::kUserNameFieldNumber;
const int WitnessRequestContext::kTokenFieldNumber;
const int WitnessRequestContext::kFunctionsFieldNumber;
const int WitnessRequestContext::kTypeFieldNumber;
const int WitnessRequestContext::kStoragesFieldNumber;
const int WitnessRequestContext::kParamsFieldNumber;
const int WitnessRequestContext::kMinFaceSizeFieldNumber;
const int WitnessRequestContext::kMaxFaceSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessRequestContext::WitnessRequestContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessRequestContext)
}

void WitnessRequestContext::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WitnessRequestContext::WitnessRequestContext(const WitnessRequestContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessRequestContext)
}

void WitnessRequestContext::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  params_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  params_.SetEntryDescriptor(
      &::dg::model::WitnessRequestContext_ParamsEntry_descriptor_);
  minfacesize_ = 0;
  maxfacesize_ = 0;
}

WitnessRequestContext::~WitnessRequestContext() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessRequestContext)
  SharedDtor();
}

void WitnessRequestContext::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WitnessRequestContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessRequestContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessRequestContext_descriptor_;
}

const WitnessRequestContext& WitnessRequestContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessRequestContext* WitnessRequestContext::default_instance_ = NULL;

WitnessRequestContext* WitnessRequestContext::New(::google::protobuf::Arena* arena) const {
  WitnessRequestContext* n = new WitnessRequestContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessRequestContext::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessRequestContext)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WitnessRequestContext, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WitnessRequestContext*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, minfacesize_);
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxfacesize_ = 0;

#undef ZR_HELPER_
#undef ZR_

  functions_.Clear();
  storages_.Clear();
  params_.Clear();
}

bool WitnessRequestContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessRequestContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessRequestContext.SessionId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (tag == 18) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessRequestContext.UserName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Token;
        break;
      }

      // optional string Token = 3;
      case 3: {
        if (tag == 26) {
         parse_Token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessRequestContext.Token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Functions;
        break;
      }

      // repeated .dg.model.RecognizeFunctions Functions = 4;
      case 4: {
        if (tag == 34) {
         parse_Functions:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_functions(static_cast< ::dg::model::RecognizeFunctions >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 32) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_functions(static_cast< ::dg::model::RecognizeFunctions >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // optional .dg.model.RecognizeType Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dg::model::RecognizeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Storages;
        break;
      }

      // repeated .dg.model.StorageConfig Storages = 6;
      case 6: {
        if (tag == 50) {
         parse_Storages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Storages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_storages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_Storages;
        if (input->ExpectTag(58)) goto parse_loop_Params;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> Params = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Params:
          ::google::protobuf::scoped_ptr<WitnessRequestContext_ParamsEntry> entry(params_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_params())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessRequestContext.ParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->mutable_value()->data(),
            entry->mutable_value()->length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessRequestContext.ParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_Params;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_MinFaceSize;
        break;
      }

      // optional int32 MinFaceSize = 8;
      case 8: {
        if (tag == 64) {
         parse_MinFaceSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minfacesize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_MaxFaceSize;
        break;
      }

      // optional int32 MaxFaceSize = 9;
      case 9: {
        if (tag == 72) {
         parse_MaxFaceSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfacesize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessRequestContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessRequestContext)
  return false;
#undef DO_
}

void WitnessRequestContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessRequestContext)
  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessRequestContext.SessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // optional string UserName = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessRequestContext.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string Token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessRequestContext.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // repeated .dg.model.RecognizeFunctions Functions = 4;
  if (this->functions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_functions_cached_byte_size_);
  }
  for (int i = 0; i < this->functions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->functions(i), output);
  }

  // optional .dg.model.RecognizeType Type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .dg.model.StorageConfig Storages = 6;
  for (unsigned int i = 0, n = this->storages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->storages(i), output);
  }

  // map<string, string> Params = 7;
  {
    ::google::protobuf::scoped_ptr<WitnessRequestContext_ParamsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          7, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessRequestContext.ParamsEntry.key");
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessRequestContext.ParamsEntry.value");
    }
  }

  // optional int32 MinFaceSize = 8;
  if (this->minfacesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->minfacesize(), output);
  }

  // optional int32 MaxFaceSize = 9;
  if (this->maxfacesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxfacesize(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessRequestContext)
}

::google::protobuf::uint8* WitnessRequestContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessRequestContext)
  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessRequestContext.SessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // optional string UserName = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessRequestContext.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string Token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessRequestContext.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // repeated .dg.model.RecognizeFunctions Functions = 4;
  if (this->functions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _functions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->functions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->functions(i), target);
  }

  // optional .dg.model.RecognizeType Type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .dg.model.StorageConfig Storages = 6;
  for (unsigned int i = 0, n = this->storages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->storages(i), target);
  }

  // map<string, string> Params = 7;
  {
    ::google::protobuf::scoped_ptr<WitnessRequestContext_ParamsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              7, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessRequestContext.ParamsEntry.key");
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessRequestContext.ParamsEntry.value");
    }
  }

  // optional int32 MinFaceSize = 8;
  if (this->minfacesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->minfacesize(), target);
  }

  // optional int32 MaxFaceSize = 9;
  if (this->maxfacesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxfacesize(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessRequestContext)
  return target;
}

int WitnessRequestContext::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessRequestContext)
  int total_size = 0;

  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  // optional string UserName = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string Token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // optional .dg.model.RecognizeType Type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int32 MinFaceSize = 8;
  if (this->minfacesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minfacesize());
  }

  // optional int32 MaxFaceSize = 9;
  if (this->maxfacesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxfacesize());
  }

  // repeated .dg.model.RecognizeFunctions Functions = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->functions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->functions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _functions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .dg.model.StorageConfig Storages = 6;
  total_size += 1 * this->storages_size();
  for (int i = 0; i < this->storages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storages(i));
  }

  // map<string, string> Params = 7;
  total_size += 1 * this->params_size();
  {
    ::google::protobuf::scoped_ptr<WitnessRequestContext_ParamsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessRequestContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessRequestContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessRequestContext* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessRequestContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessRequestContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessRequestContext)
    MergeFrom(*source);
  }
}

void WitnessRequestContext::MergeFrom(const WitnessRequestContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessRequestContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  functions_.MergeFrom(from.functions_);
  storages_.MergeFrom(from.storages_);
  params_.MergeFrom(from.params_);
  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.minfacesize() != 0) {
    set_minfacesize(from.minfacesize());
  }
  if (from.maxfacesize() != 0) {
    set_maxfacesize(from.maxfacesize());
  }
}

void WitnessRequestContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessRequestContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessRequestContext::CopyFrom(const WitnessRequestContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessRequestContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessRequestContext::IsInitialized() const {

  return true;
}

void WitnessRequestContext::Swap(WitnessRequestContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessRequestContext::InternalSwap(WitnessRequestContext* other) {
  sessionid_.Swap(&other->sessionid_);
  username_.Swap(&other->username_);
  token_.Swap(&other->token_);
  functions_.UnsafeArenaSwap(&other->functions_);
  std::swap(type_, other->type_);
  storages_.UnsafeArenaSwap(&other->storages_);
  params_.Swap(&other->params_);
  std::swap(minfacesize_, other->minfacesize_);
  std::swap(maxfacesize_, other->maxfacesize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessRequestContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessRequestContext_descriptor_;
  metadata.reflection = WitnessRequestContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessRequestContext

// optional string SessionId = 1;
void WitnessRequestContext::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessRequestContext::sessionid() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.SessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessRequestContext::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.SessionId)
}
 void WitnessRequestContext::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessRequestContext.SessionId)
}
 void WitnessRequestContext::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessRequestContext.SessionId)
}
 ::std::string* WitnessRequestContext::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequestContext.SessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessRequestContext::release_sessionid() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessRequestContext.SessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessRequestContext::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequestContext.SessionId)
}

// optional string UserName = 2;
void WitnessRequestContext::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessRequestContext::username() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.UserName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessRequestContext::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.UserName)
}
 void WitnessRequestContext::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessRequestContext.UserName)
}
 void WitnessRequestContext::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessRequestContext.UserName)
}
 ::std::string* WitnessRequestContext::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequestContext.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessRequestContext::release_username() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessRequestContext.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessRequestContext::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequestContext.UserName)
}

// optional string Token = 3;
void WitnessRequestContext::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessRequestContext::token() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessRequestContext::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.Token)
}
 void WitnessRequestContext::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessRequestContext.Token)
}
 void WitnessRequestContext::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessRequestContext.Token)
}
 ::std::string* WitnessRequestContext::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequestContext.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessRequestContext::release_token() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessRequestContext.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessRequestContext::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessRequestContext.Token)
}

// repeated .dg.model.RecognizeFunctions Functions = 4;
int WitnessRequestContext::functions_size() const {
  return functions_.size();
}
void WitnessRequestContext::clear_functions() {
  functions_.Clear();
}
 ::dg::model::RecognizeFunctions WitnessRequestContext::functions(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Functions)
  return static_cast< ::dg::model::RecognizeFunctions >(functions_.Get(index));
}
 void WitnessRequestContext::set_functions(int index, ::dg::model::RecognizeFunctions value) {
  functions_.Set(index, value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.Functions)
}
 void WitnessRequestContext::add_functions(::dg::model::RecognizeFunctions value) {
  functions_.Add(value);
  // @@protoc_insertion_point(field_add:dg.model.WitnessRequestContext.Functions)
}
 const ::google::protobuf::RepeatedField<int>&
WitnessRequestContext::functions() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessRequestContext.Functions)
  return functions_;
}
 ::google::protobuf::RepeatedField<int>*
WitnessRequestContext::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessRequestContext.Functions)
  return &functions_;
}

// optional .dg.model.RecognizeType Type = 5;
void WitnessRequestContext::clear_type() {
  type_ = 0;
}
 ::dg::model::RecognizeType WitnessRequestContext::type() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Type)
  return static_cast< ::dg::model::RecognizeType >(type_);
}
 void WitnessRequestContext::set_type(::dg::model::RecognizeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.Type)
}

// repeated .dg.model.StorageConfig Storages = 6;
int WitnessRequestContext::storages_size() const {
  return storages_.size();
}
void WitnessRequestContext::clear_storages() {
  storages_.Clear();
}
const ::dg::model::StorageConfig& WitnessRequestContext::storages(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.Storages)
  return storages_.Get(index);
}
::dg::model::StorageConfig* WitnessRequestContext::mutable_storages(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessRequestContext.Storages)
  return storages_.Mutable(index);
}
::dg::model::StorageConfig* WitnessRequestContext::add_storages() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessRequestContext.Storages)
  return storages_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::StorageConfig >*
WitnessRequestContext::mutable_storages() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessRequestContext.Storages)
  return &storages_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::StorageConfig >&
WitnessRequestContext::storages() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessRequestContext.Storages)
  return storages_;
}

// map<string, string> Params = 7;
int WitnessRequestContext::params_size() const {
  return params_.size();
}
void WitnessRequestContext::clear_params() {
  params_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
WitnessRequestContext::params() const {
  // @@protoc_insertion_point(field_map:dg.model.WitnessRequestContext.Params)
  return params_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
WitnessRequestContext::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.WitnessRequestContext.Params)
  return params_.MutableMap();
}

// optional int32 MinFaceSize = 8;
void WitnessRequestContext::clear_minfacesize() {
  minfacesize_ = 0;
}
 ::google::protobuf::int32 WitnessRequestContext::minfacesize() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.MinFaceSize)
  return minfacesize_;
}
 void WitnessRequestContext::set_minfacesize(::google::protobuf::int32 value) {
  
  minfacesize_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.MinFaceSize)
}

// optional int32 MaxFaceSize = 9;
void WitnessRequestContext::clear_maxfacesize() {
  maxfacesize_ = 0;
}
 ::google::protobuf::int32 WitnessRequestContext::maxfacesize() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessRequestContext.MaxFaceSize)
  return maxfacesize_;
}
 void WitnessRequestContext::set_maxfacesize(::google::protobuf::int32 value) {
  
  maxfacesize_ = value;
  // @@protoc_insertion_point(field_set:dg.model.WitnessRequestContext.MaxFaceSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessImage::kDataFieldNumber;
const int WitnessImage::kWitnessMetaDataFieldNumber;
const int WitnessImage::kRelativeRoiFieldNumber;
const int WitnessImage::kMarginRoiFieldNumber;
const int WitnessImage::kUserObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessImage::WitnessImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessImage)
}

void WitnessImage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  data_ = const_cast< ::dg::model::Image*>(&::dg::model::Image::default_instance());
  witnessmetadata_ = const_cast< ::dg::model::SrcMetadata*>(&::dg::model::SrcMetadata::default_instance());
}

WitnessImage::WitnessImage(const WitnessImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessImage)
}

void WitnessImage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  data_ = NULL;
  witnessmetadata_ = NULL;
}

WitnessImage::~WitnessImage() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessImage)
  SharedDtor();
}

void WitnessImage::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete witnessmetadata_;
  }
}

void WitnessImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessImage_descriptor_;
}

const WitnessImage& WitnessImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessImage* WitnessImage::default_instance_ = NULL;

WitnessImage* WitnessImage::New(::google::protobuf::Arena* arena) const {
  WitnessImage* n = new WitnessImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessImage::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessImage)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && witnessmetadata_ != NULL) delete witnessmetadata_;
  witnessmetadata_ = NULL;
  relativeroi_.Clear();
  marginroi_.Clear();
  userobject_.Clear();
}

bool WitnessImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.Image Data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_WitnessMetaData;
        break;
      }

      // optional .dg.model.SrcMetadata WitnessMetaData = 2;
      case 2: {
        if (tag == 18) {
         parse_WitnessMetaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_witnessmetadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RelativeRoi;
        break;
      }

      // repeated .dg.model.WitnessRelativeROI RelativeRoi = 3;
      case 3: {
        if (tag == 26) {
         parse_RelativeRoi:
          DO_(input->IncrementRecursionDepth());
         parse_loop_RelativeRoi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_relativeroi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_RelativeRoi;
        if (input->ExpectTag(34)) goto parse_loop_MarginRoi;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .dg.model.WitnessMarginROI MarginRoi = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_MarginRoi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_marginroi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_MarginRoi;
        if (input->ExpectTag(42)) goto parse_loop_UserObject;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .dg.model.WitnessUserObject UserObject = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_UserObject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userobject()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_UserObject;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessImage)
  return false;
#undef DO_
}

void WitnessImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessImage)
  // optional .dg.model.Image Data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // optional .dg.model.SrcMetadata WitnessMetaData = 2;
  if (this->has_witnessmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->witnessmetadata_, output);
  }

  // repeated .dg.model.WitnessRelativeROI RelativeRoi = 3;
  for (unsigned int i = 0, n = this->relativeroi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->relativeroi(i), output);
  }

  // repeated .dg.model.WitnessMarginROI MarginRoi = 4;
  for (unsigned int i = 0, n = this->marginroi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->marginroi(i), output);
  }

  // repeated .dg.model.WitnessUserObject UserObject = 5;
  for (unsigned int i = 0, n = this->userobject_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userobject(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessImage)
}

::google::protobuf::uint8* WitnessImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessImage)
  // optional .dg.model.Image Data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->data_, target);
  }

  // optional .dg.model.SrcMetadata WitnessMetaData = 2;
  if (this->has_witnessmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->witnessmetadata_, target);
  }

  // repeated .dg.model.WitnessRelativeROI RelativeRoi = 3;
  for (unsigned int i = 0, n = this->relativeroi_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->relativeroi(i), target);
  }

  // repeated .dg.model.WitnessMarginROI MarginRoi = 4;
  for (unsigned int i = 0, n = this->marginroi_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->marginroi(i), target);
  }

  // repeated .dg.model.WitnessUserObject UserObject = 5;
  for (unsigned int i = 0, n = this->userobject_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userobject(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessImage)
  return target;
}

int WitnessImage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessImage)
  int total_size = 0;

  // optional .dg.model.Image Data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional .dg.model.SrcMetadata WitnessMetaData = 2;
  if (this->has_witnessmetadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->witnessmetadata_);
  }

  // repeated .dg.model.WitnessRelativeROI RelativeRoi = 3;
  total_size += 1 * this->relativeroi_size();
  for (int i = 0; i < this->relativeroi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relativeroi(i));
  }

  // repeated .dg.model.WitnessMarginROI MarginRoi = 4;
  total_size += 1 * this->marginroi_size();
  for (int i = 0; i < this->marginroi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marginroi(i));
  }

  // repeated .dg.model.WitnessUserObject UserObject = 5;
  total_size += 1 * this->userobject_size();
  for (int i = 0; i < this->userobject_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userobject(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessImage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessImage)
    MergeFrom(*source);
  }
}

void WitnessImage::MergeFrom(const WitnessImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  relativeroi_.MergeFrom(from.relativeroi_);
  marginroi_.MergeFrom(from.marginroi_);
  userobject_.MergeFrom(from.userobject_);
  if (from.has_data()) {
    mutable_data()->::dg::model::Image::MergeFrom(from.data());
  }
  if (from.has_witnessmetadata()) {
    mutable_witnessmetadata()->::dg::model::SrcMetadata::MergeFrom(from.witnessmetadata());
  }
}

void WitnessImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessImage::CopyFrom(const WitnessImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessImage::IsInitialized() const {

  return true;
}

void WitnessImage::Swap(WitnessImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessImage::InternalSwap(WitnessImage* other) {
  std::swap(data_, other->data_);
  std::swap(witnessmetadata_, other->witnessmetadata_);
  relativeroi_.UnsafeArenaSwap(&other->relativeroi_);
  marginroi_.UnsafeArenaSwap(&other->marginroi_);
  userobject_.UnsafeArenaSwap(&other->userobject_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessImage_descriptor_;
  metadata.reflection = WitnessImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessImage

// optional .dg.model.Image Data = 1;
bool WitnessImage::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void WitnessImage::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::dg::model::Image& WitnessImage::data() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::dg::model::Image* WitnessImage::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.Data)
  return data_;
}
::dg::model::Image* WitnessImage::release_data() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessImage.Data)
  
  ::dg::model::Image* temp = data_;
  data_ = NULL;
  return temp;
}
void WitnessImage::set_allocated_data(::dg::model::Image* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessImage.Data)
}

// optional .dg.model.SrcMetadata WitnessMetaData = 2;
bool WitnessImage::has_witnessmetadata() const {
  return !_is_default_instance_ && witnessmetadata_ != NULL;
}
void WitnessImage::clear_witnessmetadata() {
  if (GetArenaNoVirtual() == NULL && witnessmetadata_ != NULL) delete witnessmetadata_;
  witnessmetadata_ = NULL;
}
const ::dg::model::SrcMetadata& WitnessImage::witnessmetadata() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.WitnessMetaData)
  return witnessmetadata_ != NULL ? *witnessmetadata_ : *default_instance_->witnessmetadata_;
}
::dg::model::SrcMetadata* WitnessImage::mutable_witnessmetadata() {
  
  if (witnessmetadata_ == NULL) {
    witnessmetadata_ = new ::dg::model::SrcMetadata;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.WitnessMetaData)
  return witnessmetadata_;
}
::dg::model::SrcMetadata* WitnessImage::release_witnessmetadata() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessImage.WitnessMetaData)
  
  ::dg::model::SrcMetadata* temp = witnessmetadata_;
  witnessmetadata_ = NULL;
  return temp;
}
void WitnessImage::set_allocated_witnessmetadata(::dg::model::SrcMetadata* witnessmetadata) {
  delete witnessmetadata_;
  witnessmetadata_ = witnessmetadata;
  if (witnessmetadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessImage.WitnessMetaData)
}

// repeated .dg.model.WitnessRelativeROI RelativeRoi = 3;
int WitnessImage::relativeroi_size() const {
  return relativeroi_.size();
}
void WitnessImage::clear_relativeroi() {
  relativeroi_.Clear();
}
const ::dg::model::WitnessRelativeROI& WitnessImage::relativeroi(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.RelativeRoi)
  return relativeroi_.Get(index);
}
::dg::model::WitnessRelativeROI* WitnessImage::mutable_relativeroi(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.RelativeRoi)
  return relativeroi_.Mutable(index);
}
::dg::model::WitnessRelativeROI* WitnessImage::add_relativeroi() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessImage.RelativeRoi)
  return relativeroi_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::WitnessRelativeROI >*
WitnessImage::mutable_relativeroi() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessImage.RelativeRoi)
  return &relativeroi_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessRelativeROI >&
WitnessImage::relativeroi() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessImage.RelativeRoi)
  return relativeroi_;
}

// repeated .dg.model.WitnessMarginROI MarginRoi = 4;
int WitnessImage::marginroi_size() const {
  return marginroi_.size();
}
void WitnessImage::clear_marginroi() {
  marginroi_.Clear();
}
const ::dg::model::WitnessMarginROI& WitnessImage::marginroi(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.MarginRoi)
  return marginroi_.Get(index);
}
::dg::model::WitnessMarginROI* WitnessImage::mutable_marginroi(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.MarginRoi)
  return marginroi_.Mutable(index);
}
::dg::model::WitnessMarginROI* WitnessImage::add_marginroi() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessImage.MarginRoi)
  return marginroi_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::WitnessMarginROI >*
WitnessImage::mutable_marginroi() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessImage.MarginRoi)
  return &marginroi_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessMarginROI >&
WitnessImage::marginroi() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessImage.MarginRoi)
  return marginroi_;
}

// repeated .dg.model.WitnessUserObject UserObject = 5;
int WitnessImage::userobject_size() const {
  return userobject_.size();
}
void WitnessImage::clear_userobject() {
  userobject_.Clear();
}
const ::dg::model::WitnessUserObject& WitnessImage::userobject(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessImage.UserObject)
  return userobject_.Get(index);
}
::dg::model::WitnessUserObject* WitnessImage::mutable_userobject(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessImage.UserObject)
  return userobject_.Mutable(index);
}
::dg::model::WitnessUserObject* WitnessImage::add_userobject() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessImage.UserObject)
  return userobject_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::WitnessUserObject >*
WitnessImage::mutable_userobject() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessImage.UserObject)
  return &userobject_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::WitnessUserObject >&
WitnessImage::userobject() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessImage.UserObject)
  return userobject_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessResponseContext::kSessionIdFieldNumber;
const int WitnessResponseContext::kStatusFieldNumber;
const int WitnessResponseContext::kMessageFieldNumber;
const int WitnessResponseContext::kRequestTsFieldNumber;
const int WitnessResponseContext::kResponseTsFieldNumber;
const int WitnessResponseContext::kDebugTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessResponseContext::WitnessResponseContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessResponseContext)
}

void WitnessResponseContext::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  requestts_ = const_cast< ::dg::model::Time*>(&::dg::model::Time::default_instance());
  responsets_ = const_cast< ::dg::model::Time*>(&::dg::model::Time::default_instance());
}

WitnessResponseContext::WitnessResponseContext(const WitnessResponseContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessResponseContext)
}

void WitnessResponseContext::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestts_ = NULL;
  responsets_ = NULL;
  debugts_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  debugts_.SetEntryDescriptor(
      &::dg::model::WitnessResponseContext_DebugTsEntry_descriptor_);
}

WitnessResponseContext::~WitnessResponseContext() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessResponseContext)
  SharedDtor();
}

void WitnessResponseContext::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete requestts_;
    delete responsets_;
  }
}

void WitnessResponseContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessResponseContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessResponseContext_descriptor_;
}

const WitnessResponseContext& WitnessResponseContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessResponseContext* WitnessResponseContext::default_instance_ = NULL;

WitnessResponseContext* WitnessResponseContext::New(::google::protobuf::Arena* arena) const {
  WitnessResponseContext* n = new WitnessResponseContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessResponseContext::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessResponseContext)
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && requestts_ != NULL) delete requestts_;
  requestts_ = NULL;
  if (GetArenaNoVirtual() == NULL && responsets_ != NULL) delete responsets_;
  responsets_ = NULL;
  debugts_.Clear();
}

bool WitnessResponseContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessResponseContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResponseContext.SessionId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Status;
        break;
      }

      // optional string Status = 2;
      case 2: {
        if (tag == 18) {
         parse_Status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResponseContext.Status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Message;
        break;
      }

      // optional string Message = 3;
      case 3: {
        if (tag == 26) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResponseContext.Message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RequestTs;
        break;
      }

      // optional .dg.model.Time RequestTs = 4;
      case 4: {
        if (tag == 34) {
         parse_RequestTs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ResponseTs;
        break;
      }

      // optional .dg.model.Time ResponseTs = 5;
      case 5: {
        if (tag == 42) {
         parse_ResponseTs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_responsets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DebugTs;
        break;
      }

      // map<string, .dg.model.Time> DebugTs = 6;
      case 6: {
        if (tag == 50) {
         parse_DebugTs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_DebugTs:
          ::google::protobuf::scoped_ptr<WitnessResponseContext_DebugTsEntry> entry(debugts_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_debugts())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResponseContext.DebugTsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_DebugTs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessResponseContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessResponseContext)
  return false;
#undef DO_
}

void WitnessResponseContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessResponseContext)
  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.SessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // optional string Status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.Status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // optional string Message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.Message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional .dg.model.Time RequestTs = 4;
  if (this->has_requestts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->requestts_, output);
  }

  // optional .dg.model.Time ResponseTs = 5;
  if (this->has_responsets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->responsets_, output);
  }

  // map<string, .dg.model.Time> DebugTs = 6;
  {
    ::google::protobuf::scoped_ptr<WitnessResponseContext_DebugTsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::dg::model::Time >::const_iterator
        it = this->debugts().begin();
        it != this->debugts().end(); ++it) {
      entry.reset(debugts_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          6, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessResponseContext.DebugTsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessResponseContext)
}

::google::protobuf::uint8* WitnessResponseContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessResponseContext)
  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.SessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // optional string Status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.Status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // optional string Message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResponseContext.Message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional .dg.model.Time RequestTs = 4;
  if (this->has_requestts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->requestts_, target);
  }

  // optional .dg.model.Time ResponseTs = 5;
  if (this->has_responsets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->responsets_, target);
  }

  // map<string, .dg.model.Time> DebugTs = 6;
  {
    ::google::protobuf::scoped_ptr<WitnessResponseContext_DebugTsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::dg::model::Time >::const_iterator
        it = this->debugts().begin();
        it != this->debugts().end(); ++it) {
      entry.reset(debugts_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              6, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.WitnessResponseContext.DebugTsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessResponseContext)
  return target;
}

int WitnessResponseContext::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessResponseContext)
  int total_size = 0;

  // optional string SessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  // optional string Status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // optional string Message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional .dg.model.Time RequestTs = 4;
  if (this->has_requestts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requestts_);
  }

  // optional .dg.model.Time ResponseTs = 5;
  if (this->has_responsets()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->responsets_);
  }

  // map<string, .dg.model.Time> DebugTs = 6;
  total_size += 1 * this->debugts_size();
  {
    ::google::protobuf::scoped_ptr<WitnessResponseContext_DebugTsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::dg::model::Time >::const_iterator
        it = this->debugts().begin();
        it != this->debugts().end(); ++it) {
      entry.reset(debugts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessResponseContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessResponseContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessResponseContext* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessResponseContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessResponseContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessResponseContext)
    MergeFrom(*source);
  }
}

void WitnessResponseContext::MergeFrom(const WitnessResponseContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessResponseContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  debugts_.MergeFrom(from.debugts_);
  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_requestts()) {
    mutable_requestts()->::dg::model::Time::MergeFrom(from.requestts());
  }
  if (from.has_responsets()) {
    mutable_responsets()->::dg::model::Time::MergeFrom(from.responsets());
  }
}

void WitnessResponseContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessResponseContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessResponseContext::CopyFrom(const WitnessResponseContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessResponseContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessResponseContext::IsInitialized() const {

  return true;
}

void WitnessResponseContext::Swap(WitnessResponseContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessResponseContext::InternalSwap(WitnessResponseContext* other) {
  sessionid_.Swap(&other->sessionid_);
  status_.Swap(&other->status_);
  message_.Swap(&other->message_);
  std::swap(requestts_, other->requestts_);
  std::swap(responsets_, other->responsets_);
  debugts_.Swap(&other->debugts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessResponseContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessResponseContext_descriptor_;
  metadata.reflection = WitnessResponseContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessResponseContext

// optional string SessionId = 1;
void WitnessResponseContext::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessResponseContext::sessionid() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.SessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResponseContext.SessionId)
}
 void WitnessResponseContext::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResponseContext.SessionId)
}
 void WitnessResponseContext::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResponseContext.SessionId)
}
 ::std::string* WitnessResponseContext::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.SessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessResponseContext::release_sessionid() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponseContext.SessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.SessionId)
}

// optional string Status = 2;
void WitnessResponseContext::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessResponseContext::status() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.Status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResponseContext.Status)
}
 void WitnessResponseContext::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResponseContext.Status)
}
 void WitnessResponseContext::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResponseContext.Status)
}
 ::std::string* WitnessResponseContext::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.Status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessResponseContext::release_status() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponseContext.Status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.Status)
}

// optional string Message = 3;
void WitnessResponseContext::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessResponseContext::message() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResponseContext.Message)
}
 void WitnessResponseContext::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResponseContext.Message)
}
 void WitnessResponseContext::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResponseContext.Message)
}
 ::std::string* WitnessResponseContext::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessResponseContext::release_message() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponseContext.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResponseContext::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.Message)
}

// optional .dg.model.Time RequestTs = 4;
bool WitnessResponseContext::has_requestts() const {
  return !_is_default_instance_ && requestts_ != NULL;
}
void WitnessResponseContext::clear_requestts() {
  if (GetArenaNoVirtual() == NULL && requestts_ != NULL) delete requestts_;
  requestts_ = NULL;
}
const ::dg::model::Time& WitnessResponseContext::requestts() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.RequestTs)
  return requestts_ != NULL ? *requestts_ : *default_instance_->requestts_;
}
::dg::model::Time* WitnessResponseContext::mutable_requestts() {
  
  if (requestts_ == NULL) {
    requestts_ = new ::dg::model::Time;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.RequestTs)
  return requestts_;
}
::dg::model::Time* WitnessResponseContext::release_requestts() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponseContext.RequestTs)
  
  ::dg::model::Time* temp = requestts_;
  requestts_ = NULL;
  return temp;
}
void WitnessResponseContext::set_allocated_requestts(::dg::model::Time* requestts) {
  delete requestts_;
  requestts_ = requestts;
  if (requestts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.RequestTs)
}

// optional .dg.model.Time ResponseTs = 5;
bool WitnessResponseContext::has_responsets() const {
  return !_is_default_instance_ && responsets_ != NULL;
}
void WitnessResponseContext::clear_responsets() {
  if (GetArenaNoVirtual() == NULL && responsets_ != NULL) delete responsets_;
  responsets_ = NULL;
}
const ::dg::model::Time& WitnessResponseContext::responsets() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResponseContext.ResponseTs)
  return responsets_ != NULL ? *responsets_ : *default_instance_->responsets_;
}
::dg::model::Time* WitnessResponseContext::mutable_responsets() {
  
  if (responsets_ == NULL) {
    responsets_ = new ::dg::model::Time;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResponseContext.ResponseTs)
  return responsets_;
}
::dg::model::Time* WitnessResponseContext::release_responsets() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResponseContext.ResponseTs)
  
  ::dg::model::Time* temp = responsets_;
  responsets_ = NULL;
  return temp;
}
void WitnessResponseContext::set_allocated_responsets(::dg::model::Time* responsets) {
  delete responsets_;
  responsets_ = responsets;
  if (responsets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResponseContext.ResponseTs)
}

// map<string, .dg.model.Time> DebugTs = 6;
int WitnessResponseContext::debugts_size() const {
  return debugts_.size();
}
void WitnessResponseContext::clear_debugts() {
  debugts_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::dg::model::Time >&
WitnessResponseContext::debugts() const {
  // @@protoc_insertion_point(field_map:dg.model.WitnessResponseContext.DebugTs)
  return debugts_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::dg::model::Time >*
WitnessResponseContext::mutable_debugts() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.WitnessResponseContext.DebugTs)
  return debugts_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WitnessResult::kInnerStatusFieldNumber;
const int WitnessResult::kInnerMessageFieldNumber;
const int WitnessResult::kImageFieldNumber;
const int WitnessResult::kVehiclesFieldNumber;
const int WitnessResult::kPedestrianFieldNumber;
const int WitnessResult::kNonMotorVehiclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WitnessResult::WitnessResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.WitnessResult)
}

void WitnessResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  image_ = const_cast< ::dg::model::WitnessImage*>(&::dg::model::WitnessImage::default_instance());
}

WitnessResult::WitnessResult(const WitnessResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.WitnessResult)
}

void WitnessResult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  innerstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innermessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = NULL;
}

WitnessResult::~WitnessResult() {
  // @@protoc_insertion_point(destructor:dg.model.WitnessResult)
  SharedDtor();
}

void WitnessResult::SharedDtor() {
  innerstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innermessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete image_;
  }
}

void WitnessResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WitnessResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WitnessResult_descriptor_;
}

const WitnessResult& WitnessResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witness_2eproto();
  return *default_instance_;
}

WitnessResult* WitnessResult::default_instance_ = NULL;

WitnessResult* WitnessResult::New(::google::protobuf::Arena* arena) const {
  WitnessResult* n = new WitnessResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WitnessResult::Clear() {
// @@protoc_insertion_point(message_clear_start:dg.model.WitnessResult)
  innerstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  vehicles_.Clear();
  pedestrian_.Clear();
  nonmotorvehicles_.Clear();
}

bool WitnessResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.WitnessResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string InnerStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_innerstatus()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->innerstatus().data(), this->innerstatus().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResult.InnerStatus"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_InnerMessage;
        break;
      }

      // optional string InnerMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_InnerMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_innermessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->innermessage().data(), this->innermessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.WitnessResult.InnerMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Image;
        break;
      }

      // optional .dg.model.WitnessImage Image = 3;
      case 3: {
        if (tag == 26) {
         parse_Image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Vehicles;
        break;
      }

      // repeated .dg.model.RecVehicle Vehicles = 4;
      case 4: {
        if (tag == 34) {
         parse_Vehicles:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Vehicles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehicles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_Vehicles;
        if (input->ExpectTag(42)) goto parse_loop_Pedestrian;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .dg.model.RecPedestrian Pedestrian = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Pedestrian:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pedestrian()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_Pedestrian;
        if (input->ExpectTag(50)) goto parse_loop_NonMotorVehicles;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .dg.model.RecNonMotorVehicle NonMotorVehicles = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_NonMotorVehicles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nonmotorvehicles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_NonMotorVehicles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.WitnessResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.WitnessResult)
  return false;
#undef DO_
}

void WitnessResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.WitnessResult)
  // optional string InnerStatus = 1;
  if (this->innerstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->innerstatus().data(), this->innerstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResult.InnerStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->innerstatus(), output);
  }

  // optional string InnerMessage = 2;
  if (this->innermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->innermessage().data(), this->innermessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResult.InnerMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->innermessage(), output);
  }

  // optional .dg.model.WitnessImage Image = 3;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->image_, output);
  }

  // repeated .dg.model.RecVehicle Vehicles = 4;
  for (unsigned int i = 0, n = this->vehicles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vehicles(i), output);
  }

  // repeated .dg.model.RecPedestrian Pedestrian = 5;
  for (unsigned int i = 0, n = this->pedestrian_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pedestrian(i), output);
  }

  // repeated .dg.model.RecNonMotorVehicle NonMotorVehicles = 6;
  for (unsigned int i = 0, n = this->nonmotorvehicles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nonmotorvehicles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.WitnessResult)
}

::google::protobuf::uint8* WitnessResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.WitnessResult)
  // optional string InnerStatus = 1;
  if (this->innerstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->innerstatus().data(), this->innerstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResult.InnerStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->innerstatus(), target);
  }

  // optional string InnerMessage = 2;
  if (this->innermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->innermessage().data(), this->innermessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.WitnessResult.InnerMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->innermessage(), target);
  }

  // optional .dg.model.WitnessImage Image = 3;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->image_, target);
  }

  // repeated .dg.model.RecVehicle Vehicles = 4;
  for (unsigned int i = 0, n = this->vehicles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vehicles(i), target);
  }

  // repeated .dg.model.RecPedestrian Pedestrian = 5;
  for (unsigned int i = 0, n = this->pedestrian_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pedestrian(i), target);
  }

  // repeated .dg.model.RecNonMotorVehicle NonMotorVehicles = 6;
  for (unsigned int i = 0, n = this->nonmotorvehicles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nonmotorvehicles(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.WitnessResult)
  return target;
}

int WitnessResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dg.model.WitnessResult)
  int total_size = 0;

  // optional string InnerStatus = 1;
  if (this->innerstatus().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->innerstatus());
  }

  // optional string InnerMessage = 2;
  if (this->innermessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->innermessage());
  }

  // optional .dg.model.WitnessImage Image = 3;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // repeated .dg.model.RecVehicle Vehicles = 4;
  total_size += 1 * this->vehicles_size();
  for (int i = 0; i < this->vehicles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicles(i));
  }

  // repeated .dg.model.RecPedestrian Pedestrian = 5;
  total_size += 1 * this->pedestrian_size();
  for (int i = 0; i < this->pedestrian_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pedestrian(i));
  }

  // repeated .dg.model.RecNonMotorVehicle NonMotorVehicles = 6;
  total_size += 1 * this->nonmotorvehicles_size();
  for (int i = 0; i < this->nonmotorvehicles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nonmotorvehicles(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WitnessResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dg.model.WitnessResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WitnessResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WitnessResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dg.model.WitnessResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dg.model.WitnessResult)
    MergeFrom(*source);
  }
}

void WitnessResult::MergeFrom(const WitnessResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dg.model.WitnessResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vehicles_.MergeFrom(from.vehicles_);
  pedestrian_.MergeFrom(from.pedestrian_);
  nonmotorvehicles_.MergeFrom(from.nonmotorvehicles_);
  if (from.innerstatus().size() > 0) {

    innerstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.innerstatus_);
  }
  if (from.innermessage().size() > 0) {

    innermessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.innermessage_);
  }
  if (from.has_image()) {
    mutable_image()->::dg::model::WitnessImage::MergeFrom(from.image());
  }
}

void WitnessResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dg.model.WitnessResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessResult::CopyFrom(const WitnessResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dg.model.WitnessResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessResult::IsInitialized() const {

  return true;
}

void WitnessResult::Swap(WitnessResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WitnessResult::InternalSwap(WitnessResult* other) {
  innerstatus_.Swap(&other->innerstatus_);
  innermessage_.Swap(&other->innermessage_);
  std::swap(image_, other->image_);
  vehicles_.UnsafeArenaSwap(&other->vehicles_);
  pedestrian_.UnsafeArenaSwap(&other->pedestrian_);
  nonmotorvehicles_.UnsafeArenaSwap(&other->nonmotorvehicles_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WitnessResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WitnessResult_descriptor_;
  metadata.reflection = WitnessResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WitnessResult

// optional string InnerStatus = 1;
void WitnessResult::clear_innerstatus() {
  innerstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessResult::innerstatus() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.InnerStatus)
  return innerstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResult::set_innerstatus(const ::std::string& value) {
  
  innerstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResult.InnerStatus)
}
 void WitnessResult::set_innerstatus(const char* value) {
  
  innerstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResult.InnerStatus)
}
 void WitnessResult::set_innerstatus(const char* value, size_t size) {
  
  innerstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResult.InnerStatus)
}
 ::std::string* WitnessResult::mutable_innerstatus() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.InnerStatus)
  return innerstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessResult::release_innerstatus() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResult.InnerStatus)
  
  return innerstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResult::set_allocated_innerstatus(::std::string* innerstatus) {
  if (innerstatus != NULL) {
    
  } else {
    
  }
  innerstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), innerstatus);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResult.InnerStatus)
}

// optional string InnerMessage = 2;
void WitnessResult::clear_innermessage() {
  innermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WitnessResult::innermessage() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.InnerMessage)
  return innermessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResult::set_innermessage(const ::std::string& value) {
  
  innermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.WitnessResult.InnerMessage)
}
 void WitnessResult::set_innermessage(const char* value) {
  
  innermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.WitnessResult.InnerMessage)
}
 void WitnessResult::set_innermessage(const char* value, size_t size) {
  
  innermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.WitnessResult.InnerMessage)
}
 ::std::string* WitnessResult::mutable_innermessage() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.InnerMessage)
  return innermessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WitnessResult::release_innermessage() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResult.InnerMessage)
  
  return innermessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WitnessResult::set_allocated_innermessage(::std::string* innermessage) {
  if (innermessage != NULL) {
    
  } else {
    
  }
  innermessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), innermessage);
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResult.InnerMessage)
}

// optional .dg.model.WitnessImage Image = 3;
bool WitnessResult::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void WitnessResult::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::dg::model::WitnessImage& WitnessResult::image() const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.Image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::dg::model::WitnessImage* WitnessResult::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::dg::model::WitnessImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.Image)
  return image_;
}
::dg::model::WitnessImage* WitnessResult::release_image() {
  // @@protoc_insertion_point(field_release:dg.model.WitnessResult.Image)
  
  ::dg::model::WitnessImage* temp = image_;
  image_ = NULL;
  return temp;
}
void WitnessResult::set_allocated_image(::dg::model::WitnessImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.WitnessResult.Image)
}

// repeated .dg.model.RecVehicle Vehicles = 4;
int WitnessResult::vehicles_size() const {
  return vehicles_.size();
}
void WitnessResult::clear_vehicles() {
  vehicles_.Clear();
}
const ::dg::model::RecVehicle& WitnessResult::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.Vehicles)
  return vehicles_.Get(index);
}
::dg::model::RecVehicle* WitnessResult::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.Vehicles)
  return vehicles_.Mutable(index);
}
::dg::model::RecVehicle* WitnessResult::add_vehicles() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessResult.Vehicles)
  return vehicles_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >*
WitnessResult::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessResult.Vehicles)
  return &vehicles_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::RecVehicle >&
WitnessResult::vehicles() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessResult.Vehicles)
  return vehicles_;
}

// repeated .dg.model.RecPedestrian Pedestrian = 5;
int WitnessResult::pedestrian_size() const {
  return pedestrian_.size();
}
void WitnessResult::clear_pedestrian() {
  pedestrian_.Clear();
}
const ::dg::model::RecPedestrian& WitnessResult::pedestrian(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.Pedestrian)
  return pedestrian_.Get(index);
}
::dg::model::RecPedestrian* WitnessResult::mutable_pedestrian(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.Pedestrian)
  return pedestrian_.Mutable(index);
}
::dg::model::RecPedestrian* WitnessResult::add_pedestrian() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessResult.Pedestrian)
  return pedestrian_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >*
WitnessResult::mutable_pedestrian() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessResult.Pedestrian)
  return &pedestrian_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::RecPedestrian >&
WitnessResult::pedestrian() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessResult.Pedestrian)
  return pedestrian_;
}

// repeated .dg.model.RecNonMotorVehicle NonMotorVehicles = 6;
int WitnessResult::nonmotorvehicles_size() const {
  return nonmotorvehicles_.size();
}
void WitnessResult::clear_nonmotorvehicles() {
  nonmotorvehicles_.Clear();
}
const ::dg::model::RecNonMotorVehicle& WitnessResult::nonmotorvehicles(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.WitnessResult.NonMotorVehicles)
  return nonmotorvehicles_.Get(index);
}
::dg::model::RecNonMotorVehicle* WitnessResult::mutable_nonmotorvehicles(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.WitnessResult.NonMotorVehicles)
  return nonmotorvehicles_.Mutable(index);
}
::dg::model::RecNonMotorVehicle* WitnessResult::add_nonmotorvehicles() {
  // @@protoc_insertion_point(field_add:dg.model.WitnessResult.NonMotorVehicles)
  return nonmotorvehicles_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle >*
WitnessResult::mutable_nonmotorvehicles() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.WitnessResult.NonMotorVehicles)
  return &nonmotorvehicles_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::RecNonMotorVehicle >&
WitnessResult::nonmotorvehicles() const {
  // @@protoc_insertion_point(field_list:dg.model.WitnessResult.NonMotorVehicles)
  return nonmotorvehicles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace dg

// @@protoc_insertion_point(global_scope)
