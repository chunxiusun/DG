// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepdatasingle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "deepdatasingle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace model {

namespace {

const ::google::protobuf::Descriptor* VehicleModelType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleModelType_reflection_ = NULL;
const ::google::protobuf::Descriptor* LicensePlate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LicensePlate_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleSymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleSymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vehicle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vehicle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vehicles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vehicles_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tricycle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tricycle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tricycles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tricycles_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bicycle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bicycle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bicycles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bicycles_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pedestrian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pedestrian_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pedestrians_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pedestrians_reflection_ = NULL;
const ::google::protobuf::Descriptor* Face_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Face_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faces_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faces_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* CutboardImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CutboardImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cutboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cutboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* NullMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NullMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataFmtType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_deepdatasingle_2eproto() {
  protobuf_AddDesc_deepdatasingle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "deepdatasingle.proto");
  GOOGLE_CHECK(file != NULL);
  VehicleModelType_descriptor_ = file->message_type(0);
  static const int VehicleModelType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, brandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, subbrandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, modelyearid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, model_),
  };
  VehicleModelType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleModelType_descriptor_,
      VehicleModelType::default_instance_,
      VehicleModelType_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleModelType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleModelType, _is_default_instance_));
  LicensePlate_descriptor_ = file->message_type(1);
  static const int LicensePlate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, platetext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, cutboard_),
  };
  LicensePlate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LicensePlate_descriptor_,
      LicensePlate::default_instance_,
      LicensePlate_offsets_,
      -1,
      -1,
      -1,
      sizeof(LicensePlate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicensePlate, _is_default_instance_));
  VehicleSymbol_descriptor_ = file->message_type(2);
  static const int VehicleSymbol_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, cutboard_),
  };
  VehicleSymbol_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleSymbol_descriptor_,
      VehicleSymbol::default_instance_,
      VehicleSymbol_offsets_,
      -1,
      -1,
      -1,
      sizeof(VehicleSymbol),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSymbol, _is_default_instance_));
  Vehicle_descriptor_ = file->message_type(3);
  static const int Vehicle_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, modeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, ishead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, isday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, plate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, symbols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, feature_),
  };
  Vehicle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vehicle_descriptor_,
      Vehicle::default_instance_,
      Vehicle_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vehicle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, _is_default_instance_));
  Vehicles_descriptor_ = file->message_type(4);
  static const int Vehicles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicles, vehicle_),
  };
  Vehicles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vehicles_descriptor_,
      Vehicles::default_instance_,
      Vehicles_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vehicles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicles, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicles, _is_default_instance_));
  Tricycle_descriptor_ = file->message_type(5);
  static const int Tricycle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tricycle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tricycle, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tricycle, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tricycle, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tricycle, color_),
  };
  Tricycle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Tricycle_descriptor_,
      Tricycle::default_instance_,
      Tricycle_offsets_,
      -1,
      -1,
      -1,
      sizeof(Tricycle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tricycle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tricycle, _is_default_instance_));
  Tricycles_descriptor_ = file->message_type(6);
  static const int Tricycles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tricycles, tricycle_),
  };
  Tricycles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Tricycles_descriptor_,
      Tricycles::default_instance_,
      Tricycles_offsets_,
      -1,
      -1,
      -1,
      sizeof(Tricycles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tricycles, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tricycles, _is_default_instance_));
  Bicycle_descriptor_ = file->message_type(7);
  static const int Bicycle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bicycle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bicycle, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bicycle, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bicycle, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bicycle, color_),
  };
  Bicycle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Bicycle_descriptor_,
      Bicycle::default_instance_,
      Bicycle_offsets_,
      -1,
      -1,
      -1,
      sizeof(Bicycle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bicycle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bicycle, _is_default_instance_));
  Bicycles_descriptor_ = file->message_type(8);
  static const int Bicycles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bicycles, tricycle_),
  };
  Bicycles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Bicycles_descriptor_,
      Bicycles::default_instance_,
      Bicycles_offsets_,
      -1,
      -1,
      -1,
      sizeof(Bicycles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bicycles, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bicycles, _is_default_instance_));
  Pedestrian_descriptor_ = file->message_type(9);
  static const int Pedestrian_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, heads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, uppercolors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, lowercolors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, upperstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, lowerstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, ethnic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, feature_),
  };
  Pedestrian_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pedestrian_descriptor_,
      Pedestrian::default_instance_,
      Pedestrian_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pedestrian),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, _is_default_instance_));
  Pedestrians_descriptor_ = file->message_type(10);
  static const int Pedestrians_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrians, pedestrian_),
  };
  Pedestrians_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pedestrians_descriptor_,
      Pedestrians::default_instance_,
      Pedestrians_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pedestrians),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrians, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrians, _is_default_instance_));
  Face_descriptor_ = file->message_type(11);
  static const int Face_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, feature_),
  };
  Face_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Face_descriptor_,
      Face::default_instance_,
      Face_offsets_,
      -1,
      -1,
      -1,
      sizeof(Face),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _is_default_instance_));
  Faces_descriptor_ = file->message_type(12);
  static const int Faces_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faces, face_),
  };
  Faces_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Faces_descriptor_,
      Faces::default_instance_,
      Faces_offsets_,
      -1,
      -1,
      -1,
      sizeof(Faces),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faces, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faces, _is_default_instance_));
  VideoMetadata_descriptor_ = file->message_type(13);
  static const int VideoMetadata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMetadata, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMetadata, sensorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMetadata, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMetadata, sensorurl_),
  };
  VideoMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VideoMetadata_descriptor_,
      VideoMetadata::default_instance_,
      VideoMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(VideoMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMetadata, _is_default_instance_));
  Image_descriptor_ = file->message_type(14);
  static const int Image_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, bindata_),
  };
  Image_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      -1,
      -1,
      -1,
      sizeof(Image),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _is_default_instance_));
  CutboardImage_descriptor_ = file->message_type(15);
  static const int CutboardImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, cutboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, img_),
  };
  CutboardImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CutboardImage_descriptor_,
      CutboardImage::default_instance_,
      CutboardImage_offsets_,
      -1,
      -1,
      -1,
      sizeof(CutboardImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, _is_default_instance_));
  Color_descriptor_ = file->message_type(16);
  static const int Color_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, colorname_),
  };
  Color_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      -1,
      -1,
      -1,
      sizeof(Color),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _is_default_instance_));
  Cutboard_descriptor_ = file->message_type(17);
  static const int Cutboard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, reswidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, resheight_),
  };
  Cutboard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cutboard_descriptor_,
      Cutboard::default_instance_,
      Cutboard_offsets_,
      -1,
      -1,
      -1,
      sizeof(Cutboard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, _is_default_instance_));
  BaseEntity_descriptor_ = file->message_type(18);
  static const int BaseEntity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEntity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEntity, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEntity, img_),
  };
  BaseEntity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaseEntity_descriptor_,
      BaseEntity::default_instance_,
      BaseEntity_offsets_,
      -1,
      -1,
      -1,
      sizeof(BaseEntity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEntity, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEntity, _is_default_instance_));
  FeatureVector_descriptor_ = file->message_type(19);
  static const int FeatureVector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, feature_),
  };
  FeatureVector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureVector_descriptor_,
      FeatureVector::default_instance_,
      FeatureVector_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeatureVector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, _is_default_instance_));
  NullMessage_descriptor_ = file->message_type(20);
  static const int NullMessage_offsets_[1] = {
  };
  NullMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NullMessage_descriptor_,
      NullMessage::default_instance_,
      NullMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(NullMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullMessage, _is_default_instance_));
  ObjType_descriptor_ = file->enum_type(0);
  DataFmtType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_deepdatasingle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleModelType_descriptor_, &VehicleModelType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LicensePlate_descriptor_, &LicensePlate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleSymbol_descriptor_, &VehicleSymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vehicle_descriptor_, &Vehicle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vehicles_descriptor_, &Vehicles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Tricycle_descriptor_, &Tricycle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Tricycles_descriptor_, &Tricycles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Bicycle_descriptor_, &Bicycle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Bicycles_descriptor_, &Bicycles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pedestrian_descriptor_, &Pedestrian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pedestrians_descriptor_, &Pedestrians::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Face_descriptor_, &Face::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Faces_descriptor_, &Faces::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VideoMetadata_descriptor_, &VideoMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CutboardImage_descriptor_, &CutboardImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Color_descriptor_, &Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cutboard_descriptor_, &Cutboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaseEntity_descriptor_, &BaseEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureVector_descriptor_, &FeatureVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NullMessage_descriptor_, &NullMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_deepdatasingle_2eproto() {
  delete VehicleModelType::default_instance_;
  delete VehicleModelType_reflection_;
  delete LicensePlate::default_instance_;
  delete LicensePlate_reflection_;
  delete VehicleSymbol::default_instance_;
  delete VehicleSymbol_reflection_;
  delete Vehicle::default_instance_;
  delete Vehicle_reflection_;
  delete Vehicles::default_instance_;
  delete Vehicles_reflection_;
  delete Tricycle::default_instance_;
  delete Tricycle_reflection_;
  delete Tricycles::default_instance_;
  delete Tricycles_reflection_;
  delete Bicycle::default_instance_;
  delete Bicycle_reflection_;
  delete Bicycles::default_instance_;
  delete Bicycles_reflection_;
  delete Pedestrian::default_instance_;
  delete Pedestrian_reflection_;
  delete Pedestrians::default_instance_;
  delete Pedestrians_reflection_;
  delete Face::default_instance_;
  delete Face_reflection_;
  delete Faces::default_instance_;
  delete Faces_reflection_;
  delete VideoMetadata::default_instance_;
  delete VideoMetadata_reflection_;
  delete Image::default_instance_;
  delete Image_reflection_;
  delete CutboardImage::default_instance_;
  delete CutboardImage_reflection_;
  delete Color::default_instance_;
  delete Color_reflection_;
  delete Cutboard::default_instance_;
  delete Cutboard_reflection_;
  delete BaseEntity::default_instance_;
  delete BaseEntity_reflection_;
  delete FeatureVector::default_instance_;
  delete FeatureVector_reflection_;
  delete NullMessage::default_instance_;
  delete NullMessage_reflection_;
}

void protobuf_AddDesc_deepdatasingle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024deepdatasingle.proto\022\005model\"\211\001\n\020Vehicl"
    "eModelType\022\n\n\002Id\030\001 \001(\003\022\017\n\007BrandId\030\002 \001(\005\022"
    "\022\n\nSubBrandId\030\003 \001(\005\022\023\n\013ModelYearId\030\004 \001(\005"
    "\022\022\n\nConfidence\030\005 \001(\002\022\014\n\004Type\030\006 \001(\005\022\r\n\005Mo"
    "del\030\007 \001(\t\"\203\001\n\014LicensePlate\022\021\n\tPlateText\030"
    "\001 \001(\t\022\033\n\005Color\030\002 \001(\0132\014.model.Color\022\014\n\004Ty"
    "pe\030\003 \001(\005\022\022\n\nConfidence\030\004 \001(\002\022!\n\010Cutboard"
    "\030\005 \001(\0132\017.model.Cutboard\"n\n\rVehicleSymbol"
    "\022\n\n\002Id\030\001 \001(\005\022\014\n\004Type\030\002 \001(\005\022\022\n\nConfidence"
    "\030\003 \001(\002\022\014\n\004Name\030\004 \001(\t\022!\n\010Cutboard\030\005 \001(\0132\017"
    ".model.Cutboard\"\262\002\n\007Vehicle\022\n\n\002Id\030\001 \001(\003\022"
    "&\n\010Metadata\030\002 \001(\0132\024.model.VideoMetadata\022"
    "*\n\tModelType\030\003 \001(\0132\027.model.VehicleModelT"
    "ype\022\033\n\005Color\030\004 \001(\0132\014.model.Color\022\016\n\006IsHe"
    "ad\030\005 \001(\010\022\r\n\005IsDay\030\006 \001(\010\022\"\n\005Plate\030\007 \001(\0132\023"
    ".model.LicensePlate\022\014\n\004Side\030\010 \001(\005\022!\n\003Img"
    "\030\t \001(\0132\024.model.CutboardImage\022%\n\007Symbols\030"
    "\n \003(\0132\024.model.VehicleSymbol\022\017\n\007Feature\030\013"
    " \001(\014\"+\n\010Vehicles\022\037\n\007Vehicle\030\001 \003(\0132\016.mode"
    "l.Vehicle\"\217\001\n\010Tricycle\022\n\n\002Id\030\001 \001(\003\022&\n\010Me"
    "tadata\030\002 \001(\0132\024.model.VideoMetadata\022!\n\003Im"
    "g\030\003 \001(\0132\024.model.CutboardImage\022\017\n\007Feature"
    "\030\004 \001(\014\022\033\n\005Color\030\005 \001(\0132\014.model.Color\".\n\tT"
    "ricycles\022!\n\010Tricycle\030\001 \003(\0132\017.model.Tricy"
    "cle\"\216\001\n\007Bicycle\022\n\n\002Id\030\001 \001(\003\022&\n\010Metadata\030"
    "\002 \001(\0132\024.model.VideoMetadata\022!\n\003Img\030\003 \001(\013"
    "2\024.model.CutboardImage\022\017\n\007Feature\030\004 \001(\014\022"
    "\033\n\005Color\030\005 \001(\0132\014.model.Color\",\n\010Bicycles"
    "\022 \n\010Tricycle\030\001 \003(\0132\016.model.Bicycle\"\224\002\n\nP"
    "edestrian\022\n\n\002Id\030\001 \001(\003\022&\n\010Metadata\030\002 \001(\0132"
    "\024.model.VideoMetadata\022!\n\003Img\030\003 \001(\0132\024.mod"
    "el.CutboardImage\022\020\n\010Features\030\004 \001(\r\022\r\n\005He"
    "ads\030\005 \001(\r\022\023\n\013UpperColors\030\006 \001(\r\022\023\n\013LowerC"
    "olors\030\007 \001(\r\022\013\n\003Age\030\010 \001(\r\022\022\n\nUpperStyle\030\t"
    " \001(\r\022\022\n\nLowerStyle\030\n \001(\r\022\016\n\006Gender\030\013 \001(\010"
    "\022\016\n\006Ethnic\030\014 \001(\010\022\017\n\007Feature\030\r \001(\014\"4\n\013Ped"
    "estrians\022%\n\nPedestrian\030\001 \003(\0132\021.model.Ped"
    "estrian\"n\n\004Face\022\n\n\002Id\030\001 \001(\003\022&\n\010Metadata\030"
    "\002 \001(\0132\024.model.VideoMetadata\022!\n\003Img\030\003 \001(\013"
    "2\024.model.CutboardImage\022\017\n\007Feature\030\004 \001(\014\""
    "\"\n\005Faces\022\031\n\004Face\030\001 \003(\0132\013.model.Face\"m\n\rV"
    "ideoMetadata\022\021\n\tTimestamp\030\001 \001(\003\022\020\n\010Durat"
    "ion\030\002 \001(\005\022\020\n\010SensorId\030\003 \001(\005\022\022\n\nSensorNam"
    "e\030\004 \001(\t\022\021\n\tSensorUrl\030\005 \001(\t\"C\n\005Image\022\n\n\002I"
    "d\030\001 \001(\t\022\r\n\005Width\030\002 \001(\005\022\016\n\006Height\030\003 \001(\005\022\017"
    "\n\007BinData\030\004 \001(\014\"u\n\rCutboardImage\022&\n\010Meta"
    "data\030\001 \001(\0132\024.model.VideoMetadata\022!\n\010Cutb"
    "oard\030\002 \001(\0132\017.model.Cutboard\022\031\n\003Img\030\003 \001(\013"
    "2\014.model.Image\":\n\005Color\022\n\n\002Id\030\001 \001(\005\022\022\n\nC"
    "onfidence\030\002 \001(\002\022\021\n\tColorName\030\003 \001(\t\"d\n\010Cu"
    "tboard\022\t\n\001X\030\001 \001(\r\022\t\n\001Y\030\002 \001(\r\022\r\n\005Width\030\003 "
    "\001(\r\022\016\n\006Height\030\004 \001(\r\022\020\n\010ResWidth\030\005 \001(\r\022\021\n"
    "\tResHeight\030\006 \001(\r\"c\n\nBaseEntity\022\n\n\002Id\030\001 \001"
    "(\003\022&\n\010Metadata\030\002 \001(\0132\024.model.VideoMetada"
    "ta\022!\n\003Img\030\003 \001(\0132\024.model.CutboardImage\",\n"
    "\rFeatureVector\022\n\n\002Id\030\001 \001(\003\022\017\n\007Feature\030\002 "
    "\001(\014\"\r\n\013NullMessage*\315\002\n\007ObjType\022\016\n\nUNKNOW"
    "NOBJ\020\000\022\013\n\007VEHICLE\020\001\022\013\n\007BICYCLE\020\002\022\014\n\010TRIC"
    "YCLE\020\003\022\016\n\nPEDESTRIAN\020\004\022\t\n\004FACE\020\200\010\022\021\n\014LIC"
    "ENSEPLATE\020\201\010\022\023\n\016VEHICLE_VECTOR\020\200\020\022\023\n\016BIC"
    "YCLE_VECTOR\020\201\020\022\024\n\017TRICYCLE_VECTOR\020\202\020\022\026\n\021"
    "PEDESTRIAN_VECTOR\020\203\020\022\020\n\013FACE_VECTOR\020\200\030\022\025"
    "\n\020VEHICLE_CUTBOARD\020\200 \022\025\n\020BICYCLE_CUTBOAR"
    "D\020\201 \022\026\n\021TRICYCLE_CUTBOARD\020\202 \022\030\n\023PEDESTRI"
    "AN_CUTBOARD\020\203 \022\022\n\rFACE_CUTBOARD\020\200(*G\n\013Da"
    "taFmtType\022\016\n\nUNKNOWNFMT\020\000\022\010\n\004JSON\020\001\022\014\n\010P"
    "ROTOBUF\020\002\022\007\n\003CSV\020\003\022\007\n\003PDF\020\004b\006proto3", 2675);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "deepdatasingle.proto", &protobuf_RegisterTypes);
  VehicleModelType::default_instance_ = new VehicleModelType();
  LicensePlate::default_instance_ = new LicensePlate();
  VehicleSymbol::default_instance_ = new VehicleSymbol();
  Vehicle::default_instance_ = new Vehicle();
  Vehicles::default_instance_ = new Vehicles();
  Tricycle::default_instance_ = new Tricycle();
  Tricycles::default_instance_ = new Tricycles();
  Bicycle::default_instance_ = new Bicycle();
  Bicycles::default_instance_ = new Bicycles();
  Pedestrian::default_instance_ = new Pedestrian();
  Pedestrians::default_instance_ = new Pedestrians();
  Face::default_instance_ = new Face();
  Faces::default_instance_ = new Faces();
  VideoMetadata::default_instance_ = new VideoMetadata();
  Image::default_instance_ = new Image();
  CutboardImage::default_instance_ = new CutboardImage();
  Color::default_instance_ = new Color();
  Cutboard::default_instance_ = new Cutboard();
  BaseEntity::default_instance_ = new BaseEntity();
  FeatureVector::default_instance_ = new FeatureVector();
  NullMessage::default_instance_ = new NullMessage();
  VehicleModelType::default_instance_->InitAsDefaultInstance();
  LicensePlate::default_instance_->InitAsDefaultInstance();
  VehicleSymbol::default_instance_->InitAsDefaultInstance();
  Vehicle::default_instance_->InitAsDefaultInstance();
  Vehicles::default_instance_->InitAsDefaultInstance();
  Tricycle::default_instance_->InitAsDefaultInstance();
  Tricycles::default_instance_->InitAsDefaultInstance();
  Bicycle::default_instance_->InitAsDefaultInstance();
  Bicycles::default_instance_->InitAsDefaultInstance();
  Pedestrian::default_instance_->InitAsDefaultInstance();
  Pedestrians::default_instance_->InitAsDefaultInstance();
  Face::default_instance_->InitAsDefaultInstance();
  Faces::default_instance_->InitAsDefaultInstance();
  VideoMetadata::default_instance_->InitAsDefaultInstance();
  Image::default_instance_->InitAsDefaultInstance();
  CutboardImage::default_instance_->InitAsDefaultInstance();
  Color::default_instance_->InitAsDefaultInstance();
  Cutboard::default_instance_->InitAsDefaultInstance();
  BaseEntity::default_instance_->InitAsDefaultInstance();
  FeatureVector::default_instance_->InitAsDefaultInstance();
  NullMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_deepdatasingle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_deepdatasingle_2eproto {
  StaticDescriptorInitializer_deepdatasingle_2eproto() {
    protobuf_AddDesc_deepdatasingle_2eproto();
  }
} static_descriptor_initializer_deepdatasingle_2eproto_;
const ::google::protobuf::EnumDescriptor* ObjType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjType_descriptor_;
}
bool ObjType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 1024:
    case 1025:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 3072:
    case 4096:
    case 4097:
    case 4098:
    case 4099:
    case 5120:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataFmtType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFmtType_descriptor_;
}
bool DataFmtType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleModelType::kIdFieldNumber;
const int VehicleModelType::kBrandIdFieldNumber;
const int VehicleModelType::kSubBrandIdFieldNumber;
const int VehicleModelType::kModelYearIdFieldNumber;
const int VehicleModelType::kConfidenceFieldNumber;
const int VehicleModelType::kTypeFieldNumber;
const int VehicleModelType::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleModelType::VehicleModelType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.VehicleModelType)
}

void VehicleModelType::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VehicleModelType::VehicleModelType(const VehicleModelType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.VehicleModelType)
}

void VehicleModelType::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  brandid_ = 0;
  subbrandid_ = 0;
  modelyearid_ = 0;
  confidence_ = 0;
  type_ = 0;
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VehicleModelType::~VehicleModelType() {
  // @@protoc_insertion_point(destructor:model.VehicleModelType)
  SharedDtor();
}

void VehicleModelType::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VehicleModelType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleModelType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleModelType_descriptor_;
}

const VehicleModelType& VehicleModelType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

VehicleModelType* VehicleModelType::default_instance_ = NULL;

VehicleModelType* VehicleModelType::New(::google::protobuf::Arena* arena) const {
  VehicleModelType* n = new VehicleModelType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleModelType::Clear() {
// @@protoc_insertion_point(message_clear_start:model.VehicleModelType)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleModelType, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleModelType*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, confidence_);
  type_ = 0;
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool VehicleModelType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.VehicleModelType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BrandId;
        break;
      }

      // optional int32 BrandId = 2;
      case 2: {
        if (tag == 16) {
         parse_BrandId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brandid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SubBrandId;
        break;
      }

      // optional int32 SubBrandId = 3;
      case 3: {
        if (tag == 24) {
         parse_SubBrandId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subbrandid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ModelYearId;
        break;
      }

      // optional int32 ModelYearId = 4;
      case 4: {
        if (tag == 32) {
         parse_ModelYearId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelyearid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 5;
      case 5: {
        if (tag == 45) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Type;
        break;
      }

      // optional int32 Type = 6;
      case 6: {
        if (tag == 48) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Model;
        break;
      }

      // optional string Model = 7;
      case 7: {
        if (tag == 58) {
         parse_Model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "model.VehicleModelType.Model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.VehicleModelType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.VehicleModelType)
  return false;
#undef DO_
}

void VehicleModelType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.VehicleModelType)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 BrandId = 2;
  if (this->brandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->brandid(), output);
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subbrandid(), output);
  }

  // optional int32 ModelYearId = 4;
  if (this->modelyearid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->modelyearid(), output);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->confidence(), output);
  }

  // optional int32 Type = 6;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // optional string Model = 7;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.VehicleModelType.Model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->model(), output);
  }

  // @@protoc_insertion_point(serialize_end:model.VehicleModelType)
}

::google::protobuf::uint8* VehicleModelType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.VehicleModelType)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 BrandId = 2;
  if (this->brandid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->brandid(), target);
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subbrandid(), target);
  }

  // optional int32 ModelYearId = 4;
  if (this->modelyearid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->modelyearid(), target);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->confidence(), target);
  }

  // optional int32 Type = 6;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  // optional string Model = 7;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.VehicleModelType.Model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->model(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.VehicleModelType)
  return target;
}

int VehicleModelType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.VehicleModelType)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int32 BrandId = 2;
  if (this->brandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brandid());
  }

  // optional int32 SubBrandId = 3;
  if (this->subbrandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subbrandid());
  }

  // optional int32 ModelYearId = 4;
  if (this->modelyearid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modelyearid());
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 Type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string Model = 7;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleModelType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.VehicleModelType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehicleModelType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleModelType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.VehicleModelType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.VehicleModelType)
    MergeFrom(*source);
  }
}

void VehicleModelType::MergeFrom(const VehicleModelType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.VehicleModelType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.brandid() != 0) {
    set_brandid(from.brandid());
  }
  if (from.subbrandid() != 0) {
    set_subbrandid(from.subbrandid());
  }
  if (from.modelyearid() != 0) {
    set_modelyearid(from.modelyearid());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
}

void VehicleModelType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.VehicleModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleModelType::CopyFrom(const VehicleModelType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.VehicleModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleModelType::IsInitialized() const {

  return true;
}

void VehicleModelType::Swap(VehicleModelType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleModelType::InternalSwap(VehicleModelType* other) {
  std::swap(id_, other->id_);
  std::swap(brandid_, other->brandid_);
  std::swap(subbrandid_, other->subbrandid_);
  std::swap(modelyearid_, other->modelyearid_);
  std::swap(confidence_, other->confidence_);
  std::swap(type_, other->type_);
  model_.Swap(&other->model_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleModelType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleModelType_descriptor_;
  metadata.reflection = VehicleModelType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleModelType

// optional int64 Id = 1;
void VehicleModelType::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 VehicleModelType::id() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.Id)
  return id_;
}
 void VehicleModelType::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.Id)
}

// optional int32 BrandId = 2;
void VehicleModelType::clear_brandid() {
  brandid_ = 0;
}
 ::google::protobuf::int32 VehicleModelType::brandid() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.BrandId)
  return brandid_;
}
 void VehicleModelType::set_brandid(::google::protobuf::int32 value) {
  
  brandid_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.BrandId)
}

// optional int32 SubBrandId = 3;
void VehicleModelType::clear_subbrandid() {
  subbrandid_ = 0;
}
 ::google::protobuf::int32 VehicleModelType::subbrandid() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.SubBrandId)
  return subbrandid_;
}
 void VehicleModelType::set_subbrandid(::google::protobuf::int32 value) {
  
  subbrandid_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.SubBrandId)
}

// optional int32 ModelYearId = 4;
void VehicleModelType::clear_modelyearid() {
  modelyearid_ = 0;
}
 ::google::protobuf::int32 VehicleModelType::modelyearid() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.ModelYearId)
  return modelyearid_;
}
 void VehicleModelType::set_modelyearid(::google::protobuf::int32 value) {
  
  modelyearid_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.ModelYearId)
}

// optional float Confidence = 5;
void VehicleModelType::clear_confidence() {
  confidence_ = 0;
}
 float VehicleModelType::confidence() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.Confidence)
  return confidence_;
}
 void VehicleModelType::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.Confidence)
}

// optional int32 Type = 6;
void VehicleModelType::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 VehicleModelType::type() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.Type)
  return type_;
}
 void VehicleModelType::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.Type)
}

// optional string Model = 7;
void VehicleModelType::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleModelType::model() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.Model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.VehicleModelType.Model)
}
 void VehicleModelType::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.VehicleModelType.Model)
}
 void VehicleModelType::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.VehicleModelType.Model)
}
 ::std::string* VehicleModelType::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:model.VehicleModelType.Model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleModelType::release_model() {
  // @@protoc_insertion_point(field_release:model.VehicleModelType.Model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleModelType::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:model.VehicleModelType.Model)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicensePlate::kPlateTextFieldNumber;
const int LicensePlate::kColorFieldNumber;
const int LicensePlate::kTypeFieldNumber;
const int LicensePlate::kConfidenceFieldNumber;
const int LicensePlate::kCutboardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicensePlate::LicensePlate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.LicensePlate)
}

void LicensePlate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  color_ = const_cast< ::model::Color*>(&::model::Color::default_instance());
  cutboard_ = const_cast< ::model::Cutboard*>(&::model::Cutboard::default_instance());
}

LicensePlate::LicensePlate(const LicensePlate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.LicensePlate)
}

void LicensePlate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platetext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = NULL;
  type_ = 0;
  confidence_ = 0;
  cutboard_ = NULL;
}

LicensePlate::~LicensePlate() {
  // @@protoc_insertion_point(destructor:model.LicensePlate)
  SharedDtor();
}

void LicensePlate::SharedDtor() {
  platetext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete color_;
    delete cutboard_;
  }
}

void LicensePlate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LicensePlate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LicensePlate_descriptor_;
}

const LicensePlate& LicensePlate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

LicensePlate* LicensePlate::default_instance_ = NULL;

LicensePlate* LicensePlate::New(::google::protobuf::Arena* arena) const {
  LicensePlate* n = new LicensePlate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LicensePlate::Clear() {
// @@protoc_insertion_point(message_clear_start:model.LicensePlate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LicensePlate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LicensePlate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, confidence_);
  platetext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool LicensePlate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.LicensePlate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PlateText = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platetext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->platetext().data(), this->platetext().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "model.LicensePlate.PlateText"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Color;
        break;
      }

      // optional .model.Color Color = 2;
      case 2: {
        if (tag == 18) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional int32 Type = 3;
      case 3: {
        if (tag == 24) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 4;
      case 4: {
        if (tag == 37) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Cutboard;
        break;
      }

      // optional .model.Cutboard Cutboard = 5;
      case 5: {
        if (tag == 42) {
         parse_Cutboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.LicensePlate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.LicensePlate)
  return false;
#undef DO_
}

void LicensePlate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.LicensePlate)
  // optional string PlateText = 1;
  if (this->platetext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platetext().data(), this->platetext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.LicensePlate.PlateText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->platetext(), output);
  }

  // optional .model.Color Color = 2;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->color_, output);
  }

  // optional int32 Type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }

  // optional .model.Cutboard Cutboard = 5;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cutboard_, output);
  }

  // @@protoc_insertion_point(serialize_end:model.LicensePlate)
}

::google::protobuf::uint8* LicensePlate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.LicensePlate)
  // optional string PlateText = 1;
  if (this->platetext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platetext().data(), this->platetext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.LicensePlate.PlateText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platetext(), target);
  }

  // optional .model.Color Color = 2;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->color_, target);
  }

  // optional int32 Type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }

  // optional .model.Cutboard Cutboard = 5;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->cutboard_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.LicensePlate)
  return target;
}

int LicensePlate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.LicensePlate)
  int total_size = 0;

  // optional string PlateText = 1;
  if (this->platetext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platetext());
  }

  // optional .model.Color Color = 2;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // optional int32 Type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional .model.Cutboard Cutboard = 5;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LicensePlate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.LicensePlate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LicensePlate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LicensePlate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.LicensePlate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.LicensePlate)
    MergeFrom(*source);
  }
}

void LicensePlate::MergeFrom(const LicensePlate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.LicensePlate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.platetext().size() > 0) {

    platetext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platetext_);
  }
  if (from.has_color()) {
    mutable_color()->::model::Color::MergeFrom(from.color());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.has_cutboard()) {
    mutable_cutboard()->::model::Cutboard::MergeFrom(from.cutboard());
  }
}

void LicensePlate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.LicensePlate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicensePlate::CopyFrom(const LicensePlate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.LicensePlate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicensePlate::IsInitialized() const {

  return true;
}

void LicensePlate::Swap(LicensePlate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicensePlate::InternalSwap(LicensePlate* other) {
  platetext_.Swap(&other->platetext_);
  std::swap(color_, other->color_);
  std::swap(type_, other->type_);
  std::swap(confidence_, other->confidence_);
  std::swap(cutboard_, other->cutboard_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LicensePlate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LicensePlate_descriptor_;
  metadata.reflection = LicensePlate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LicensePlate

// optional string PlateText = 1;
void LicensePlate::clear_platetext() {
  platetext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LicensePlate::platetext() const {
  // @@protoc_insertion_point(field_get:model.LicensePlate.PlateText)
  return platetext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_platetext(const ::std::string& value) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.LicensePlate.PlateText)
}
 void LicensePlate::set_platetext(const char* value) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.LicensePlate.PlateText)
}
 void LicensePlate::set_platetext(const char* value, size_t size) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.LicensePlate.PlateText)
}
 ::std::string* LicensePlate::mutable_platetext() {
  
  // @@protoc_insertion_point(field_mutable:model.LicensePlate.PlateText)
  return platetext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LicensePlate::release_platetext() {
  // @@protoc_insertion_point(field_release:model.LicensePlate.PlateText)
  
  return platetext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LicensePlate::set_allocated_platetext(::std::string* platetext) {
  if (platetext != NULL) {
    
  } else {
    
  }
  platetext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platetext);
  // @@protoc_insertion_point(field_set_allocated:model.LicensePlate.PlateText)
}

// optional .model.Color Color = 2;
bool LicensePlate::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void LicensePlate::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::model::Color& LicensePlate::color() const {
  // @@protoc_insertion_point(field_get:model.LicensePlate.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::model::Color* LicensePlate::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:model.LicensePlate.Color)
  return color_;
}
::model::Color* LicensePlate::release_color() {
  // @@protoc_insertion_point(field_release:model.LicensePlate.Color)
  
  ::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void LicensePlate::set_allocated_color(::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.LicensePlate.Color)
}

// optional int32 Type = 3;
void LicensePlate::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 LicensePlate::type() const {
  // @@protoc_insertion_point(field_get:model.LicensePlate.Type)
  return type_;
}
 void LicensePlate::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:model.LicensePlate.Type)
}

// optional float Confidence = 4;
void LicensePlate::clear_confidence() {
  confidence_ = 0;
}
 float LicensePlate::confidence() const {
  // @@protoc_insertion_point(field_get:model.LicensePlate.Confidence)
  return confidence_;
}
 void LicensePlate::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:model.LicensePlate.Confidence)
}

// optional .model.Cutboard Cutboard = 5;
bool LicensePlate::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void LicensePlate::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::model::Cutboard& LicensePlate::cutboard() const {
  // @@protoc_insertion_point(field_get:model.LicensePlate.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::model::Cutboard* LicensePlate::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:model.LicensePlate.Cutboard)
  return cutboard_;
}
::model::Cutboard* LicensePlate::release_cutboard() {
  // @@protoc_insertion_point(field_release:model.LicensePlate.Cutboard)
  
  ::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void LicensePlate::set_allocated_cutboard(::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.LicensePlate.Cutboard)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSymbol::kIdFieldNumber;
const int VehicleSymbol::kTypeFieldNumber;
const int VehicleSymbol::kConfidenceFieldNumber;
const int VehicleSymbol::kNameFieldNumber;
const int VehicleSymbol::kCutboardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSymbol::VehicleSymbol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.VehicleSymbol)
}

void VehicleSymbol::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cutboard_ = const_cast< ::model::Cutboard*>(&::model::Cutboard::default_instance());
}

VehicleSymbol::VehicleSymbol(const VehicleSymbol& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.VehicleSymbol)
}

void VehicleSymbol::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  confidence_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cutboard_ = NULL;
}

VehicleSymbol::~VehicleSymbol() {
  // @@protoc_insertion_point(destructor:model.VehicleSymbol)
  SharedDtor();
}

void VehicleSymbol::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete cutboard_;
  }
}

void VehicleSymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleSymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleSymbol_descriptor_;
}

const VehicleSymbol& VehicleSymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

VehicleSymbol* VehicleSymbol::default_instance_ = NULL;

VehicleSymbol* VehicleSymbol::New(::google::protobuf::Arena* arena) const {
  VehicleSymbol* n = new VehicleSymbol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:model.VehicleSymbol)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleSymbol, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleSymbol*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, type_);
  confidence_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool VehicleSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.VehicleSymbol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional int32 Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 3;
      case 3: {
        if (tag == 29) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }

      // optional string Name = 4;
      case 4: {
        if (tag == 34) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "model.VehicleSymbol.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Cutboard;
        break;
      }

      // optional .model.Cutboard Cutboard = 5;
      case 5: {
        if (tag == 42) {
         parse_Cutboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.VehicleSymbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.VehicleSymbol)
  return false;
#undef DO_
}

void VehicleSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.VehicleSymbol)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // optional string Name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.VehicleSymbol.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional .model.Cutboard Cutboard = 5;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cutboard_, output);
  }

  // @@protoc_insertion_point(serialize_end:model.VehicleSymbol)
}

::google::protobuf::uint8* VehicleSymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.VehicleSymbol)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // optional string Name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.VehicleSymbol.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional .model.Cutboard Cutboard = 5;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->cutboard_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.VehicleSymbol)
  return target;
}

int VehicleSymbol::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.VehicleSymbol)
  int total_size = 0;

  // optional int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional int32 Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional string Name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .model.Cutboard Cutboard = 5;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleSymbol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.VehicleSymbol)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VehicleSymbol* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleSymbol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.VehicleSymbol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.VehicleSymbol)
    MergeFrom(*source);
  }
}

void VehicleSymbol::MergeFrom(const VehicleSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.VehicleSymbol)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_cutboard()) {
    mutable_cutboard()->::model::Cutboard::MergeFrom(from.cutboard());
  }
}

void VehicleSymbol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.VehicleSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSymbol::CopyFrom(const VehicleSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.VehicleSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSymbol::IsInitialized() const {

  return true;
}

void VehicleSymbol::Swap(VehicleSymbol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleSymbol::InternalSwap(VehicleSymbol* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(confidence_, other->confidence_);
  name_.Swap(&other->name_);
  std::swap(cutboard_, other->cutboard_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleSymbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleSymbol_descriptor_;
  metadata.reflection = VehicleSymbol_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleSymbol

// optional int32 Id = 1;
void VehicleSymbol::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 VehicleSymbol::id() const {
  // @@protoc_insertion_point(field_get:model.VehicleSymbol.Id)
  return id_;
}
 void VehicleSymbol::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleSymbol.Id)
}

// optional int32 Type = 2;
void VehicleSymbol::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 VehicleSymbol::type() const {
  // @@protoc_insertion_point(field_get:model.VehicleSymbol.Type)
  return type_;
}
 void VehicleSymbol::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleSymbol.Type)
}

// optional float Confidence = 3;
void VehicleSymbol::clear_confidence() {
  confidence_ = 0;
}
 float VehicleSymbol::confidence() const {
  // @@protoc_insertion_point(field_get:model.VehicleSymbol.Confidence)
  return confidence_;
}
 void VehicleSymbol::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleSymbol.Confidence)
}

// optional string Name = 4;
void VehicleSymbol::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VehicleSymbol::name() const {
  // @@protoc_insertion_point(field_get:model.VehicleSymbol.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleSymbol::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.VehicleSymbol.Name)
}
 void VehicleSymbol::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.VehicleSymbol.Name)
}
 void VehicleSymbol::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.VehicleSymbol.Name)
}
 ::std::string* VehicleSymbol::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:model.VehicleSymbol.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleSymbol::release_name() {
  // @@protoc_insertion_point(field_release:model.VehicleSymbol.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleSymbol::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:model.VehicleSymbol.Name)
}

// optional .model.Cutboard Cutboard = 5;
bool VehicleSymbol::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void VehicleSymbol::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::model::Cutboard& VehicleSymbol::cutboard() const {
  // @@protoc_insertion_point(field_get:model.VehicleSymbol.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::model::Cutboard* VehicleSymbol::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:model.VehicleSymbol.Cutboard)
  return cutboard_;
}
::model::Cutboard* VehicleSymbol::release_cutboard() {
  // @@protoc_insertion_point(field_release:model.VehicleSymbol.Cutboard)
  
  ::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void VehicleSymbol::set_allocated_cutboard(::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.VehicleSymbol.Cutboard)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle::kIdFieldNumber;
const int Vehicle::kMetadataFieldNumber;
const int Vehicle::kModelTypeFieldNumber;
const int Vehicle::kColorFieldNumber;
const int Vehicle::kIsHeadFieldNumber;
const int Vehicle::kIsDayFieldNumber;
const int Vehicle::kPlateFieldNumber;
const int Vehicle::kSideFieldNumber;
const int Vehicle::kImgFieldNumber;
const int Vehicle::kSymbolsFieldNumber;
const int Vehicle::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle::Vehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Vehicle)
}

void Vehicle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::model::VideoMetadata*>(&::model::VideoMetadata::default_instance());
  modeltype_ = const_cast< ::model::VehicleModelType*>(&::model::VehicleModelType::default_instance());
  color_ = const_cast< ::model::Color*>(&::model::Color::default_instance());
  plate_ = const_cast< ::model::LicensePlate*>(&::model::LicensePlate::default_instance());
  img_ = const_cast< ::model::CutboardImage*>(&::model::CutboardImage::default_instance());
}

Vehicle::Vehicle(const Vehicle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Vehicle)
}

void Vehicle::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  metadata_ = NULL;
  modeltype_ = NULL;
  color_ = NULL;
  ishead_ = false;
  isday_ = false;
  plate_ = NULL;
  side_ = 0;
  img_ = NULL;
  feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:model.Vehicle)
  SharedDtor();
}

void Vehicle::SharedDtor() {
  feature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
    delete modeltype_;
    delete color_;
    delete plate_;
    delete img_;
  }
}

void Vehicle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vehicle_descriptor_;
}

const Vehicle& Vehicle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Vehicle* Vehicle::default_instance_ = NULL;

Vehicle* Vehicle::New(::google::protobuf::Arena* arena) const {
  Vehicle* n = new Vehicle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Vehicle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vehicle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vehicle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ishead_, side_);
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && modeltype_ != NULL) delete modeltype_;
  modeltype_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && plate_ != NULL) delete plate_;
  plate_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  symbols_.Clear();
}

bool Vehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Vehicle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Metadata;
        break;
      }

      // optional .model.VideoMetadata Metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ModelType;
        break;
      }

      // optional .model.VehicleModelType ModelType = 3;
      case 3: {
        if (tag == 26) {
         parse_ModelType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modeltype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Color;
        break;
      }

      // optional .model.Color Color = 4;
      case 4: {
        if (tag == 34) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsHead;
        break;
      }

      // optional bool IsHead = 5;
      case 5: {
        if (tag == 40) {
         parse_IsHead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishead_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsDay;
        break;
      }

      // optional bool IsDay = 6;
      case 6: {
        if (tag == 48) {
         parse_IsDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isday_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Plate;
        break;
      }

      // optional .model.LicensePlate Plate = 7;
      case 7: {
        if (tag == 58) {
         parse_Plate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Side;
        break;
      }

      // optional int32 Side = 8;
      case 8: {
        if (tag == 64) {
         parse_Side:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &side_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Img;
        break;
      }

      // optional .model.CutboardImage Img = 9;
      case 9: {
        if (tag == 74) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Symbols;
        break;
      }

      // repeated .model.VehicleSymbol Symbols = 10;
      case 10: {
        if (tag == 82) {
         parse_Symbols:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_Symbols;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(90)) goto parse_Feature;
        break;
      }

      // optional bytes Feature = 11;
      case 11: {
        if (tag == 90) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Vehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Vehicle)
  return false;
#undef DO_
}

void Vehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Vehicle)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // optional .model.VehicleModelType ModelType = 3;
  if (this->has_modeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->modeltype_, output);
  }

  // optional .model.Color Color = 4;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->color_, output);
  }

  // optional bool IsHead = 5;
  if (this->ishead() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ishead(), output);
  }

  // optional bool IsDay = 6;
  if (this->isday() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isday(), output);
  }

  // optional .model.LicensePlate Plate = 7;
  if (this->has_plate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->plate_, output);
  }

  // optional int32 Side = 8;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->side(), output);
  }

  // optional .model.CutboardImage Img = 9;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->img_, output);
  }

  // repeated .model.VehicleSymbol Symbols = 10;
  for (unsigned int i = 0, n = this->symbols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->symbols(i), output);
  }

  // optional bytes Feature = 11;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->feature(), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Vehicle)
}

::google::protobuf::uint8* Vehicle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Vehicle)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->metadata_, target);
  }

  // optional .model.VehicleModelType ModelType = 3;
  if (this->has_modeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->modeltype_, target);
  }

  // optional .model.Color Color = 4;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->color_, target);
  }

  // optional bool IsHead = 5;
  if (this->ishead() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ishead(), target);
  }

  // optional bool IsDay = 6;
  if (this->isday() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isday(), target);
  }

  // optional .model.LicensePlate Plate = 7;
  if (this->has_plate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->plate_, target);
  }

  // optional int32 Side = 8;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->side(), target);
  }

  // optional .model.CutboardImage Img = 9;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->img_, target);
  }

  // repeated .model.VehicleSymbol Symbols = 10;
  for (unsigned int i = 0, n = this->symbols_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->symbols(i), target);
  }

  // optional bytes Feature = 11;
  if (this->feature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->feature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Vehicle)
  return target;
}

int Vehicle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Vehicle)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional .model.VehicleModelType ModelType = 3;
  if (this->has_modeltype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->modeltype_);
  }

  // optional .model.Color Color = 4;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // optional bool IsHead = 5;
  if (this->ishead() != 0) {
    total_size += 1 + 1;
  }

  // optional bool IsDay = 6;
  if (this->isday() != 0) {
    total_size += 1 + 1;
  }

  // optional .model.LicensePlate Plate = 7;
  if (this->has_plate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plate_);
  }

  // optional int32 Side = 8;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->side());
  }

  // optional .model.CutboardImage Img = 9;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional bytes Feature = 11;
  if (this->feature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->feature());
  }

  // repeated .model.VehicleSymbol Symbols = 10;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Vehicle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vehicle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Vehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Vehicle)
    MergeFrom(*source);
  }
}

void Vehicle::MergeFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Vehicle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  symbols_.MergeFrom(from.symbols_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::model::VideoMetadata::MergeFrom(from.metadata());
  }
  if (from.has_modeltype()) {
    mutable_modeltype()->::model::VehicleModelType::MergeFrom(from.modeltype());
  }
  if (from.has_color()) {
    mutable_color()->::model::Color::MergeFrom(from.color());
  }
  if (from.ishead() != 0) {
    set_ishead(from.ishead());
  }
  if (from.isday() != 0) {
    set_isday(from.isday());
  }
  if (from.has_plate()) {
    mutable_plate()->::model::LicensePlate::MergeFrom(from.plate());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.has_img()) {
    mutable_img()->::model::CutboardImage::MergeFrom(from.img());
  }
  if (from.feature().size() > 0) {

    feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_);
  }
}

void Vehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle::IsInitialized() const {

  return true;
}

void Vehicle::Swap(Vehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle::InternalSwap(Vehicle* other) {
  std::swap(id_, other->id_);
  std::swap(metadata_, other->metadata_);
  std::swap(modeltype_, other->modeltype_);
  std::swap(color_, other->color_);
  std::swap(ishead_, other->ishead_);
  std::swap(isday_, other->isday_);
  std::swap(plate_, other->plate_);
  std::swap(side_, other->side_);
  std::swap(img_, other->img_);
  symbols_.UnsafeArenaSwap(&other->symbols_);
  feature_.Swap(&other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vehicle_descriptor_;
  metadata.reflection = Vehicle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vehicle

// optional int64 Id = 1;
void Vehicle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Vehicle::id() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Id)
  return id_;
}
 void Vehicle::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Vehicle.Id)
}

// optional .model.VideoMetadata Metadata = 2;
bool Vehicle::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Vehicle::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::model::VideoMetadata& Vehicle::metadata() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::model::VideoMetadata* Vehicle::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Metadata)
  return metadata_;
}
::model::VideoMetadata* Vehicle::release_metadata() {
  // @@protoc_insertion_point(field_release:model.Vehicle.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Vehicle::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.Metadata)
}

// optional .model.VehicleModelType ModelType = 3;
bool Vehicle::has_modeltype() const {
  return !_is_default_instance_ && modeltype_ != NULL;
}
void Vehicle::clear_modeltype() {
  if (GetArenaNoVirtual() == NULL && modeltype_ != NULL) delete modeltype_;
  modeltype_ = NULL;
}
const ::model::VehicleModelType& Vehicle::modeltype() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.ModelType)
  return modeltype_ != NULL ? *modeltype_ : *default_instance_->modeltype_;
}
::model::VehicleModelType* Vehicle::mutable_modeltype() {
  
  if (modeltype_ == NULL) {
    modeltype_ = new ::model::VehicleModelType;
  }
  // @@protoc_insertion_point(field_mutable:model.Vehicle.ModelType)
  return modeltype_;
}
::model::VehicleModelType* Vehicle::release_modeltype() {
  // @@protoc_insertion_point(field_release:model.Vehicle.ModelType)
  
  ::model::VehicleModelType* temp = modeltype_;
  modeltype_ = NULL;
  return temp;
}
void Vehicle::set_allocated_modeltype(::model::VehicleModelType* modeltype) {
  delete modeltype_;
  modeltype_ = modeltype;
  if (modeltype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.ModelType)
}

// optional .model.Color Color = 4;
bool Vehicle::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void Vehicle::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::model::Color& Vehicle::color() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::model::Color* Vehicle::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Color)
  return color_;
}
::model::Color* Vehicle::release_color() {
  // @@protoc_insertion_point(field_release:model.Vehicle.Color)
  
  ::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void Vehicle::set_allocated_color(::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.Color)
}

// optional bool IsHead = 5;
void Vehicle::clear_ishead() {
  ishead_ = false;
}
 bool Vehicle::ishead() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.IsHead)
  return ishead_;
}
 void Vehicle::set_ishead(bool value) {
  
  ishead_ = value;
  // @@protoc_insertion_point(field_set:model.Vehicle.IsHead)
}

// optional bool IsDay = 6;
void Vehicle::clear_isday() {
  isday_ = false;
}
 bool Vehicle::isday() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.IsDay)
  return isday_;
}
 void Vehicle::set_isday(bool value) {
  
  isday_ = value;
  // @@protoc_insertion_point(field_set:model.Vehicle.IsDay)
}

// optional .model.LicensePlate Plate = 7;
bool Vehicle::has_plate() const {
  return !_is_default_instance_ && plate_ != NULL;
}
void Vehicle::clear_plate() {
  if (GetArenaNoVirtual() == NULL && plate_ != NULL) delete plate_;
  plate_ = NULL;
}
const ::model::LicensePlate& Vehicle::plate() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Plate)
  return plate_ != NULL ? *plate_ : *default_instance_->plate_;
}
::model::LicensePlate* Vehicle::mutable_plate() {
  
  if (plate_ == NULL) {
    plate_ = new ::model::LicensePlate;
  }
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Plate)
  return plate_;
}
::model::LicensePlate* Vehicle::release_plate() {
  // @@protoc_insertion_point(field_release:model.Vehicle.Plate)
  
  ::model::LicensePlate* temp = plate_;
  plate_ = NULL;
  return temp;
}
void Vehicle::set_allocated_plate(::model::LicensePlate* plate) {
  delete plate_;
  plate_ = plate;
  if (plate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.Plate)
}

// optional int32 Side = 8;
void Vehicle::clear_side() {
  side_ = 0;
}
 ::google::protobuf::int32 Vehicle::side() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Side)
  return side_;
}
 void Vehicle::set_side(::google::protobuf::int32 value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:model.Vehicle.Side)
}

// optional .model.CutboardImage Img = 9;
bool Vehicle::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void Vehicle::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::model::CutboardImage& Vehicle::img() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::model::CutboardImage* Vehicle::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Img)
  return img_;
}
::model::CutboardImage* Vehicle::release_img() {
  // @@protoc_insertion_point(field_release:model.Vehicle.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void Vehicle::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.Img)
}

// repeated .model.VehicleSymbol Symbols = 10;
int Vehicle::symbols_size() const {
  return symbols_.size();
}
void Vehicle::clear_symbols() {
  symbols_.Clear();
}
const ::model::VehicleSymbol& Vehicle::symbols(int index) const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Symbols)
  return symbols_.Get(index);
}
::model::VehicleSymbol* Vehicle::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Symbols)
  return symbols_.Mutable(index);
}
::model::VehicleSymbol* Vehicle::add_symbols() {
  // @@protoc_insertion_point(field_add:model.Vehicle.Symbols)
  return symbols_.Add();
}
::google::protobuf::RepeatedPtrField< ::model::VehicleSymbol >*
Vehicle::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:model.Vehicle.Symbols)
  return &symbols_;
}
const ::google::protobuf::RepeatedPtrField< ::model::VehicleSymbol >&
Vehicle::symbols() const {
  // @@protoc_insertion_point(field_list:model.Vehicle.Symbols)
  return symbols_;
}

// optional bytes Feature = 11;
void Vehicle::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Vehicle::feature() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Vehicle::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Vehicle.Feature)
}
 void Vehicle::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Vehicle.Feature)
}
 void Vehicle::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Vehicle.Feature)
}
 ::std::string* Vehicle::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Vehicle::release_feature() {
  // @@protoc_insertion_point(field_release:model.Vehicle.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Vehicle::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.Feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicles::kVehicleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicles::Vehicles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Vehicles)
}

void Vehicles::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vehicles::Vehicles(const Vehicles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Vehicles)
}

void Vehicles::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Vehicles::~Vehicles() {
  // @@protoc_insertion_point(destructor:model.Vehicles)
  SharedDtor();
}

void Vehicles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vehicles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vehicles_descriptor_;
}

const Vehicles& Vehicles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Vehicles* Vehicles::default_instance_ = NULL;

Vehicles* Vehicles::New(::google::protobuf::Arena* arena) const {
  Vehicles* n = new Vehicles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicles::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Vehicles)
  vehicle_.Clear();
}

bool Vehicles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Vehicles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .model.Vehicle Vehicle = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Vehicle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Vehicles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Vehicles)
  return false;
#undef DO_
}

void Vehicles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Vehicles)
  // repeated .model.Vehicle Vehicle = 1;
  for (unsigned int i = 0, n = this->vehicle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vehicle(i), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Vehicles)
}

::google::protobuf::uint8* Vehicles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Vehicles)
  // repeated .model.Vehicle Vehicle = 1;
  for (unsigned int i = 0, n = this->vehicle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vehicle(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Vehicles)
  return target;
}

int Vehicles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Vehicles)
  int total_size = 0;

  // repeated .model.Vehicle Vehicle = 1;
  total_size += 1 * this->vehicle_size();
  for (int i = 0; i < this->vehicle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicle(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Vehicles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vehicles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Vehicles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Vehicles)
    MergeFrom(*source);
  }
}

void Vehicles::MergeFrom(const Vehicles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Vehicles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vehicle_.MergeFrom(from.vehicle_);
}

void Vehicles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Vehicles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicles::CopyFrom(const Vehicles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Vehicles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicles::IsInitialized() const {

  return true;
}

void Vehicles::Swap(Vehicles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicles::InternalSwap(Vehicles* other) {
  vehicle_.UnsafeArenaSwap(&other->vehicle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vehicles_descriptor_;
  metadata.reflection = Vehicles_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vehicles

// repeated .model.Vehicle Vehicle = 1;
int Vehicles::vehicle_size() const {
  return vehicle_.size();
}
void Vehicles::clear_vehicle() {
  vehicle_.Clear();
}
const ::model::Vehicle& Vehicles::vehicle(int index) const {
  // @@protoc_insertion_point(field_get:model.Vehicles.Vehicle)
  return vehicle_.Get(index);
}
::model::Vehicle* Vehicles::mutable_vehicle(int index) {
  // @@protoc_insertion_point(field_mutable:model.Vehicles.Vehicle)
  return vehicle_.Mutable(index);
}
::model::Vehicle* Vehicles::add_vehicle() {
  // @@protoc_insertion_point(field_add:model.Vehicles.Vehicle)
  return vehicle_.Add();
}
::google::protobuf::RepeatedPtrField< ::model::Vehicle >*
Vehicles::mutable_vehicle() {
  // @@protoc_insertion_point(field_mutable_list:model.Vehicles.Vehicle)
  return &vehicle_;
}
const ::google::protobuf::RepeatedPtrField< ::model::Vehicle >&
Vehicles::vehicle() const {
  // @@protoc_insertion_point(field_list:model.Vehicles.Vehicle)
  return vehicle_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tricycle::kIdFieldNumber;
const int Tricycle::kMetadataFieldNumber;
const int Tricycle::kImgFieldNumber;
const int Tricycle::kFeatureFieldNumber;
const int Tricycle::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tricycle::Tricycle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Tricycle)
}

void Tricycle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::model::VideoMetadata*>(&::model::VideoMetadata::default_instance());
  img_ = const_cast< ::model::CutboardImage*>(&::model::CutboardImage::default_instance());
  color_ = const_cast< ::model::Color*>(&::model::Color::default_instance());
}

Tricycle::Tricycle(const Tricycle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Tricycle)
}

void Tricycle::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  metadata_ = NULL;
  img_ = NULL;
  feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = NULL;
}

Tricycle::~Tricycle() {
  // @@protoc_insertion_point(destructor:model.Tricycle)
  SharedDtor();
}

void Tricycle::SharedDtor() {
  feature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
    delete img_;
    delete color_;
  }
}

void Tricycle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tricycle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tricycle_descriptor_;
}

const Tricycle& Tricycle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Tricycle* Tricycle::default_instance_ = NULL;

Tricycle* Tricycle::New(::google::protobuf::Arena* arena) const {
  Tricycle* n = new Tricycle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tricycle::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Tricycle)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}

bool Tricycle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Tricycle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Metadata;
        break;
      }

      // optional .model.VideoMetadata Metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Img;
        break;
      }

      // optional .model.CutboardImage Img = 3;
      case 3: {
        if (tag == 26) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Feature;
        break;
      }

      // optional bytes Feature = 4;
      case 4: {
        if (tag == 34) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Color;
        break;
      }

      // optional .model.Color Color = 5;
      case 5: {
        if (tag == 42) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Tricycle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Tricycle)
  return false;
#undef DO_
}

void Tricycle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Tricycle)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->img_, output);
  }

  // optional bytes Feature = 4;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->feature(), output);
  }

  // optional .model.Color Color = 5;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->color_, output);
  }

  // @@protoc_insertion_point(serialize_end:model.Tricycle)
}

::google::protobuf::uint8* Tricycle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Tricycle)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->metadata_, target);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->img_, target);
  }

  // optional bytes Feature = 4;
  if (this->feature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->feature(), target);
  }

  // optional .model.Color Color = 5;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->color_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Tricycle)
  return target;
}

int Tricycle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Tricycle)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional bytes Feature = 4;
  if (this->feature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->feature());
  }

  // optional .model.Color Color = 5;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tricycle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Tricycle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Tricycle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Tricycle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Tricycle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Tricycle)
    MergeFrom(*source);
  }
}

void Tricycle::MergeFrom(const Tricycle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Tricycle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::model::VideoMetadata::MergeFrom(from.metadata());
  }
  if (from.has_img()) {
    mutable_img()->::model::CutboardImage::MergeFrom(from.img());
  }
  if (from.feature().size() > 0) {

    feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_);
  }
  if (from.has_color()) {
    mutable_color()->::model::Color::MergeFrom(from.color());
  }
}

void Tricycle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Tricycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tricycle::CopyFrom(const Tricycle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Tricycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tricycle::IsInitialized() const {

  return true;
}

void Tricycle::Swap(Tricycle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tricycle::InternalSwap(Tricycle* other) {
  std::swap(id_, other->id_);
  std::swap(metadata_, other->metadata_);
  std::swap(img_, other->img_);
  feature_.Swap(&other->feature_);
  std::swap(color_, other->color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tricycle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tricycle_descriptor_;
  metadata.reflection = Tricycle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tricycle

// optional int64 Id = 1;
void Tricycle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Tricycle::id() const {
  // @@protoc_insertion_point(field_get:model.Tricycle.Id)
  return id_;
}
 void Tricycle::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Tricycle.Id)
}

// optional .model.VideoMetadata Metadata = 2;
bool Tricycle::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Tricycle::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::model::VideoMetadata& Tricycle::metadata() const {
  // @@protoc_insertion_point(field_get:model.Tricycle.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::model::VideoMetadata* Tricycle::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.Tricycle.Metadata)
  return metadata_;
}
::model::VideoMetadata* Tricycle::release_metadata() {
  // @@protoc_insertion_point(field_release:model.Tricycle.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Tricycle::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Tricycle.Metadata)
}

// optional .model.CutboardImage Img = 3;
bool Tricycle::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void Tricycle::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::model::CutboardImage& Tricycle::img() const {
  // @@protoc_insertion_point(field_get:model.Tricycle.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::model::CutboardImage* Tricycle::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.Tricycle.Img)
  return img_;
}
::model::CutboardImage* Tricycle::release_img() {
  // @@protoc_insertion_point(field_release:model.Tricycle.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void Tricycle::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Tricycle.Img)
}

// optional bytes Feature = 4;
void Tricycle::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Tricycle::feature() const {
  // @@protoc_insertion_point(field_get:model.Tricycle.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Tricycle::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Tricycle.Feature)
}
 void Tricycle::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Tricycle.Feature)
}
 void Tricycle::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Tricycle.Feature)
}
 ::std::string* Tricycle::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.Tricycle.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Tricycle::release_feature() {
  // @@protoc_insertion_point(field_release:model.Tricycle.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Tricycle::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.Tricycle.Feature)
}

// optional .model.Color Color = 5;
bool Tricycle::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void Tricycle::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::model::Color& Tricycle::color() const {
  // @@protoc_insertion_point(field_get:model.Tricycle.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::model::Color* Tricycle::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:model.Tricycle.Color)
  return color_;
}
::model::Color* Tricycle::release_color() {
  // @@protoc_insertion_point(field_release:model.Tricycle.Color)
  
  ::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void Tricycle::set_allocated_color(::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Tricycle.Color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tricycles::kTricycleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tricycles::Tricycles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Tricycles)
}

void Tricycles::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Tricycles::Tricycles(const Tricycles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Tricycles)
}

void Tricycles::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Tricycles::~Tricycles() {
  // @@protoc_insertion_point(destructor:model.Tricycles)
  SharedDtor();
}

void Tricycles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tricycles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tricycles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tricycles_descriptor_;
}

const Tricycles& Tricycles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Tricycles* Tricycles::default_instance_ = NULL;

Tricycles* Tricycles::New(::google::protobuf::Arena* arena) const {
  Tricycles* n = new Tricycles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tricycles::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Tricycles)
  tricycle_.Clear();
}

bool Tricycles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Tricycles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .model.Tricycle Tricycle = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Tricycle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tricycle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Tricycle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Tricycles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Tricycles)
  return false;
#undef DO_
}

void Tricycles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Tricycles)
  // repeated .model.Tricycle Tricycle = 1;
  for (unsigned int i = 0, n = this->tricycle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tricycle(i), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Tricycles)
}

::google::protobuf::uint8* Tricycles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Tricycles)
  // repeated .model.Tricycle Tricycle = 1;
  for (unsigned int i = 0, n = this->tricycle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tricycle(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Tricycles)
  return target;
}

int Tricycles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Tricycles)
  int total_size = 0;

  // repeated .model.Tricycle Tricycle = 1;
  total_size += 1 * this->tricycle_size();
  for (int i = 0; i < this->tricycle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tricycle(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tricycles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Tricycles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Tricycles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Tricycles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Tricycles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Tricycles)
    MergeFrom(*source);
  }
}

void Tricycles::MergeFrom(const Tricycles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Tricycles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tricycle_.MergeFrom(from.tricycle_);
}

void Tricycles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Tricycles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tricycles::CopyFrom(const Tricycles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Tricycles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tricycles::IsInitialized() const {

  return true;
}

void Tricycles::Swap(Tricycles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tricycles::InternalSwap(Tricycles* other) {
  tricycle_.UnsafeArenaSwap(&other->tricycle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tricycles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tricycles_descriptor_;
  metadata.reflection = Tricycles_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tricycles

// repeated .model.Tricycle Tricycle = 1;
int Tricycles::tricycle_size() const {
  return tricycle_.size();
}
void Tricycles::clear_tricycle() {
  tricycle_.Clear();
}
const ::model::Tricycle& Tricycles::tricycle(int index) const {
  // @@protoc_insertion_point(field_get:model.Tricycles.Tricycle)
  return tricycle_.Get(index);
}
::model::Tricycle* Tricycles::mutable_tricycle(int index) {
  // @@protoc_insertion_point(field_mutable:model.Tricycles.Tricycle)
  return tricycle_.Mutable(index);
}
::model::Tricycle* Tricycles::add_tricycle() {
  // @@protoc_insertion_point(field_add:model.Tricycles.Tricycle)
  return tricycle_.Add();
}
::google::protobuf::RepeatedPtrField< ::model::Tricycle >*
Tricycles::mutable_tricycle() {
  // @@protoc_insertion_point(field_mutable_list:model.Tricycles.Tricycle)
  return &tricycle_;
}
const ::google::protobuf::RepeatedPtrField< ::model::Tricycle >&
Tricycles::tricycle() const {
  // @@protoc_insertion_point(field_list:model.Tricycles.Tricycle)
  return tricycle_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bicycle::kIdFieldNumber;
const int Bicycle::kMetadataFieldNumber;
const int Bicycle::kImgFieldNumber;
const int Bicycle::kFeatureFieldNumber;
const int Bicycle::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bicycle::Bicycle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Bicycle)
}

void Bicycle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::model::VideoMetadata*>(&::model::VideoMetadata::default_instance());
  img_ = const_cast< ::model::CutboardImage*>(&::model::CutboardImage::default_instance());
  color_ = const_cast< ::model::Color*>(&::model::Color::default_instance());
}

Bicycle::Bicycle(const Bicycle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Bicycle)
}

void Bicycle::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  metadata_ = NULL;
  img_ = NULL;
  feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = NULL;
}

Bicycle::~Bicycle() {
  // @@protoc_insertion_point(destructor:model.Bicycle)
  SharedDtor();
}

void Bicycle::SharedDtor() {
  feature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
    delete img_;
    delete color_;
  }
}

void Bicycle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bicycle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bicycle_descriptor_;
}

const Bicycle& Bicycle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Bicycle* Bicycle::default_instance_ = NULL;

Bicycle* Bicycle::New(::google::protobuf::Arena* arena) const {
  Bicycle* n = new Bicycle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bicycle::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Bicycle)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}

bool Bicycle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Bicycle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Metadata;
        break;
      }

      // optional .model.VideoMetadata Metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Img;
        break;
      }

      // optional .model.CutboardImage Img = 3;
      case 3: {
        if (tag == 26) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Feature;
        break;
      }

      // optional bytes Feature = 4;
      case 4: {
        if (tag == 34) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Color;
        break;
      }

      // optional .model.Color Color = 5;
      case 5: {
        if (tag == 42) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Bicycle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Bicycle)
  return false;
#undef DO_
}

void Bicycle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Bicycle)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->img_, output);
  }

  // optional bytes Feature = 4;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->feature(), output);
  }

  // optional .model.Color Color = 5;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->color_, output);
  }

  // @@protoc_insertion_point(serialize_end:model.Bicycle)
}

::google::protobuf::uint8* Bicycle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Bicycle)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->metadata_, target);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->img_, target);
  }

  // optional bytes Feature = 4;
  if (this->feature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->feature(), target);
  }

  // optional .model.Color Color = 5;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->color_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Bicycle)
  return target;
}

int Bicycle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Bicycle)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional bytes Feature = 4;
  if (this->feature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->feature());
  }

  // optional .model.Color Color = 5;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bicycle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Bicycle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Bicycle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Bicycle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Bicycle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Bicycle)
    MergeFrom(*source);
  }
}

void Bicycle::MergeFrom(const Bicycle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Bicycle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::model::VideoMetadata::MergeFrom(from.metadata());
  }
  if (from.has_img()) {
    mutable_img()->::model::CutboardImage::MergeFrom(from.img());
  }
  if (from.feature().size() > 0) {

    feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_);
  }
  if (from.has_color()) {
    mutable_color()->::model::Color::MergeFrom(from.color());
  }
}

void Bicycle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Bicycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bicycle::CopyFrom(const Bicycle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Bicycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bicycle::IsInitialized() const {

  return true;
}

void Bicycle::Swap(Bicycle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bicycle::InternalSwap(Bicycle* other) {
  std::swap(id_, other->id_);
  std::swap(metadata_, other->metadata_);
  std::swap(img_, other->img_);
  feature_.Swap(&other->feature_);
  std::swap(color_, other->color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bicycle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bicycle_descriptor_;
  metadata.reflection = Bicycle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bicycle

// optional int64 Id = 1;
void Bicycle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Bicycle::id() const {
  // @@protoc_insertion_point(field_get:model.Bicycle.Id)
  return id_;
}
 void Bicycle::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Bicycle.Id)
}

// optional .model.VideoMetadata Metadata = 2;
bool Bicycle::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Bicycle::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::model::VideoMetadata& Bicycle::metadata() const {
  // @@protoc_insertion_point(field_get:model.Bicycle.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::model::VideoMetadata* Bicycle::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.Bicycle.Metadata)
  return metadata_;
}
::model::VideoMetadata* Bicycle::release_metadata() {
  // @@protoc_insertion_point(field_release:model.Bicycle.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Bicycle::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Bicycle.Metadata)
}

// optional .model.CutboardImage Img = 3;
bool Bicycle::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void Bicycle::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::model::CutboardImage& Bicycle::img() const {
  // @@protoc_insertion_point(field_get:model.Bicycle.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::model::CutboardImage* Bicycle::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.Bicycle.Img)
  return img_;
}
::model::CutboardImage* Bicycle::release_img() {
  // @@protoc_insertion_point(field_release:model.Bicycle.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void Bicycle::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Bicycle.Img)
}

// optional bytes Feature = 4;
void Bicycle::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Bicycle::feature() const {
  // @@protoc_insertion_point(field_get:model.Bicycle.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bicycle::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Bicycle.Feature)
}
 void Bicycle::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Bicycle.Feature)
}
 void Bicycle::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Bicycle.Feature)
}
 ::std::string* Bicycle::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.Bicycle.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bicycle::release_feature() {
  // @@protoc_insertion_point(field_release:model.Bicycle.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bicycle::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.Bicycle.Feature)
}

// optional .model.Color Color = 5;
bool Bicycle::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void Bicycle::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::model::Color& Bicycle::color() const {
  // @@protoc_insertion_point(field_get:model.Bicycle.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::model::Color* Bicycle::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:model.Bicycle.Color)
  return color_;
}
::model::Color* Bicycle::release_color() {
  // @@protoc_insertion_point(field_release:model.Bicycle.Color)
  
  ::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void Bicycle::set_allocated_color(::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Bicycle.Color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bicycles::kTricycleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bicycles::Bicycles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Bicycles)
}

void Bicycles::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Bicycles::Bicycles(const Bicycles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Bicycles)
}

void Bicycles::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Bicycles::~Bicycles() {
  // @@protoc_insertion_point(destructor:model.Bicycles)
  SharedDtor();
}

void Bicycles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bicycles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bicycles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bicycles_descriptor_;
}

const Bicycles& Bicycles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Bicycles* Bicycles::default_instance_ = NULL;

Bicycles* Bicycles::New(::google::protobuf::Arena* arena) const {
  Bicycles* n = new Bicycles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bicycles::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Bicycles)
  tricycle_.Clear();
}

bool Bicycles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Bicycles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .model.Bicycle Tricycle = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Tricycle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tricycle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Tricycle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Bicycles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Bicycles)
  return false;
#undef DO_
}

void Bicycles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Bicycles)
  // repeated .model.Bicycle Tricycle = 1;
  for (unsigned int i = 0, n = this->tricycle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tricycle(i), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Bicycles)
}

::google::protobuf::uint8* Bicycles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Bicycles)
  // repeated .model.Bicycle Tricycle = 1;
  for (unsigned int i = 0, n = this->tricycle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tricycle(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Bicycles)
  return target;
}

int Bicycles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Bicycles)
  int total_size = 0;

  // repeated .model.Bicycle Tricycle = 1;
  total_size += 1 * this->tricycle_size();
  for (int i = 0; i < this->tricycle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tricycle(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bicycles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Bicycles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Bicycles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Bicycles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Bicycles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Bicycles)
    MergeFrom(*source);
  }
}

void Bicycles::MergeFrom(const Bicycles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Bicycles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tricycle_.MergeFrom(from.tricycle_);
}

void Bicycles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Bicycles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bicycles::CopyFrom(const Bicycles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Bicycles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bicycles::IsInitialized() const {

  return true;
}

void Bicycles::Swap(Bicycles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bicycles::InternalSwap(Bicycles* other) {
  tricycle_.UnsafeArenaSwap(&other->tricycle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bicycles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bicycles_descriptor_;
  metadata.reflection = Bicycles_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bicycles

// repeated .model.Bicycle Tricycle = 1;
int Bicycles::tricycle_size() const {
  return tricycle_.size();
}
void Bicycles::clear_tricycle() {
  tricycle_.Clear();
}
const ::model::Bicycle& Bicycles::tricycle(int index) const {
  // @@protoc_insertion_point(field_get:model.Bicycles.Tricycle)
  return tricycle_.Get(index);
}
::model::Bicycle* Bicycles::mutable_tricycle(int index) {
  // @@protoc_insertion_point(field_mutable:model.Bicycles.Tricycle)
  return tricycle_.Mutable(index);
}
::model::Bicycle* Bicycles::add_tricycle() {
  // @@protoc_insertion_point(field_add:model.Bicycles.Tricycle)
  return tricycle_.Add();
}
::google::protobuf::RepeatedPtrField< ::model::Bicycle >*
Bicycles::mutable_tricycle() {
  // @@protoc_insertion_point(field_mutable_list:model.Bicycles.Tricycle)
  return &tricycle_;
}
const ::google::protobuf::RepeatedPtrField< ::model::Bicycle >&
Bicycles::tricycle() const {
  // @@protoc_insertion_point(field_list:model.Bicycles.Tricycle)
  return tricycle_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pedestrian::kIdFieldNumber;
const int Pedestrian::kMetadataFieldNumber;
const int Pedestrian::kImgFieldNumber;
const int Pedestrian::kFeaturesFieldNumber;
const int Pedestrian::kHeadsFieldNumber;
const int Pedestrian::kUpperColorsFieldNumber;
const int Pedestrian::kLowerColorsFieldNumber;
const int Pedestrian::kAgeFieldNumber;
const int Pedestrian::kUpperStyleFieldNumber;
const int Pedestrian::kLowerStyleFieldNumber;
const int Pedestrian::kGenderFieldNumber;
const int Pedestrian::kEthnicFieldNumber;
const int Pedestrian::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pedestrian::Pedestrian()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Pedestrian)
}

void Pedestrian::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::model::VideoMetadata*>(&::model::VideoMetadata::default_instance());
  img_ = const_cast< ::model::CutboardImage*>(&::model::CutboardImage::default_instance());
}

Pedestrian::Pedestrian(const Pedestrian& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Pedestrian)
}

void Pedestrian::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  metadata_ = NULL;
  img_ = NULL;
  features_ = 0u;
  heads_ = 0u;
  uppercolors_ = 0u;
  lowercolors_ = 0u;
  age_ = 0u;
  upperstyle_ = 0u;
  lowerstyle_ = 0u;
  gender_ = false;
  ethnic_ = false;
  feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Pedestrian::~Pedestrian() {
  // @@protoc_insertion_point(destructor:model.Pedestrian)
  SharedDtor();
}

void Pedestrian::SharedDtor() {
  feature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
    delete img_;
  }
}

void Pedestrian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pedestrian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pedestrian_descriptor_;
}

const Pedestrian& Pedestrian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Pedestrian* Pedestrian::default_instance_ = NULL;

Pedestrian* Pedestrian::New(::google::protobuf::Arena* arena) const {
  Pedestrian* n = new Pedestrian;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pedestrian::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Pedestrian)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Pedestrian, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Pedestrian*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(features_, age_);
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  ZR_(upperstyle_, ethnic_);
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Pedestrian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Pedestrian)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Metadata;
        break;
      }

      // optional .model.VideoMetadata Metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Img;
        break;
      }

      // optional .model.CutboardImage Img = 3;
      case 3: {
        if (tag == 26) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Features;
        break;
      }

      // optional uint32 Features = 4;
      case 4: {
        if (tag == 32) {
         parse_Features:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &features_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Heads;
        break;
      }

      // optional uint32 Heads = 5;
      case 5: {
        if (tag == 40) {
         parse_Heads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_UpperColors;
        break;
      }

      // optional uint32 UpperColors = 6;
      case 6: {
        if (tag == 48) {
         parse_UpperColors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uppercolors_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LowerColors;
        break;
      }

      // optional uint32 LowerColors = 7;
      case 7: {
        if (tag == 56) {
         parse_LowerColors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowercolors_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Age;
        break;
      }

      // optional uint32 Age = 8;
      case 8: {
        if (tag == 64) {
         parse_Age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_UpperStyle;
        break;
      }

      // optional uint32 UpperStyle = 9;
      case 9: {
        if (tag == 72) {
         parse_UpperStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upperstyle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_LowerStyle;
        break;
      }

      // optional uint32 LowerStyle = 10;
      case 10: {
        if (tag == 80) {
         parse_LowerStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowerstyle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Gender;
        break;
      }

      // optional bool Gender = 11;
      case 11: {
        if (tag == 88) {
         parse_Gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Ethnic;
        break;
      }

      // optional bool Ethnic = 12;
      case 12: {
        if (tag == 96) {
         parse_Ethnic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ethnic_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Feature;
        break;
      }

      // optional bytes Feature = 13;
      case 13: {
        if (tag == 106) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Pedestrian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Pedestrian)
  return false;
#undef DO_
}

void Pedestrian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Pedestrian)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->img_, output);
  }

  // optional uint32 Features = 4;
  if (this->features() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->features(), output);
  }

  // optional uint32 Heads = 5;
  if (this->heads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heads(), output);
  }

  // optional uint32 UpperColors = 6;
  if (this->uppercolors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uppercolors(), output);
  }

  // optional uint32 LowerColors = 7;
  if (this->lowercolors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lowercolors(), output);
  }

  // optional uint32 Age = 8;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->age(), output);
  }

  // optional uint32 UpperStyle = 9;
  if (this->upperstyle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->upperstyle(), output);
  }

  // optional uint32 LowerStyle = 10;
  if (this->lowerstyle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->lowerstyle(), output);
  }

  // optional bool Gender = 11;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->gender(), output);
  }

  // optional bool Ethnic = 12;
  if (this->ethnic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->ethnic(), output);
  }

  // optional bytes Feature = 13;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->feature(), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Pedestrian)
}

::google::protobuf::uint8* Pedestrian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Pedestrian)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->metadata_, target);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->img_, target);
  }

  // optional uint32 Features = 4;
  if (this->features() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->features(), target);
  }

  // optional uint32 Heads = 5;
  if (this->heads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heads(), target);
  }

  // optional uint32 UpperColors = 6;
  if (this->uppercolors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uppercolors(), target);
  }

  // optional uint32 LowerColors = 7;
  if (this->lowercolors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lowercolors(), target);
  }

  // optional uint32 Age = 8;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->age(), target);
  }

  // optional uint32 UpperStyle = 9;
  if (this->upperstyle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->upperstyle(), target);
  }

  // optional uint32 LowerStyle = 10;
  if (this->lowerstyle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->lowerstyle(), target);
  }

  // optional bool Gender = 11;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->gender(), target);
  }

  // optional bool Ethnic = 12;
  if (this->ethnic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->ethnic(), target);
  }

  // optional bytes Feature = 13;
  if (this->feature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->feature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Pedestrian)
  return target;
}

int Pedestrian::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Pedestrian)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional uint32 Features = 4;
  if (this->features() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->features());
  }

  // optional uint32 Heads = 5;
  if (this->heads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heads());
  }

  // optional uint32 UpperColors = 6;
  if (this->uppercolors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uppercolors());
  }

  // optional uint32 LowerColors = 7;
  if (this->lowercolors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lowercolors());
  }

  // optional uint32 Age = 8;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->age());
  }

  // optional uint32 UpperStyle = 9;
  if (this->upperstyle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->upperstyle());
  }

  // optional uint32 LowerStyle = 10;
  if (this->lowerstyle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lowerstyle());
  }

  // optional bool Gender = 11;
  if (this->gender() != 0) {
    total_size += 1 + 1;
  }

  // optional bool Ethnic = 12;
  if (this->ethnic() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes Feature = 13;
  if (this->feature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->feature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pedestrian::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Pedestrian)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pedestrian* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pedestrian>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Pedestrian)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Pedestrian)
    MergeFrom(*source);
  }
}

void Pedestrian::MergeFrom(const Pedestrian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Pedestrian)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::model::VideoMetadata::MergeFrom(from.metadata());
  }
  if (from.has_img()) {
    mutable_img()->::model::CutboardImage::MergeFrom(from.img());
  }
  if (from.features() != 0) {
    set_features(from.features());
  }
  if (from.heads() != 0) {
    set_heads(from.heads());
  }
  if (from.uppercolors() != 0) {
    set_uppercolors(from.uppercolors());
  }
  if (from.lowercolors() != 0) {
    set_lowercolors(from.lowercolors());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.upperstyle() != 0) {
    set_upperstyle(from.upperstyle());
  }
  if (from.lowerstyle() != 0) {
    set_lowerstyle(from.lowerstyle());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.ethnic() != 0) {
    set_ethnic(from.ethnic());
  }
  if (from.feature().size() > 0) {

    feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_);
  }
}

void Pedestrian::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Pedestrian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pedestrian::CopyFrom(const Pedestrian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Pedestrian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pedestrian::IsInitialized() const {

  return true;
}

void Pedestrian::Swap(Pedestrian* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pedestrian::InternalSwap(Pedestrian* other) {
  std::swap(id_, other->id_);
  std::swap(metadata_, other->metadata_);
  std::swap(img_, other->img_);
  std::swap(features_, other->features_);
  std::swap(heads_, other->heads_);
  std::swap(uppercolors_, other->uppercolors_);
  std::swap(lowercolors_, other->lowercolors_);
  std::swap(age_, other->age_);
  std::swap(upperstyle_, other->upperstyle_);
  std::swap(lowerstyle_, other->lowerstyle_);
  std::swap(gender_, other->gender_);
  std::swap(ethnic_, other->ethnic_);
  feature_.Swap(&other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pedestrian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pedestrian_descriptor_;
  metadata.reflection = Pedestrian_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pedestrian

// optional int64 Id = 1;
void Pedestrian::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Pedestrian::id() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Id)
  return id_;
}
 void Pedestrian::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Id)
}

// optional .model.VideoMetadata Metadata = 2;
bool Pedestrian::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Pedestrian::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::model::VideoMetadata& Pedestrian::metadata() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::model::VideoMetadata* Pedestrian::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.Pedestrian.Metadata)
  return metadata_;
}
::model::VideoMetadata* Pedestrian::release_metadata() {
  // @@protoc_insertion_point(field_release:model.Pedestrian.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Pedestrian::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Pedestrian.Metadata)
}

// optional .model.CutboardImage Img = 3;
bool Pedestrian::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void Pedestrian::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::model::CutboardImage& Pedestrian::img() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::model::CutboardImage* Pedestrian::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.Pedestrian.Img)
  return img_;
}
::model::CutboardImage* Pedestrian::release_img() {
  // @@protoc_insertion_point(field_release:model.Pedestrian.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void Pedestrian::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Pedestrian.Img)
}

// optional uint32 Features = 4;
void Pedestrian::clear_features() {
  features_ = 0u;
}
 ::google::protobuf::uint32 Pedestrian::features() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Features)
  return features_;
}
 void Pedestrian::set_features(::google::protobuf::uint32 value) {
  
  features_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Features)
}

// optional uint32 Heads = 5;
void Pedestrian::clear_heads() {
  heads_ = 0u;
}
 ::google::protobuf::uint32 Pedestrian::heads() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Heads)
  return heads_;
}
 void Pedestrian::set_heads(::google::protobuf::uint32 value) {
  
  heads_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Heads)
}

// optional uint32 UpperColors = 6;
void Pedestrian::clear_uppercolors() {
  uppercolors_ = 0u;
}
 ::google::protobuf::uint32 Pedestrian::uppercolors() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.UpperColors)
  return uppercolors_;
}
 void Pedestrian::set_uppercolors(::google::protobuf::uint32 value) {
  
  uppercolors_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.UpperColors)
}

// optional uint32 LowerColors = 7;
void Pedestrian::clear_lowercolors() {
  lowercolors_ = 0u;
}
 ::google::protobuf::uint32 Pedestrian::lowercolors() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.LowerColors)
  return lowercolors_;
}
 void Pedestrian::set_lowercolors(::google::protobuf::uint32 value) {
  
  lowercolors_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.LowerColors)
}

// optional uint32 Age = 8;
void Pedestrian::clear_age() {
  age_ = 0u;
}
 ::google::protobuf::uint32 Pedestrian::age() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Age)
  return age_;
}
 void Pedestrian::set_age(::google::protobuf::uint32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Age)
}

// optional uint32 UpperStyle = 9;
void Pedestrian::clear_upperstyle() {
  upperstyle_ = 0u;
}
 ::google::protobuf::uint32 Pedestrian::upperstyle() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.UpperStyle)
  return upperstyle_;
}
 void Pedestrian::set_upperstyle(::google::protobuf::uint32 value) {
  
  upperstyle_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.UpperStyle)
}

// optional uint32 LowerStyle = 10;
void Pedestrian::clear_lowerstyle() {
  lowerstyle_ = 0u;
}
 ::google::protobuf::uint32 Pedestrian::lowerstyle() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.LowerStyle)
  return lowerstyle_;
}
 void Pedestrian::set_lowerstyle(::google::protobuf::uint32 value) {
  
  lowerstyle_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.LowerStyle)
}

// optional bool Gender = 11;
void Pedestrian::clear_gender() {
  gender_ = false;
}
 bool Pedestrian::gender() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Gender)
  return gender_;
}
 void Pedestrian::set_gender(bool value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Gender)
}

// optional bool Ethnic = 12;
void Pedestrian::clear_ethnic() {
  ethnic_ = false;
}
 bool Pedestrian::ethnic() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Ethnic)
  return ethnic_;
}
 void Pedestrian::set_ethnic(bool value) {
  
  ethnic_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Ethnic)
}

// optional bytes Feature = 13;
void Pedestrian::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Pedestrian::feature() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pedestrian::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Pedestrian.Feature)
}
 void Pedestrian::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Pedestrian.Feature)
}
 void Pedestrian::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Pedestrian.Feature)
}
 ::std::string* Pedestrian::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.Pedestrian.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Pedestrian::release_feature() {
  // @@protoc_insertion_point(field_release:model.Pedestrian.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pedestrian::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.Pedestrian.Feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pedestrians::kPedestrianFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pedestrians::Pedestrians()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Pedestrians)
}

void Pedestrians::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Pedestrians::Pedestrians(const Pedestrians& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Pedestrians)
}

void Pedestrians::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Pedestrians::~Pedestrians() {
  // @@protoc_insertion_point(destructor:model.Pedestrians)
  SharedDtor();
}

void Pedestrians::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pedestrians::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pedestrians::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pedestrians_descriptor_;
}

const Pedestrians& Pedestrians::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Pedestrians* Pedestrians::default_instance_ = NULL;

Pedestrians* Pedestrians::New(::google::protobuf::Arena* arena) const {
  Pedestrians* n = new Pedestrians;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pedestrians::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Pedestrians)
  pedestrian_.Clear();
}

bool Pedestrians::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Pedestrians)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .model.Pedestrian Pedestrian = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Pedestrian:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pedestrian()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Pedestrian;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Pedestrians)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Pedestrians)
  return false;
#undef DO_
}

void Pedestrians::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Pedestrians)
  // repeated .model.Pedestrian Pedestrian = 1;
  for (unsigned int i = 0, n = this->pedestrian_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pedestrian(i), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Pedestrians)
}

::google::protobuf::uint8* Pedestrians::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Pedestrians)
  // repeated .model.Pedestrian Pedestrian = 1;
  for (unsigned int i = 0, n = this->pedestrian_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pedestrian(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Pedestrians)
  return target;
}

int Pedestrians::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Pedestrians)
  int total_size = 0;

  // repeated .model.Pedestrian Pedestrian = 1;
  total_size += 1 * this->pedestrian_size();
  for (int i = 0; i < this->pedestrian_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pedestrian(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pedestrians::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Pedestrians)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pedestrians* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pedestrians>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Pedestrians)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Pedestrians)
    MergeFrom(*source);
  }
}

void Pedestrians::MergeFrom(const Pedestrians& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Pedestrians)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  pedestrian_.MergeFrom(from.pedestrian_);
}

void Pedestrians::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Pedestrians)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pedestrians::CopyFrom(const Pedestrians& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Pedestrians)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pedestrians::IsInitialized() const {

  return true;
}

void Pedestrians::Swap(Pedestrians* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pedestrians::InternalSwap(Pedestrians* other) {
  pedestrian_.UnsafeArenaSwap(&other->pedestrian_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pedestrians::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pedestrians_descriptor_;
  metadata.reflection = Pedestrians_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pedestrians

// repeated .model.Pedestrian Pedestrian = 1;
int Pedestrians::pedestrian_size() const {
  return pedestrian_.size();
}
void Pedestrians::clear_pedestrian() {
  pedestrian_.Clear();
}
const ::model::Pedestrian& Pedestrians::pedestrian(int index) const {
  // @@protoc_insertion_point(field_get:model.Pedestrians.Pedestrian)
  return pedestrian_.Get(index);
}
::model::Pedestrian* Pedestrians::mutable_pedestrian(int index) {
  // @@protoc_insertion_point(field_mutable:model.Pedestrians.Pedestrian)
  return pedestrian_.Mutable(index);
}
::model::Pedestrian* Pedestrians::add_pedestrian() {
  // @@protoc_insertion_point(field_add:model.Pedestrians.Pedestrian)
  return pedestrian_.Add();
}
::google::protobuf::RepeatedPtrField< ::model::Pedestrian >*
Pedestrians::mutable_pedestrian() {
  // @@protoc_insertion_point(field_mutable_list:model.Pedestrians.Pedestrian)
  return &pedestrian_;
}
const ::google::protobuf::RepeatedPtrField< ::model::Pedestrian >&
Pedestrians::pedestrian() const {
  // @@protoc_insertion_point(field_list:model.Pedestrians.Pedestrian)
  return pedestrian_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Face::kIdFieldNumber;
const int Face::kMetadataFieldNumber;
const int Face::kImgFieldNumber;
const int Face::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Face::Face()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Face)
}

void Face::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::model::VideoMetadata*>(&::model::VideoMetadata::default_instance());
  img_ = const_cast< ::model::CutboardImage*>(&::model::CutboardImage::default_instance());
}

Face::Face(const Face& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Face)
}

void Face::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  metadata_ = NULL;
  img_ = NULL;
  feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:model.Face)
  SharedDtor();
}

void Face::SharedDtor() {
  feature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
    delete img_;
  }
}

void Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Face_descriptor_;
}

const Face& Face::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Face* Face::default_instance_ = NULL;

Face* Face::New(::google::protobuf::Arena* arena) const {
  Face* n = new Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Face)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Metadata;
        break;
      }

      // optional .model.VideoMetadata Metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Img;
        break;
      }

      // optional .model.CutboardImage Img = 3;
      case 3: {
        if (tag == 26) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Feature;
        break;
      }

      // optional bytes Feature = 4;
      case 4: {
        if (tag == 34) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Face)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->img_, output);
  }

  // optional bytes Feature = 4;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->feature(), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Face)
}

::google::protobuf::uint8* Face::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Face)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->metadata_, target);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->img_, target);
  }

  // optional bytes Feature = 4;
  if (this->feature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->feature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Face)
  return target;
}

int Face::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Face)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional bytes Feature = 4;
  if (this->feature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->feature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Face* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Face>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Face)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Face)
    MergeFrom(*source);
  }
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::model::VideoMetadata::MergeFrom(from.metadata());
  }
  if (from.has_img()) {
    mutable_img()->::model::CutboardImage::MergeFrom(from.img());
  }
  if (from.feature().size() > 0) {

    feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_);
  }
}

void Face::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {

  return true;
}

void Face::Swap(Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Face::InternalSwap(Face* other) {
  std::swap(id_, other->id_);
  std::swap(metadata_, other->metadata_);
  std::swap(img_, other->img_);
  feature_.Swap(&other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Face_descriptor_;
  metadata.reflection = Face_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Face

// optional int64 Id = 1;
void Face::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Face::id() const {
  // @@protoc_insertion_point(field_get:model.Face.Id)
  return id_;
}
 void Face::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Face.Id)
}

// optional .model.VideoMetadata Metadata = 2;
bool Face::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Face::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::model::VideoMetadata& Face::metadata() const {
  // @@protoc_insertion_point(field_get:model.Face.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::model::VideoMetadata* Face::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.Face.Metadata)
  return metadata_;
}
::model::VideoMetadata* Face::release_metadata() {
  // @@protoc_insertion_point(field_release:model.Face.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Face::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Face.Metadata)
}

// optional .model.CutboardImage Img = 3;
bool Face::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void Face::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::model::CutboardImage& Face::img() const {
  // @@protoc_insertion_point(field_get:model.Face.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::model::CutboardImage* Face::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.Face.Img)
  return img_;
}
::model::CutboardImage* Face::release_img() {
  // @@protoc_insertion_point(field_release:model.Face.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void Face::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Face.Img)
}

// optional bytes Feature = 4;
void Face::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Face::feature() const {
  // @@protoc_insertion_point(field_get:model.Face.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Face::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Face.Feature)
}
 void Face::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Face.Feature)
}
 void Face::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Face.Feature)
}
 ::std::string* Face::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.Face.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Face::release_feature() {
  // @@protoc_insertion_point(field_release:model.Face.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Face::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.Face.Feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Faces::kFaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Faces::Faces()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Faces)
}

void Faces::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Faces::Faces(const Faces& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Faces)
}

void Faces::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Faces::~Faces() {
  // @@protoc_insertion_point(destructor:model.Faces)
  SharedDtor();
}

void Faces::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faces::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faces::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faces_descriptor_;
}

const Faces& Faces::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Faces* Faces::default_instance_ = NULL;

Faces* Faces::New(::google::protobuf::Arena* arena) const {
  Faces* n = new Faces;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Faces::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Faces)
  face_.Clear();
}

bool Faces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Faces)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .model.Face Face = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_face()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Face;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Faces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Faces)
  return false;
#undef DO_
}

void Faces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Faces)
  // repeated .model.Face Face = 1;
  for (unsigned int i = 0, n = this->face_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->face(i), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Faces)
}

::google::protobuf::uint8* Faces::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Faces)
  // repeated .model.Face Face = 1;
  for (unsigned int i = 0, n = this->face_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->face(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Faces)
  return target;
}

int Faces::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Faces)
  int total_size = 0;

  // repeated .model.Face Face = 1;
  total_size += 1 * this->face_size();
  for (int i = 0; i < this->face_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->face(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faces::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Faces)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Faces* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Faces>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Faces)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Faces)
    MergeFrom(*source);
  }
}

void Faces::MergeFrom(const Faces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Faces)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  face_.MergeFrom(from.face_);
}

void Faces::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Faces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faces::CopyFrom(const Faces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Faces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faces::IsInitialized() const {

  return true;
}

void Faces::Swap(Faces* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Faces::InternalSwap(Faces* other) {
  face_.UnsafeArenaSwap(&other->face_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Faces::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faces_descriptor_;
  metadata.reflection = Faces_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Faces

// repeated .model.Face Face = 1;
int Faces::face_size() const {
  return face_.size();
}
void Faces::clear_face() {
  face_.Clear();
}
const ::model::Face& Faces::face(int index) const {
  // @@protoc_insertion_point(field_get:model.Faces.Face)
  return face_.Get(index);
}
::model::Face* Faces::mutable_face(int index) {
  // @@protoc_insertion_point(field_mutable:model.Faces.Face)
  return face_.Mutable(index);
}
::model::Face* Faces::add_face() {
  // @@protoc_insertion_point(field_add:model.Faces.Face)
  return face_.Add();
}
::google::protobuf::RepeatedPtrField< ::model::Face >*
Faces::mutable_face() {
  // @@protoc_insertion_point(field_mutable_list:model.Faces.Face)
  return &face_;
}
const ::google::protobuf::RepeatedPtrField< ::model::Face >&
Faces::face() const {
  // @@protoc_insertion_point(field_list:model.Faces.Face)
  return face_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoMetadata::kTimestampFieldNumber;
const int VideoMetadata::kDurationFieldNumber;
const int VideoMetadata::kSensorIdFieldNumber;
const int VideoMetadata::kSensorNameFieldNumber;
const int VideoMetadata::kSensorUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoMetadata::VideoMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.VideoMetadata)
}

void VideoMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VideoMetadata::VideoMetadata(const VideoMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.VideoMetadata)
}

void VideoMetadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  duration_ = 0;
  sensorid_ = 0;
  sensorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensorurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VideoMetadata::~VideoMetadata() {
  // @@protoc_insertion_point(destructor:model.VideoMetadata)
  SharedDtor();
}

void VideoMetadata::SharedDtor() {
  sensorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensorurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VideoMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoMetadata_descriptor_;
}

const VideoMetadata& VideoMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

VideoMetadata* VideoMetadata::default_instance_ = NULL;

VideoMetadata* VideoMetadata::New(::google::protobuf::Arena* arena) const {
  VideoMetadata* n = new VideoMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:model.VideoMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VideoMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VideoMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, sensorid_);
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensorurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool VideoMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.VideoMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Duration;
        break;
      }

      // optional int32 Duration = 2;
      case 2: {
        if (tag == 16) {
         parse_Duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SensorId;
        break;
      }

      // optional int32 SensorId = 3;
      case 3: {
        if (tag == 24) {
         parse_SensorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensorid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SensorName;
        break;
      }

      // optional string SensorName = 4;
      case 4: {
        if (tag == 34) {
         parse_SensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "model.VideoMetadata.SensorName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SensorUrl;
        break;
      }

      // optional string SensorUrl = 5;
      case 5: {
        if (tag == 42) {
         parse_SensorUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensorurl().data(), this->sensorurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "model.VideoMetadata.SensorUrl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.VideoMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.VideoMetadata)
  return false;
#undef DO_
}

void VideoMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.VideoMetadata)
  // optional int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 Duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional int32 SensorId = 3;
  if (this->sensorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sensorid(), output);
  }

  // optional string SensorName = 4;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.VideoMetadata.SensorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sensorname(), output);
  }

  // optional string SensorUrl = 5;
  if (this->sensorurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorurl().data(), this->sensorurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.VideoMetadata.SensorUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sensorurl(), output);
  }

  // @@protoc_insertion_point(serialize_end:model.VideoMetadata)
}

::google::protobuf::uint8* VideoMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.VideoMetadata)
  // optional int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 Duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional int32 SensorId = 3;
  if (this->sensorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sensorid(), target);
  }

  // optional string SensorName = 4;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.VideoMetadata.SensorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sensorname(), target);
  }

  // optional string SensorUrl = 5;
  if (this->sensorurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorurl().data(), this->sensorurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.VideoMetadata.SensorUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sensorurl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.VideoMetadata)
  return target;
}

int VideoMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.VideoMetadata)
  int total_size = 0;

  // optional int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int32 Duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  // optional int32 SensorId = 3;
  if (this->sensorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensorid());
  }

  // optional string SensorName = 4;
  if (this->sensorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensorname());
  }

  // optional string SensorUrl = 5;
  if (this->sensorurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensorurl());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.VideoMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VideoMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.VideoMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.VideoMetadata)
    MergeFrom(*source);
  }
}

void VideoMetadata::MergeFrom(const VideoMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.VideoMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.sensorid() != 0) {
    set_sensorid(from.sensorid());
  }
  if (from.sensorname().size() > 0) {

    sensorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensorname_);
  }
  if (from.sensorurl().size() > 0) {

    sensorurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensorurl_);
  }
}

void VideoMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.VideoMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoMetadata::CopyFrom(const VideoMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.VideoMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMetadata::IsInitialized() const {

  return true;
}

void VideoMetadata::Swap(VideoMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoMetadata::InternalSwap(VideoMetadata* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(duration_, other->duration_);
  std::swap(sensorid_, other->sensorid_);
  sensorname_.Swap(&other->sensorname_);
  sensorurl_.Swap(&other->sensorurl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoMetadata_descriptor_;
  metadata.reflection = VideoMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoMetadata

// optional int64 Timestamp = 1;
void VideoMetadata::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 VideoMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.Timestamp)
  return timestamp_;
}
 void VideoMetadata::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:model.VideoMetadata.Timestamp)
}

// optional int32 Duration = 2;
void VideoMetadata::clear_duration() {
  duration_ = 0;
}
 ::google::protobuf::int32 VideoMetadata::duration() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.Duration)
  return duration_;
}
 void VideoMetadata::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:model.VideoMetadata.Duration)
}

// optional int32 SensorId = 3;
void VideoMetadata::clear_sensorid() {
  sensorid_ = 0;
}
 ::google::protobuf::int32 VideoMetadata::sensorid() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.SensorId)
  return sensorid_;
}
 void VideoMetadata::set_sensorid(::google::protobuf::int32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:model.VideoMetadata.SensorId)
}

// optional string SensorName = 4;
void VideoMetadata::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VideoMetadata::sensorname() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.SensorName)
  return sensorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoMetadata::set_sensorname(const ::std::string& value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.VideoMetadata.SensorName)
}
 void VideoMetadata::set_sensorname(const char* value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.VideoMetadata.SensorName)
}
 void VideoMetadata::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.VideoMetadata.SensorName)
}
 ::std::string* VideoMetadata::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:model.VideoMetadata.SensorName)
  return sensorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VideoMetadata::release_sensorname() {
  // @@protoc_insertion_point(field_release:model.VideoMetadata.SensorName)
  
  return sensorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoMetadata::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname != NULL) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:model.VideoMetadata.SensorName)
}

// optional string SensorUrl = 5;
void VideoMetadata::clear_sensorurl() {
  sensorurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VideoMetadata::sensorurl() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.SensorUrl)
  return sensorurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoMetadata::set_sensorurl(const ::std::string& value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.VideoMetadata.SensorUrl)
}
 void VideoMetadata::set_sensorurl(const char* value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.VideoMetadata.SensorUrl)
}
 void VideoMetadata::set_sensorurl(const char* value, size_t size) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.VideoMetadata.SensorUrl)
}
 ::std::string* VideoMetadata::mutable_sensorurl() {
  
  // @@protoc_insertion_point(field_mutable:model.VideoMetadata.SensorUrl)
  return sensorurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VideoMetadata::release_sensorurl() {
  // @@protoc_insertion_point(field_release:model.VideoMetadata.SensorUrl)
  
  return sensorurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoMetadata::set_allocated_sensorurl(::std::string* sensorurl) {
  if (sensorurl != NULL) {
    
  } else {
    
  }
  sensorurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorurl);
  // @@protoc_insertion_point(field_set_allocated:model.VideoMetadata.SensorUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kIdFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kBinDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Image)
}

void Image::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Image::Image(const Image& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Image)
}

void Image::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:model.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Image)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Image, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Image*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "model.Image.Id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Width;
        break;
      }

      // optional int32 Width = 2;
      case 2: {
        if (tag == 16) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Height;
        break;
      }

      // optional int32 Height = 3;
      case 3: {
        if (tag == 24) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BinData;
        break;
      }

      // optional bytes BinData = 4;
      case 4: {
        if (tag == 34) {
         parse_BinData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bindata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Image)
  // optional string Id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.Image.Id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 Width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 Height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional bytes BinData = 4;
  if (this->bindata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bindata(), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Image)
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Image)
  // optional string Id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.Image.Id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 Width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 Height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional bytes BinData = 4;
  if (this->bindata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bindata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Image)
  return target;
}

int Image::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Image)
  int total_size = 0;

  // optional string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional int32 Width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 Height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional bytes BinData = 4;
  if (this->bindata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bindata());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Image* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.bindata().size() > 0) {

    bindata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindata_);
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {

  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  id_.Swap(&other->id_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  bindata_.Swap(&other->bindata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// optional string Id = 1;
void Image::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Image::id() const {
  // @@protoc_insertion_point(field_get:model.Image.Id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Image.Id)
}
 void Image::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Image.Id)
}
 void Image::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Image.Id)
}
 ::std::string* Image::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:model.Image.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_id() {
  // @@protoc_insertion_point(field_release:model.Image.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:model.Image.Id)
}

// optional int32 Width = 2;
void Image::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:model.Image.Width)
  return width_;
}
 void Image::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:model.Image.Width)
}

// optional int32 Height = 3;
void Image::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:model.Image.Height)
  return height_;
}
 void Image::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:model.Image.Height)
}

// optional bytes BinData = 4;
void Image::clear_bindata() {
  bindata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Image::bindata() const {
  // @@protoc_insertion_point(field_get:model.Image.BinData)
  return bindata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_bindata(const ::std::string& value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Image.BinData)
}
 void Image::set_bindata(const char* value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Image.BinData)
}
 void Image::set_bindata(const void* value, size_t size) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Image.BinData)
}
 ::std::string* Image::mutable_bindata() {
  
  // @@protoc_insertion_point(field_mutable:model.Image.BinData)
  return bindata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_bindata() {
  // @@protoc_insertion_point(field_release:model.Image.BinData)
  
  return bindata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_bindata(::std::string* bindata) {
  if (bindata != NULL) {
    
  } else {
    
  }
  bindata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindata);
  // @@protoc_insertion_point(field_set_allocated:model.Image.BinData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CutboardImage::kMetadataFieldNumber;
const int CutboardImage::kCutboardFieldNumber;
const int CutboardImage::kImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CutboardImage::CutboardImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.CutboardImage)
}

void CutboardImage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::model::VideoMetadata*>(&::model::VideoMetadata::default_instance());
  cutboard_ = const_cast< ::model::Cutboard*>(&::model::Cutboard::default_instance());
  img_ = const_cast< ::model::Image*>(&::model::Image::default_instance());
}

CutboardImage::CutboardImage(const CutboardImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.CutboardImage)
}

void CutboardImage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  metadata_ = NULL;
  cutboard_ = NULL;
  img_ = NULL;
}

CutboardImage::~CutboardImage() {
  // @@protoc_insertion_point(destructor:model.CutboardImage)
  SharedDtor();
}

void CutboardImage::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
    delete cutboard_;
    delete img_;
  }
}

void CutboardImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CutboardImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CutboardImage_descriptor_;
}

const CutboardImage& CutboardImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

CutboardImage* CutboardImage::default_instance_ = NULL;

CutboardImage* CutboardImage::New(::google::protobuf::Arena* arena) const {
  CutboardImage* n = new CutboardImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CutboardImage::Clear() {
// @@protoc_insertion_point(message_clear_start:model.CutboardImage)
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}

bool CutboardImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.CutboardImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .model.VideoMetadata Metadata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Cutboard;
        break;
      }

      // optional .model.Cutboard Cutboard = 2;
      case 2: {
        if (tag == 18) {
         parse_Cutboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Img;
        break;
      }

      // optional .model.Image Img = 3;
      case 3: {
        if (tag == 26) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.CutboardImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.CutboardImage)
  return false;
#undef DO_
}

void CutboardImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.CutboardImage)
  // optional .model.VideoMetadata Metadata = 1;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->metadata_, output);
  }

  // optional .model.Cutboard Cutboard = 2;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cutboard_, output);
  }

  // optional .model.Image Img = 3;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->img_, output);
  }

  // @@protoc_insertion_point(serialize_end:model.CutboardImage)
}

::google::protobuf::uint8* CutboardImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.CutboardImage)
  // optional .model.VideoMetadata Metadata = 1;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->metadata_, target);
  }

  // optional .model.Cutboard Cutboard = 2;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->cutboard_, target);
  }

  // optional .model.Image Img = 3;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->img_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.CutboardImage)
  return target;
}

int CutboardImage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.CutboardImage)
  int total_size = 0;

  // optional .model.VideoMetadata Metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional .model.Cutboard Cutboard = 2;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  // optional .model.Image Img = 3;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CutboardImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.CutboardImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CutboardImage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CutboardImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.CutboardImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.CutboardImage)
    MergeFrom(*source);
  }
}

void CutboardImage::MergeFrom(const CutboardImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.CutboardImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_metadata()) {
    mutable_metadata()->::model::VideoMetadata::MergeFrom(from.metadata());
  }
  if (from.has_cutboard()) {
    mutable_cutboard()->::model::Cutboard::MergeFrom(from.cutboard());
  }
  if (from.has_img()) {
    mutable_img()->::model::Image::MergeFrom(from.img());
  }
}

void CutboardImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.CutboardImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutboardImage::CopyFrom(const CutboardImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.CutboardImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutboardImage::IsInitialized() const {

  return true;
}

void CutboardImage::Swap(CutboardImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CutboardImage::InternalSwap(CutboardImage* other) {
  std::swap(metadata_, other->metadata_);
  std::swap(cutboard_, other->cutboard_);
  std::swap(img_, other->img_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CutboardImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CutboardImage_descriptor_;
  metadata.reflection = CutboardImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CutboardImage

// optional .model.VideoMetadata Metadata = 1;
bool CutboardImage::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void CutboardImage::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::model::VideoMetadata& CutboardImage::metadata() const {
  // @@protoc_insertion_point(field_get:model.CutboardImage.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::model::VideoMetadata* CutboardImage::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.CutboardImage.Metadata)
  return metadata_;
}
::model::VideoMetadata* CutboardImage::release_metadata() {
  // @@protoc_insertion_point(field_release:model.CutboardImage.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void CutboardImage::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.CutboardImage.Metadata)
}

// optional .model.Cutboard Cutboard = 2;
bool CutboardImage::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void CutboardImage::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::model::Cutboard& CutboardImage::cutboard() const {
  // @@protoc_insertion_point(field_get:model.CutboardImage.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::model::Cutboard* CutboardImage::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:model.CutboardImage.Cutboard)
  return cutboard_;
}
::model::Cutboard* CutboardImage::release_cutboard() {
  // @@protoc_insertion_point(field_release:model.CutboardImage.Cutboard)
  
  ::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void CutboardImage::set_allocated_cutboard(::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.CutboardImage.Cutboard)
}

// optional .model.Image Img = 3;
bool CutboardImage::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void CutboardImage::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::model::Image& CutboardImage::img() const {
  // @@protoc_insertion_point(field_get:model.CutboardImage.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::model::Image* CutboardImage::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:model.CutboardImage.Img)
  return img_;
}
::model::Image* CutboardImage::release_img() {
  // @@protoc_insertion_point(field_release:model.CutboardImage.Img)
  
  ::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
void CutboardImage::set_allocated_img(::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.CutboardImage.Img)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kIdFieldNumber;
const int Color::kConfidenceFieldNumber;
const int Color::kColorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Color)
}

void Color::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Color::Color(const Color& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Color)
}

void Color::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  confidence_ = 0;
  colorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:model.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  colorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Color)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Color, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Color*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, confidence_);
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 2;
      case 2: {
        if (tag == 21) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ColorName;
        break;
      }

      // optional string ColorName = 3;
      case 3: {
        if (tag == 26) {
         parse_ColorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_colorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->colorname().data(), this->colorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "model.Color.ColorName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Color)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // optional string ColorName = 3;
  if (this->colorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->colorname().data(), this->colorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.Color.ColorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->colorname(), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Color)
}

::google::protobuf::uint8* Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Color)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // optional string ColorName = 3;
  if (this->colorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->colorname().data(), this->colorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "model.Color.ColorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->colorname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Color)
  return target;
}

int Color::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Color)
  int total_size = 0;

  // optional int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional string ColorName = 3;
  if (this->colorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->colorname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Color* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.colorname().size() > 0) {

    colorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.colorname_);
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {

  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(id_, other->id_);
  std::swap(confidence_, other->confidence_);
  colorname_.Swap(&other->colorname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// optional int32 Id = 1;
void Color::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Color::id() const {
  // @@protoc_insertion_point(field_get:model.Color.Id)
  return id_;
}
 void Color::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Color.Id)
}

// optional float Confidence = 2;
void Color::clear_confidence() {
  confidence_ = 0;
}
 float Color::confidence() const {
  // @@protoc_insertion_point(field_get:model.Color.Confidence)
  return confidence_;
}
 void Color::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:model.Color.Confidence)
}

// optional string ColorName = 3;
void Color::clear_colorname() {
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Color::colorname() const {
  // @@protoc_insertion_point(field_get:model.Color.ColorName)
  return colorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Color::set_colorname(const ::std::string& value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Color.ColorName)
}
 void Color::set_colorname(const char* value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Color.ColorName)
}
 void Color::set_colorname(const char* value, size_t size) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Color.ColorName)
}
 ::std::string* Color::mutable_colorname() {
  
  // @@protoc_insertion_point(field_mutable:model.Color.ColorName)
  return colorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Color::release_colorname() {
  // @@protoc_insertion_point(field_release:model.Color.ColorName)
  
  return colorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Color::set_allocated_colorname(::std::string* colorname) {
  if (colorname != NULL) {
    
  } else {
    
  }
  colorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colorname);
  // @@protoc_insertion_point(field_set_allocated:model.Color.ColorName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cutboard::kXFieldNumber;
const int Cutboard::kYFieldNumber;
const int Cutboard::kWidthFieldNumber;
const int Cutboard::kHeightFieldNumber;
const int Cutboard::kResWidthFieldNumber;
const int Cutboard::kResHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cutboard::Cutboard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.Cutboard)
}

void Cutboard::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Cutboard::Cutboard(const Cutboard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.Cutboard)
}

void Cutboard::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  width_ = 0u;
  height_ = 0u;
  reswidth_ = 0u;
  resheight_ = 0u;
}

Cutboard::~Cutboard() {
  // @@protoc_insertion_point(destructor:model.Cutboard)
  SharedDtor();
}

void Cutboard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cutboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cutboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cutboard_descriptor_;
}

const Cutboard& Cutboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

Cutboard* Cutboard::default_instance_ = NULL;

Cutboard* Cutboard::New(::google::protobuf::Arena* arena) const {
  Cutboard* n = new Cutboard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cutboard::Clear() {
// @@protoc_insertion_point(message_clear_start:model.Cutboard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Cutboard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Cutboard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, resheight_);

#undef ZR_HELPER_
#undef ZR_

}

bool Cutboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.Cutboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional uint32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Width;
        break;
      }

      // optional uint32 Width = 3;
      case 3: {
        if (tag == 24) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Height;
        break;
      }

      // optional uint32 Height = 4;
      case 4: {
        if (tag == 32) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ResWidth;
        break;
      }

      // optional uint32 ResWidth = 5;
      case 5: {
        if (tag == 40) {
         parse_ResWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reswidth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ResHeight;
        break;
      }

      // optional uint32 ResHeight = 6;
      case 6: {
        if (tag == 48) {
         parse_ResHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resheight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.Cutboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.Cutboard)
  return false;
#undef DO_
}

void Cutboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.Cutboard)
  // optional uint32 X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional uint32 Width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 Height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional uint32 ResWidth = 5;
  if (this->reswidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reswidth(), output);
  }

  // optional uint32 ResHeight = 6;
  if (this->resheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->resheight(), output);
  }

  // @@protoc_insertion_point(serialize_end:model.Cutboard)
}

::google::protobuf::uint8* Cutboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.Cutboard)
  // optional uint32 X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional uint32 Width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 Height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional uint32 ResWidth = 5;
  if (this->reswidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reswidth(), target);
  }

  // optional uint32 ResHeight = 6;
  if (this->resheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->resheight(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.Cutboard)
  return target;
}

int Cutboard::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.Cutboard)
  int total_size = 0;

  // optional uint32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // optional uint32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  // optional uint32 Width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // optional uint32 Height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // optional uint32 ResWidth = 5;
  if (this->reswidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reswidth());
  }

  // optional uint32 ResHeight = 6;
  if (this->resheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resheight());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cutboard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.Cutboard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Cutboard* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Cutboard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.Cutboard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.Cutboard)
    MergeFrom(*source);
  }
}

void Cutboard::MergeFrom(const Cutboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.Cutboard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.reswidth() != 0) {
    set_reswidth(from.reswidth());
  }
  if (from.resheight() != 0) {
    set_resheight(from.resheight());
  }
}

void Cutboard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.Cutboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cutboard::CopyFrom(const Cutboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.Cutboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cutboard::IsInitialized() const {

  return true;
}

void Cutboard::Swap(Cutboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cutboard::InternalSwap(Cutboard* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(reswidth_, other->reswidth_);
  std::swap(resheight_, other->resheight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cutboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cutboard_descriptor_;
  metadata.reflection = Cutboard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cutboard

// optional uint32 X = 1;
void Cutboard::clear_x() {
  x_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::x() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.X)
  return x_;
}
 void Cutboard::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.X)
}

// optional uint32 Y = 2;
void Cutboard::clear_y() {
  y_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::y() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.Y)
  return y_;
}
 void Cutboard::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.Y)
}

// optional uint32 Width = 3;
void Cutboard::clear_width() {
  width_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::width() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.Width)
  return width_;
}
 void Cutboard::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.Width)
}

// optional uint32 Height = 4;
void Cutboard::clear_height() {
  height_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::height() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.Height)
  return height_;
}
 void Cutboard::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.Height)
}

// optional uint32 ResWidth = 5;
void Cutboard::clear_reswidth() {
  reswidth_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::reswidth() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.ResWidth)
  return reswidth_;
}
 void Cutboard::set_reswidth(::google::protobuf::uint32 value) {
  
  reswidth_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.ResWidth)
}

// optional uint32 ResHeight = 6;
void Cutboard::clear_resheight() {
  resheight_ = 0u;
}
 ::google::protobuf::uint32 Cutboard::resheight() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.ResHeight)
  return resheight_;
}
 void Cutboard::set_resheight(::google::protobuf::uint32 value) {
  
  resheight_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.ResHeight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseEntity::kIdFieldNumber;
const int BaseEntity::kMetadataFieldNumber;
const int BaseEntity::kImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseEntity::BaseEntity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.BaseEntity)
}

void BaseEntity::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::model::VideoMetadata*>(&::model::VideoMetadata::default_instance());
  img_ = const_cast< ::model::CutboardImage*>(&::model::CutboardImage::default_instance());
}

BaseEntity::BaseEntity(const BaseEntity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.BaseEntity)
}

void BaseEntity::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  metadata_ = NULL;
  img_ = NULL;
}

BaseEntity::~BaseEntity() {
  // @@protoc_insertion_point(destructor:model.BaseEntity)
  SharedDtor();
}

void BaseEntity::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
    delete img_;
  }
}

void BaseEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseEntity_descriptor_;
}

const BaseEntity& BaseEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

BaseEntity* BaseEntity::default_instance_ = NULL;

BaseEntity* BaseEntity::New(::google::protobuf::Arena* arena) const {
  BaseEntity* n = new BaseEntity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:model.BaseEntity)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}

bool BaseEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.BaseEntity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Metadata;
        break;
      }

      // optional .model.VideoMetadata Metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Img;
        break;
      }

      // optional .model.CutboardImage Img = 3;
      case 3: {
        if (tag == 26) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.BaseEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.BaseEntity)
  return false;
#undef DO_
}

void BaseEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.BaseEntity)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->img_, output);
  }

  // @@protoc_insertion_point(serialize_end:model.BaseEntity)
}

::google::protobuf::uint8* BaseEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.BaseEntity)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->metadata_, target);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->img_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.BaseEntity)
  return target;
}

int BaseEntity::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.BaseEntity)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .model.VideoMetadata Metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional .model.CutboardImage Img = 3;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseEntity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.BaseEntity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BaseEntity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseEntity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.BaseEntity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.BaseEntity)
    MergeFrom(*source);
  }
}

void BaseEntity::MergeFrom(const BaseEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.BaseEntity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::model::VideoMetadata::MergeFrom(from.metadata());
  }
  if (from.has_img()) {
    mutable_img()->::model::CutboardImage::MergeFrom(from.img());
  }
}

void BaseEntity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.BaseEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseEntity::CopyFrom(const BaseEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.BaseEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseEntity::IsInitialized() const {

  return true;
}

void BaseEntity::Swap(BaseEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseEntity::InternalSwap(BaseEntity* other) {
  std::swap(id_, other->id_);
  std::swap(metadata_, other->metadata_);
  std::swap(img_, other->img_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseEntity_descriptor_;
  metadata.reflection = BaseEntity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseEntity

// optional int64 Id = 1;
void BaseEntity::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BaseEntity::id() const {
  // @@protoc_insertion_point(field_get:model.BaseEntity.Id)
  return id_;
}
 void BaseEntity::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.BaseEntity.Id)
}

// optional .model.VideoMetadata Metadata = 2;
bool BaseEntity::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void BaseEntity::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::model::VideoMetadata& BaseEntity::metadata() const {
  // @@protoc_insertion_point(field_get:model.BaseEntity.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::model::VideoMetadata* BaseEntity::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.BaseEntity.Metadata)
  return metadata_;
}
::model::VideoMetadata* BaseEntity::release_metadata() {
  // @@protoc_insertion_point(field_release:model.BaseEntity.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void BaseEntity::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.BaseEntity.Metadata)
}

// optional .model.CutboardImage Img = 3;
bool BaseEntity::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void BaseEntity::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::model::CutboardImage& BaseEntity::img() const {
  // @@protoc_insertion_point(field_get:model.BaseEntity.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::model::CutboardImage* BaseEntity::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.BaseEntity.Img)
  return img_;
}
::model::CutboardImage* BaseEntity::release_img() {
  // @@protoc_insertion_point(field_release:model.BaseEntity.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void BaseEntity::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.BaseEntity.Img)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureVector::kIdFieldNumber;
const int FeatureVector::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureVector::FeatureVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.FeatureVector)
}

void FeatureVector::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeatureVector::FeatureVector(const FeatureVector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.FeatureVector)
}

void FeatureVector::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FeatureVector::~FeatureVector() {
  // @@protoc_insertion_point(destructor:model.FeatureVector)
  SharedDtor();
}

void FeatureVector::SharedDtor() {
  feature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FeatureVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureVector_descriptor_;
}

const FeatureVector& FeatureVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

FeatureVector* FeatureVector::default_instance_ = NULL;

FeatureVector* FeatureVector::New(::google::protobuf::Arena* arena) const {
  FeatureVector* n = new FeatureVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureVector::Clear() {
// @@protoc_insertion_point(message_clear_start:model.FeatureVector)
  id_ = GOOGLE_LONGLONG(0);
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FeatureVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.FeatureVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Feature;
        break;
      }

      // optional bytes Feature = 2;
      case 2: {
        if (tag == 18) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:model.FeatureVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.FeatureVector)
  return false;
#undef DO_
}

void FeatureVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.FeatureVector)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes Feature = 2;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->feature(), output);
  }

  // @@protoc_insertion_point(serialize_end:model.FeatureVector)
}

::google::protobuf::uint8* FeatureVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.FeatureVector)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes Feature = 2;
  if (this->feature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->feature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:model.FeatureVector)
  return target;
}

int FeatureVector::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.FeatureVector)
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional bytes Feature = 2;
  if (this->feature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->feature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.FeatureVector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureVector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.FeatureVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.FeatureVector)
    MergeFrom(*source);
  }
}

void FeatureVector::MergeFrom(const FeatureVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.FeatureVector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.feature().size() > 0) {

    feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_);
  }
}

void FeatureVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.FeatureVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureVector::CopyFrom(const FeatureVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.FeatureVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureVector::IsInitialized() const {

  return true;
}

void FeatureVector::Swap(FeatureVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureVector::InternalSwap(FeatureVector* other) {
  std::swap(id_, other->id_);
  feature_.Swap(&other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureVector_descriptor_;
  metadata.reflection = FeatureVector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureVector

// optional int64 Id = 1;
void FeatureVector::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FeatureVector::id() const {
  // @@protoc_insertion_point(field_get:model.FeatureVector.Id)
  return id_;
}
 void FeatureVector::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.FeatureVector.Id)
}

// optional bytes Feature = 2;
void FeatureVector::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FeatureVector::feature() const {
  // @@protoc_insertion_point(field_get:model.FeatureVector.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureVector::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.FeatureVector.Feature)
}
 void FeatureVector::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.FeatureVector.Feature)
}
 void FeatureVector::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.FeatureVector.Feature)
}
 ::std::string* FeatureVector::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.FeatureVector.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeatureVector::release_feature() {
  // @@protoc_insertion_point(field_release:model.FeatureVector.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureVector::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.FeatureVector.Feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NullMessage::NullMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:model.NullMessage)
}

void NullMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NullMessage::NullMessage(const NullMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:model.NullMessage)
}

void NullMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NullMessage::~NullMessage() {
  // @@protoc_insertion_point(destructor:model.NullMessage)
  SharedDtor();
}

void NullMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NullMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NullMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NullMessage_descriptor_;
}

const NullMessage& NullMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepdatasingle_2eproto();
  return *default_instance_;
}

NullMessage* NullMessage::default_instance_ = NULL;

NullMessage* NullMessage::New(::google::protobuf::Arena* arena) const {
  NullMessage* n = new NullMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NullMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:model.NullMessage)
}

bool NullMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:model.NullMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:model.NullMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:model.NullMessage)
  return false;
#undef DO_
}

void NullMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:model.NullMessage)
  // @@protoc_insertion_point(serialize_end:model.NullMessage)
}

::google::protobuf::uint8* NullMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:model.NullMessage)
  // @@protoc_insertion_point(serialize_to_array_end:model.NullMessage)
  return target;
}

int NullMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:model.NullMessage)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NullMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:model.NullMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NullMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NullMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:model.NullMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:model.NullMessage)
    MergeFrom(*source);
  }
}

void NullMessage::MergeFrom(const NullMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model.NullMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void NullMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:model.NullMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullMessage::CopyFrom(const NullMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model.NullMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullMessage::IsInitialized() const {

  return true;
}

void NullMessage::Swap(NullMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NullMessage::InternalSwap(NullMessage* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NullMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NullMessage_descriptor_;
  metadata.reflection = NullMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NullMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model

// @@protoc_insertion_point(global_scope)
