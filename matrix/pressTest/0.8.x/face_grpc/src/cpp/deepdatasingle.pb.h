// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepdatasingle.proto

#ifndef PROTOBUF_deepdatasingle_2eproto__INCLUDED
#define PROTOBUF_deepdatasingle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_deepdatasingle_2eproto();
void protobuf_AssignDesc_deepdatasingle_2eproto();
void protobuf_ShutdownFile_deepdatasingle_2eproto();

class BaseEntity;
class Bicycle;
class Bicycles;
class Color;
class Cutboard;
class CutboardImage;
class Face;
class Faces;
class FeatureVector;
class Image;
class LicensePlate;
class NullMessage;
class Pedestrian;
class Pedestrians;
class Tricycle;
class Tricycles;
class Vehicle;
class VehicleModelType;
class VehicleSymbol;
class Vehicles;
class VideoMetadata;

enum ObjType {
  UNKNOWNOBJ = 0,
  VEHICLE = 1,
  BICYCLE = 2,
  TRICYCLE = 3,
  PEDESTRIAN = 4,
  FACE = 1024,
  LICENSEPLATE = 1025,
  VEHICLE_VECTOR = 2048,
  BICYCLE_VECTOR = 2049,
  TRICYCLE_VECTOR = 2050,
  PEDESTRIAN_VECTOR = 2051,
  FACE_VECTOR = 3072,
  VEHICLE_CUTBOARD = 4096,
  BICYCLE_CUTBOARD = 4097,
  TRICYCLE_CUTBOARD = 4098,
  PEDESTRIAN_CUTBOARD = 4099,
  FACE_CUTBOARD = 5120,
  ObjType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjType_IsValid(int value);
const ObjType ObjType_MIN = UNKNOWNOBJ;
const ObjType ObjType_MAX = FACE_CUTBOARD;
const int ObjType_ARRAYSIZE = ObjType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjType_descriptor();
inline const ::std::string& ObjType_Name(ObjType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjType_descriptor(), value);
}
inline bool ObjType_Parse(
    const ::std::string& name, ObjType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjType>(
    ObjType_descriptor(), name, value);
}
enum DataFmtType {
  UNKNOWNFMT = 0,
  JSON = 1,
  PROTOBUF = 2,
  CSV = 3,
  PDF = 4,
  DataFmtType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataFmtType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataFmtType_IsValid(int value);
const DataFmtType DataFmtType_MIN = UNKNOWNFMT;
const DataFmtType DataFmtType_MAX = PDF;
const int DataFmtType_ARRAYSIZE = DataFmtType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataFmtType_descriptor();
inline const ::std::string& DataFmtType_Name(DataFmtType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataFmtType_descriptor(), value);
}
inline bool DataFmtType_Parse(
    const ::std::string& name, DataFmtType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataFmtType>(
    DataFmtType_descriptor(), name, value);
}
// ===================================================================

class VehicleModelType : public ::google::protobuf::Message {
 public:
  VehicleModelType();
  virtual ~VehicleModelType();

  VehicleModelType(const VehicleModelType& from);

  inline VehicleModelType& operator=(const VehicleModelType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleModelType& default_instance();

  void Swap(VehicleModelType* other);

  // implements Message ----------------------------------------------

  inline VehicleModelType* New() const { return New(NULL); }

  VehicleModelType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleModelType& from);
  void MergeFrom(const VehicleModelType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleModelType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int32 BrandId = 2;
  void clear_brandid();
  static const int kBrandIdFieldNumber = 2;
  ::google::protobuf::int32 brandid() const;
  void set_brandid(::google::protobuf::int32 value);

  // optional int32 SubBrandId = 3;
  void clear_subbrandid();
  static const int kSubBrandIdFieldNumber = 3;
  ::google::protobuf::int32 subbrandid() const;
  void set_subbrandid(::google::protobuf::int32 value);

  // optional int32 ModelYearId = 4;
  void clear_modelyearid();
  static const int kModelYearIdFieldNumber = 4;
  ::google::protobuf::int32 modelyearid() const;
  void set_modelyearid(::google::protobuf::int32 value);

  // optional float Confidence = 5;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 5;
  float confidence() const;
  void set_confidence(float value);

  // optional int32 Type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string Model = 7;
  void clear_model();
  static const int kModelFieldNumber = 7;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // @@protoc_insertion_point(class_scope:model.VehicleModelType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 brandid_;
  ::google::protobuf::int32 subbrandid_;
  ::google::protobuf::int32 modelyearid_;
  float confidence_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static VehicleModelType* default_instance_;
};
// -------------------------------------------------------------------

class LicensePlate : public ::google::protobuf::Message {
 public:
  LicensePlate();
  virtual ~LicensePlate();

  LicensePlate(const LicensePlate& from);

  inline LicensePlate& operator=(const LicensePlate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LicensePlate& default_instance();

  void Swap(LicensePlate* other);

  // implements Message ----------------------------------------------

  inline LicensePlate* New() const { return New(NULL); }

  LicensePlate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LicensePlate& from);
  void MergeFrom(const LicensePlate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LicensePlate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PlateText = 1;
  void clear_platetext();
  static const int kPlateTextFieldNumber = 1;
  const ::std::string& platetext() const;
  void set_platetext(const ::std::string& value);
  void set_platetext(const char* value);
  void set_platetext(const char* value, size_t size);
  ::std::string* mutable_platetext();
  ::std::string* release_platetext();
  void set_allocated_platetext(::std::string* platetext);

  // optional .model.Color Color = 2;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 2;
  const ::model::Color& color() const;
  ::model::Color* mutable_color();
  ::model::Color* release_color();
  void set_allocated_color(::model::Color* color);

  // optional int32 Type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional float Confidence = 4;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 4;
  float confidence() const;
  void set_confidence(float value);

  // optional .model.Cutboard Cutboard = 5;
  bool has_cutboard() const;
  void clear_cutboard();
  static const int kCutboardFieldNumber = 5;
  const ::model::Cutboard& cutboard() const;
  ::model::Cutboard* mutable_cutboard();
  ::model::Cutboard* release_cutboard();
  void set_allocated_cutboard(::model::Cutboard* cutboard);

  // @@protoc_insertion_point(class_scope:model.LicensePlate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr platetext_;
  ::model::Color* color_;
  ::google::protobuf::int32 type_;
  float confidence_;
  ::model::Cutboard* cutboard_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static LicensePlate* default_instance_;
};
// -------------------------------------------------------------------

class VehicleSymbol : public ::google::protobuf::Message {
 public:
  VehicleSymbol();
  virtual ~VehicleSymbol();

  VehicleSymbol(const VehicleSymbol& from);

  inline VehicleSymbol& operator=(const VehicleSymbol& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleSymbol& default_instance();

  void Swap(VehicleSymbol* other);

  // implements Message ----------------------------------------------

  inline VehicleSymbol* New() const { return New(NULL); }

  VehicleSymbol* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleSymbol& from);
  void MergeFrom(const VehicleSymbol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleSymbol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional float Confidence = 3;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  float confidence() const;
  void set_confidence(float value);

  // optional string Name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .model.Cutboard Cutboard = 5;
  bool has_cutboard() const;
  void clear_cutboard();
  static const int kCutboardFieldNumber = 5;
  const ::model::Cutboard& cutboard() const;
  ::model::Cutboard* mutable_cutboard();
  ::model::Cutboard* release_cutboard();
  void set_allocated_cutboard(::model::Cutboard* cutboard);

  // @@protoc_insertion_point(class_scope:model.VehicleSymbol)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::model::Cutboard* cutboard_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static VehicleSymbol* default_instance_;
};
// -------------------------------------------------------------------

class Vehicle : public ::google::protobuf::Message {
 public:
  Vehicle();
  virtual ~Vehicle();

  Vehicle(const Vehicle& from);

  inline Vehicle& operator=(const Vehicle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vehicle& default_instance();

  void Swap(Vehicle* other);

  // implements Message ----------------------------------------------

  inline Vehicle* New() const { return New(NULL); }

  Vehicle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vehicle& from);
  void MergeFrom(const Vehicle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vehicle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .model.VideoMetadata Metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::model::VideoMetadata& metadata() const;
  ::model::VideoMetadata* mutable_metadata();
  ::model::VideoMetadata* release_metadata();
  void set_allocated_metadata(::model::VideoMetadata* metadata);

  // optional .model.VehicleModelType ModelType = 3;
  bool has_modeltype() const;
  void clear_modeltype();
  static const int kModelTypeFieldNumber = 3;
  const ::model::VehicleModelType& modeltype() const;
  ::model::VehicleModelType* mutable_modeltype();
  ::model::VehicleModelType* release_modeltype();
  void set_allocated_modeltype(::model::VehicleModelType* modeltype);

  // optional .model.Color Color = 4;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 4;
  const ::model::Color& color() const;
  ::model::Color* mutable_color();
  ::model::Color* release_color();
  void set_allocated_color(::model::Color* color);

  // optional bool IsHead = 5;
  void clear_ishead();
  static const int kIsHeadFieldNumber = 5;
  bool ishead() const;
  void set_ishead(bool value);

  // optional bool IsDay = 6;
  void clear_isday();
  static const int kIsDayFieldNumber = 6;
  bool isday() const;
  void set_isday(bool value);

  // optional .model.LicensePlate Plate = 7;
  bool has_plate() const;
  void clear_plate();
  static const int kPlateFieldNumber = 7;
  const ::model::LicensePlate& plate() const;
  ::model::LicensePlate* mutable_plate();
  ::model::LicensePlate* release_plate();
  void set_allocated_plate(::model::LicensePlate* plate);

  // optional int32 Side = 8;
  void clear_side();
  static const int kSideFieldNumber = 8;
  ::google::protobuf::int32 side() const;
  void set_side(::google::protobuf::int32 value);

  // optional .model.CutboardImage Img = 9;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 9;
  const ::model::CutboardImage& img() const;
  ::model::CutboardImage* mutable_img();
  ::model::CutboardImage* release_img();
  void set_allocated_img(::model::CutboardImage* img);

  // repeated .model.VehicleSymbol Symbols = 10;
  int symbols_size() const;
  void clear_symbols();
  static const int kSymbolsFieldNumber = 10;
  const ::model::VehicleSymbol& symbols(int index) const;
  ::model::VehicleSymbol* mutable_symbols(int index);
  ::model::VehicleSymbol* add_symbols();
  ::google::protobuf::RepeatedPtrField< ::model::VehicleSymbol >*
      mutable_symbols();
  const ::google::protobuf::RepeatedPtrField< ::model::VehicleSymbol >&
      symbols() const;

  // optional bytes Feature = 11;
  void clear_feature();
  static const int kFeatureFieldNumber = 11;
  const ::std::string& feature() const;
  void set_feature(const ::std::string& value);
  void set_feature(const char* value);
  void set_feature(const void* value, size_t size);
  ::std::string* mutable_feature();
  ::std::string* release_feature();
  void set_allocated_feature(::std::string* feature);

  // @@protoc_insertion_point(class_scope:model.Vehicle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::model::VideoMetadata* metadata_;
  ::model::VehicleModelType* modeltype_;
  ::model::Color* color_;
  bool ishead_;
  bool isday_;
  ::google::protobuf::int32 side_;
  ::model::LicensePlate* plate_;
  ::model::CutboardImage* img_;
  ::google::protobuf::RepeatedPtrField< ::model::VehicleSymbol > symbols_;
  ::google::protobuf::internal::ArenaStringPtr feature_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Vehicle* default_instance_;
};
// -------------------------------------------------------------------

class Vehicles : public ::google::protobuf::Message {
 public:
  Vehicles();
  virtual ~Vehicles();

  Vehicles(const Vehicles& from);

  inline Vehicles& operator=(const Vehicles& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vehicles& default_instance();

  void Swap(Vehicles* other);

  // implements Message ----------------------------------------------

  inline Vehicles* New() const { return New(NULL); }

  Vehicles* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vehicles& from);
  void MergeFrom(const Vehicles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vehicles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .model.Vehicle Vehicle = 1;
  int vehicle_size() const;
  void clear_vehicle();
  static const int kVehicleFieldNumber = 1;
  const ::model::Vehicle& vehicle(int index) const;
  ::model::Vehicle* mutable_vehicle(int index);
  ::model::Vehicle* add_vehicle();
  ::google::protobuf::RepeatedPtrField< ::model::Vehicle >*
      mutable_vehicle();
  const ::google::protobuf::RepeatedPtrField< ::model::Vehicle >&
      vehicle() const;

  // @@protoc_insertion_point(class_scope:model.Vehicles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::model::Vehicle > vehicle_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Vehicles* default_instance_;
};
// -------------------------------------------------------------------

class Tricycle : public ::google::protobuf::Message {
 public:
  Tricycle();
  virtual ~Tricycle();

  Tricycle(const Tricycle& from);

  inline Tricycle& operator=(const Tricycle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tricycle& default_instance();

  void Swap(Tricycle* other);

  // implements Message ----------------------------------------------

  inline Tricycle* New() const { return New(NULL); }

  Tricycle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tricycle& from);
  void MergeFrom(const Tricycle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tricycle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .model.VideoMetadata Metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::model::VideoMetadata& metadata() const;
  ::model::VideoMetadata* mutable_metadata();
  ::model::VideoMetadata* release_metadata();
  void set_allocated_metadata(::model::VideoMetadata* metadata);

  // optional .model.CutboardImage Img = 3;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 3;
  const ::model::CutboardImage& img() const;
  ::model::CutboardImage* mutable_img();
  ::model::CutboardImage* release_img();
  void set_allocated_img(::model::CutboardImage* img);

  // optional bytes Feature = 4;
  void clear_feature();
  static const int kFeatureFieldNumber = 4;
  const ::std::string& feature() const;
  void set_feature(const ::std::string& value);
  void set_feature(const char* value);
  void set_feature(const void* value, size_t size);
  ::std::string* mutable_feature();
  ::std::string* release_feature();
  void set_allocated_feature(::std::string* feature);

  // optional .model.Color Color = 5;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 5;
  const ::model::Color& color() const;
  ::model::Color* mutable_color();
  ::model::Color* release_color();
  void set_allocated_color(::model::Color* color);

  // @@protoc_insertion_point(class_scope:model.Tricycle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::model::VideoMetadata* metadata_;
  ::model::CutboardImage* img_;
  ::google::protobuf::internal::ArenaStringPtr feature_;
  ::model::Color* color_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Tricycle* default_instance_;
};
// -------------------------------------------------------------------

class Tricycles : public ::google::protobuf::Message {
 public:
  Tricycles();
  virtual ~Tricycles();

  Tricycles(const Tricycles& from);

  inline Tricycles& operator=(const Tricycles& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tricycles& default_instance();

  void Swap(Tricycles* other);

  // implements Message ----------------------------------------------

  inline Tricycles* New() const { return New(NULL); }

  Tricycles* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tricycles& from);
  void MergeFrom(const Tricycles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tricycles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .model.Tricycle Tricycle = 1;
  int tricycle_size() const;
  void clear_tricycle();
  static const int kTricycleFieldNumber = 1;
  const ::model::Tricycle& tricycle(int index) const;
  ::model::Tricycle* mutable_tricycle(int index);
  ::model::Tricycle* add_tricycle();
  ::google::protobuf::RepeatedPtrField< ::model::Tricycle >*
      mutable_tricycle();
  const ::google::protobuf::RepeatedPtrField< ::model::Tricycle >&
      tricycle() const;

  // @@protoc_insertion_point(class_scope:model.Tricycles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::model::Tricycle > tricycle_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Tricycles* default_instance_;
};
// -------------------------------------------------------------------

class Bicycle : public ::google::protobuf::Message {
 public:
  Bicycle();
  virtual ~Bicycle();

  Bicycle(const Bicycle& from);

  inline Bicycle& operator=(const Bicycle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bicycle& default_instance();

  void Swap(Bicycle* other);

  // implements Message ----------------------------------------------

  inline Bicycle* New() const { return New(NULL); }

  Bicycle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bicycle& from);
  void MergeFrom(const Bicycle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bicycle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .model.VideoMetadata Metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::model::VideoMetadata& metadata() const;
  ::model::VideoMetadata* mutable_metadata();
  ::model::VideoMetadata* release_metadata();
  void set_allocated_metadata(::model::VideoMetadata* metadata);

  // optional .model.CutboardImage Img = 3;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 3;
  const ::model::CutboardImage& img() const;
  ::model::CutboardImage* mutable_img();
  ::model::CutboardImage* release_img();
  void set_allocated_img(::model::CutboardImage* img);

  // optional bytes Feature = 4;
  void clear_feature();
  static const int kFeatureFieldNumber = 4;
  const ::std::string& feature() const;
  void set_feature(const ::std::string& value);
  void set_feature(const char* value);
  void set_feature(const void* value, size_t size);
  ::std::string* mutable_feature();
  ::std::string* release_feature();
  void set_allocated_feature(::std::string* feature);

  // optional .model.Color Color = 5;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 5;
  const ::model::Color& color() const;
  ::model::Color* mutable_color();
  ::model::Color* release_color();
  void set_allocated_color(::model::Color* color);

  // @@protoc_insertion_point(class_scope:model.Bicycle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::model::VideoMetadata* metadata_;
  ::model::CutboardImage* img_;
  ::google::protobuf::internal::ArenaStringPtr feature_;
  ::model::Color* color_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Bicycle* default_instance_;
};
// -------------------------------------------------------------------

class Bicycles : public ::google::protobuf::Message {
 public:
  Bicycles();
  virtual ~Bicycles();

  Bicycles(const Bicycles& from);

  inline Bicycles& operator=(const Bicycles& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bicycles& default_instance();

  void Swap(Bicycles* other);

  // implements Message ----------------------------------------------

  inline Bicycles* New() const { return New(NULL); }

  Bicycles* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bicycles& from);
  void MergeFrom(const Bicycles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bicycles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .model.Bicycle Tricycle = 1;
  int tricycle_size() const;
  void clear_tricycle();
  static const int kTricycleFieldNumber = 1;
  const ::model::Bicycle& tricycle(int index) const;
  ::model::Bicycle* mutable_tricycle(int index);
  ::model::Bicycle* add_tricycle();
  ::google::protobuf::RepeatedPtrField< ::model::Bicycle >*
      mutable_tricycle();
  const ::google::protobuf::RepeatedPtrField< ::model::Bicycle >&
      tricycle() const;

  // @@protoc_insertion_point(class_scope:model.Bicycles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::model::Bicycle > tricycle_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Bicycles* default_instance_;
};
// -------------------------------------------------------------------

class Pedestrian : public ::google::protobuf::Message {
 public:
  Pedestrian();
  virtual ~Pedestrian();

  Pedestrian(const Pedestrian& from);

  inline Pedestrian& operator=(const Pedestrian& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pedestrian& default_instance();

  void Swap(Pedestrian* other);

  // implements Message ----------------------------------------------

  inline Pedestrian* New() const { return New(NULL); }

  Pedestrian* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pedestrian& from);
  void MergeFrom(const Pedestrian& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pedestrian* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .model.VideoMetadata Metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::model::VideoMetadata& metadata() const;
  ::model::VideoMetadata* mutable_metadata();
  ::model::VideoMetadata* release_metadata();
  void set_allocated_metadata(::model::VideoMetadata* metadata);

  // optional .model.CutboardImage Img = 3;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 3;
  const ::model::CutboardImage& img() const;
  ::model::CutboardImage* mutable_img();
  ::model::CutboardImage* release_img();
  void set_allocated_img(::model::CutboardImage* img);

  // optional uint32 Features = 4;
  void clear_features();
  static const int kFeaturesFieldNumber = 4;
  ::google::protobuf::uint32 features() const;
  void set_features(::google::protobuf::uint32 value);

  // optional uint32 Heads = 5;
  void clear_heads();
  static const int kHeadsFieldNumber = 5;
  ::google::protobuf::uint32 heads() const;
  void set_heads(::google::protobuf::uint32 value);

  // optional uint32 UpperColors = 6;
  void clear_uppercolors();
  static const int kUpperColorsFieldNumber = 6;
  ::google::protobuf::uint32 uppercolors() const;
  void set_uppercolors(::google::protobuf::uint32 value);

  // optional uint32 LowerColors = 7;
  void clear_lowercolors();
  static const int kLowerColorsFieldNumber = 7;
  ::google::protobuf::uint32 lowercolors() const;
  void set_lowercolors(::google::protobuf::uint32 value);

  // optional uint32 Age = 8;
  void clear_age();
  static const int kAgeFieldNumber = 8;
  ::google::protobuf::uint32 age() const;
  void set_age(::google::protobuf::uint32 value);

  // optional uint32 UpperStyle = 9;
  void clear_upperstyle();
  static const int kUpperStyleFieldNumber = 9;
  ::google::protobuf::uint32 upperstyle() const;
  void set_upperstyle(::google::protobuf::uint32 value);

  // optional uint32 LowerStyle = 10;
  void clear_lowerstyle();
  static const int kLowerStyleFieldNumber = 10;
  ::google::protobuf::uint32 lowerstyle() const;
  void set_lowerstyle(::google::protobuf::uint32 value);

  // optional bool Gender = 11;
  void clear_gender();
  static const int kGenderFieldNumber = 11;
  bool gender() const;
  void set_gender(bool value);

  // optional bool Ethnic = 12;
  void clear_ethnic();
  static const int kEthnicFieldNumber = 12;
  bool ethnic() const;
  void set_ethnic(bool value);

  // optional bytes Feature = 13;
  void clear_feature();
  static const int kFeatureFieldNumber = 13;
  const ::std::string& feature() const;
  void set_feature(const ::std::string& value);
  void set_feature(const char* value);
  void set_feature(const void* value, size_t size);
  ::std::string* mutable_feature();
  ::std::string* release_feature();
  void set_allocated_feature(::std::string* feature);

  // @@protoc_insertion_point(class_scope:model.Pedestrian)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::model::VideoMetadata* metadata_;
  ::model::CutboardImage* img_;
  ::google::protobuf::uint32 features_;
  ::google::protobuf::uint32 heads_;
  ::google::protobuf::uint32 uppercolors_;
  ::google::protobuf::uint32 lowercolors_;
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint32 upperstyle_;
  ::google::protobuf::uint32 lowerstyle_;
  bool gender_;
  bool ethnic_;
  ::google::protobuf::internal::ArenaStringPtr feature_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Pedestrian* default_instance_;
};
// -------------------------------------------------------------------

class Pedestrians : public ::google::protobuf::Message {
 public:
  Pedestrians();
  virtual ~Pedestrians();

  Pedestrians(const Pedestrians& from);

  inline Pedestrians& operator=(const Pedestrians& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pedestrians& default_instance();

  void Swap(Pedestrians* other);

  // implements Message ----------------------------------------------

  inline Pedestrians* New() const { return New(NULL); }

  Pedestrians* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pedestrians& from);
  void MergeFrom(const Pedestrians& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pedestrians* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .model.Pedestrian Pedestrian = 1;
  int pedestrian_size() const;
  void clear_pedestrian();
  static const int kPedestrianFieldNumber = 1;
  const ::model::Pedestrian& pedestrian(int index) const;
  ::model::Pedestrian* mutable_pedestrian(int index);
  ::model::Pedestrian* add_pedestrian();
  ::google::protobuf::RepeatedPtrField< ::model::Pedestrian >*
      mutable_pedestrian();
  const ::google::protobuf::RepeatedPtrField< ::model::Pedestrian >&
      pedestrian() const;

  // @@protoc_insertion_point(class_scope:model.Pedestrians)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::model::Pedestrian > pedestrian_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Pedestrians* default_instance_;
};
// -------------------------------------------------------------------

class Face : public ::google::protobuf::Message {
 public:
  Face();
  virtual ~Face();

  Face(const Face& from);

  inline Face& operator=(const Face& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Face& default_instance();

  void Swap(Face* other);

  // implements Message ----------------------------------------------

  inline Face* New() const { return New(NULL); }

  Face* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Face& from);
  void MergeFrom(const Face& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Face* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .model.VideoMetadata Metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::model::VideoMetadata& metadata() const;
  ::model::VideoMetadata* mutable_metadata();
  ::model::VideoMetadata* release_metadata();
  void set_allocated_metadata(::model::VideoMetadata* metadata);

  // optional .model.CutboardImage Img = 3;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 3;
  const ::model::CutboardImage& img() const;
  ::model::CutboardImage* mutable_img();
  ::model::CutboardImage* release_img();
  void set_allocated_img(::model::CutboardImage* img);

  // optional bytes Feature = 4;
  void clear_feature();
  static const int kFeatureFieldNumber = 4;
  const ::std::string& feature() const;
  void set_feature(const ::std::string& value);
  void set_feature(const char* value);
  void set_feature(const void* value, size_t size);
  ::std::string* mutable_feature();
  ::std::string* release_feature();
  void set_allocated_feature(::std::string* feature);

  // @@protoc_insertion_point(class_scope:model.Face)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::model::VideoMetadata* metadata_;
  ::model::CutboardImage* img_;
  ::google::protobuf::internal::ArenaStringPtr feature_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Face* default_instance_;
};
// -------------------------------------------------------------------

class Faces : public ::google::protobuf::Message {
 public:
  Faces();
  virtual ~Faces();

  Faces(const Faces& from);

  inline Faces& operator=(const Faces& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faces& default_instance();

  void Swap(Faces* other);

  // implements Message ----------------------------------------------

  inline Faces* New() const { return New(NULL); }

  Faces* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faces& from);
  void MergeFrom(const Faces& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Faces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .model.Face Face = 1;
  int face_size() const;
  void clear_face();
  static const int kFaceFieldNumber = 1;
  const ::model::Face& face(int index) const;
  ::model::Face* mutable_face(int index);
  ::model::Face* add_face();
  ::google::protobuf::RepeatedPtrField< ::model::Face >*
      mutable_face();
  const ::google::protobuf::RepeatedPtrField< ::model::Face >&
      face() const;

  // @@protoc_insertion_point(class_scope:model.Faces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::model::Face > face_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Faces* default_instance_;
};
// -------------------------------------------------------------------

class VideoMetadata : public ::google::protobuf::Message {
 public:
  VideoMetadata();
  virtual ~VideoMetadata();

  VideoMetadata(const VideoMetadata& from);

  inline VideoMetadata& operator=(const VideoMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoMetadata& default_instance();

  void Swap(VideoMetadata* other);

  // implements Message ----------------------------------------------

  inline VideoMetadata* New() const { return New(NULL); }

  VideoMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoMetadata& from);
  void MergeFrom(const VideoMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 Duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 SensorId = 3;
  void clear_sensorid();
  static const int kSensorIdFieldNumber = 3;
  ::google::protobuf::int32 sensorid() const;
  void set_sensorid(::google::protobuf::int32 value);

  // optional string SensorName = 4;
  void clear_sensorname();
  static const int kSensorNameFieldNumber = 4;
  const ::std::string& sensorname() const;
  void set_sensorname(const ::std::string& value);
  void set_sensorname(const char* value);
  void set_sensorname(const char* value, size_t size);
  ::std::string* mutable_sensorname();
  ::std::string* release_sensorname();
  void set_allocated_sensorname(::std::string* sensorname);

  // optional string SensorUrl = 5;
  void clear_sensorurl();
  static const int kSensorUrlFieldNumber = 5;
  const ::std::string& sensorurl() const;
  void set_sensorurl(const ::std::string& value);
  void set_sensorurl(const char* value);
  void set_sensorurl(const char* value, size_t size);
  ::std::string* mutable_sensorurl();
  ::std::string* release_sensorurl();
  void set_allocated_sensorurl(::std::string* sensorurl);

  // @@protoc_insertion_point(class_scope:model.VideoMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 sensorid_;
  ::google::protobuf::internal::ArenaStringPtr sensorname_;
  ::google::protobuf::internal::ArenaStringPtr sensorurl_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static VideoMetadata* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  inline Image* New() const { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional int32 Width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 Height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional bytes BinData = 4;
  void clear_bindata();
  static const int kBinDataFieldNumber = 4;
  const ::std::string& bindata() const;
  void set_bindata(const ::std::string& value);
  void set_bindata(const char* value);
  void set_bindata(const void* value, size_t size);
  ::std::string* mutable_bindata();
  ::std::string* release_bindata();
  void set_allocated_bindata(::std::string* bindata);

  // @@protoc_insertion_point(class_scope:model.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::internal::ArenaStringPtr bindata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class CutboardImage : public ::google::protobuf::Message {
 public:
  CutboardImage();
  virtual ~CutboardImage();

  CutboardImage(const CutboardImage& from);

  inline CutboardImage& operator=(const CutboardImage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CutboardImage& default_instance();

  void Swap(CutboardImage* other);

  // implements Message ----------------------------------------------

  inline CutboardImage* New() const { return New(NULL); }

  CutboardImage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CutboardImage& from);
  void MergeFrom(const CutboardImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CutboardImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .model.VideoMetadata Metadata = 1;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::model::VideoMetadata& metadata() const;
  ::model::VideoMetadata* mutable_metadata();
  ::model::VideoMetadata* release_metadata();
  void set_allocated_metadata(::model::VideoMetadata* metadata);

  // optional .model.Cutboard Cutboard = 2;
  bool has_cutboard() const;
  void clear_cutboard();
  static const int kCutboardFieldNumber = 2;
  const ::model::Cutboard& cutboard() const;
  ::model::Cutboard* mutable_cutboard();
  ::model::Cutboard* release_cutboard();
  void set_allocated_cutboard(::model::Cutboard* cutboard);

  // optional .model.Image Img = 3;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 3;
  const ::model::Image& img() const;
  ::model::Image* mutable_img();
  ::model::Image* release_img();
  void set_allocated_img(::model::Image* img);

  // @@protoc_insertion_point(class_scope:model.CutboardImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::model::VideoMetadata* metadata_;
  ::model::Cutboard* cutboard_;
  ::model::Image* img_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static CutboardImage* default_instance_;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  inline Color* New() const { return New(NULL); }

  Color* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional float Confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // optional string ColorName = 3;
  void clear_colorname();
  static const int kColorNameFieldNumber = 3;
  const ::std::string& colorname() const;
  void set_colorname(const ::std::string& value);
  void set_colorname(const char* value);
  void set_colorname(const char* value, size_t size);
  ::std::string* mutable_colorname();
  ::std::string* release_colorname();
  void set_allocated_colorname(::std::string* colorname);

  // @@protoc_insertion_point(class_scope:model.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  float confidence_;
  ::google::protobuf::internal::ArenaStringPtr colorname_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class Cutboard : public ::google::protobuf::Message {
 public:
  Cutboard();
  virtual ~Cutboard();

  Cutboard(const Cutboard& from);

  inline Cutboard& operator=(const Cutboard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cutboard& default_instance();

  void Swap(Cutboard* other);

  // implements Message ----------------------------------------------

  inline Cutboard* New() const { return New(NULL); }

  Cutboard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cutboard& from);
  void MergeFrom(const Cutboard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Cutboard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // optional uint32 Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // optional uint32 Width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 Height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 ResWidth = 5;
  void clear_reswidth();
  static const int kResWidthFieldNumber = 5;
  ::google::protobuf::uint32 reswidth() const;
  void set_reswidth(::google::protobuf::uint32 value);

  // optional uint32 ResHeight = 6;
  void clear_resheight();
  static const int kResHeightFieldNumber = 6;
  ::google::protobuf::uint32 resheight() const;
  void set_resheight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:model.Cutboard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 reswidth_;
  ::google::protobuf::uint32 resheight_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static Cutboard* default_instance_;
};
// -------------------------------------------------------------------

class BaseEntity : public ::google::protobuf::Message {
 public:
  BaseEntity();
  virtual ~BaseEntity();

  BaseEntity(const BaseEntity& from);

  inline BaseEntity& operator=(const BaseEntity& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseEntity& default_instance();

  void Swap(BaseEntity* other);

  // implements Message ----------------------------------------------

  inline BaseEntity* New() const { return New(NULL); }

  BaseEntity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseEntity& from);
  void MergeFrom(const BaseEntity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BaseEntity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .model.VideoMetadata Metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::model::VideoMetadata& metadata() const;
  ::model::VideoMetadata* mutable_metadata();
  ::model::VideoMetadata* release_metadata();
  void set_allocated_metadata(::model::VideoMetadata* metadata);

  // optional .model.CutboardImage Img = 3;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 3;
  const ::model::CutboardImage& img() const;
  ::model::CutboardImage* mutable_img();
  ::model::CutboardImage* release_img();
  void set_allocated_img(::model::CutboardImage* img);

  // @@protoc_insertion_point(class_scope:model.BaseEntity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::model::VideoMetadata* metadata_;
  ::model::CutboardImage* img_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static BaseEntity* default_instance_;
};
// -------------------------------------------------------------------

class FeatureVector : public ::google::protobuf::Message {
 public:
  FeatureVector();
  virtual ~FeatureVector();

  FeatureVector(const FeatureVector& from);

  inline FeatureVector& operator=(const FeatureVector& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureVector& default_instance();

  void Swap(FeatureVector* other);

  // implements Message ----------------------------------------------

  inline FeatureVector* New() const { return New(NULL); }

  FeatureVector* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureVector& from);
  void MergeFrom(const FeatureVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional bytes Feature = 2;
  void clear_feature();
  static const int kFeatureFieldNumber = 2;
  const ::std::string& feature() const;
  void set_feature(const ::std::string& value);
  void set_feature(const char* value);
  void set_feature(const void* value, size_t size);
  ::std::string* mutable_feature();
  ::std::string* release_feature();
  void set_allocated_feature(::std::string* feature);

  // @@protoc_insertion_point(class_scope:model.FeatureVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr feature_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static FeatureVector* default_instance_;
};
// -------------------------------------------------------------------

class NullMessage : public ::google::protobuf::Message {
 public:
  NullMessage();
  virtual ~NullMessage();

  NullMessage(const NullMessage& from);

  inline NullMessage& operator=(const NullMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NullMessage& default_instance();

  void Swap(NullMessage* other);

  // implements Message ----------------------------------------------

  inline NullMessage* New() const { return New(NULL); }

  NullMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NullMessage& from);
  void MergeFrom(const NullMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NullMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:model.NullMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_deepdatasingle_2eproto();
  friend void protobuf_AssignDesc_deepdatasingle_2eproto();
  friend void protobuf_ShutdownFile_deepdatasingle_2eproto();

  void InitAsDefaultInstance();
  static NullMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleModelType

// optional int64 Id = 1;
inline void VehicleModelType::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VehicleModelType::id() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.Id)
  return id_;
}
inline void VehicleModelType::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.Id)
}

// optional int32 BrandId = 2;
inline void VehicleModelType::clear_brandid() {
  brandid_ = 0;
}
inline ::google::protobuf::int32 VehicleModelType::brandid() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.BrandId)
  return brandid_;
}
inline void VehicleModelType::set_brandid(::google::protobuf::int32 value) {
  
  brandid_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.BrandId)
}

// optional int32 SubBrandId = 3;
inline void VehicleModelType::clear_subbrandid() {
  subbrandid_ = 0;
}
inline ::google::protobuf::int32 VehicleModelType::subbrandid() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.SubBrandId)
  return subbrandid_;
}
inline void VehicleModelType::set_subbrandid(::google::protobuf::int32 value) {
  
  subbrandid_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.SubBrandId)
}

// optional int32 ModelYearId = 4;
inline void VehicleModelType::clear_modelyearid() {
  modelyearid_ = 0;
}
inline ::google::protobuf::int32 VehicleModelType::modelyearid() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.ModelYearId)
  return modelyearid_;
}
inline void VehicleModelType::set_modelyearid(::google::protobuf::int32 value) {
  
  modelyearid_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.ModelYearId)
}

// optional float Confidence = 5;
inline void VehicleModelType::clear_confidence() {
  confidence_ = 0;
}
inline float VehicleModelType::confidence() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.Confidence)
  return confidence_;
}
inline void VehicleModelType::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.Confidence)
}

// optional int32 Type = 6;
inline void VehicleModelType::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 VehicleModelType::type() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.Type)
  return type_;
}
inline void VehicleModelType::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleModelType.Type)
}

// optional string Model = 7;
inline void VehicleModelType::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleModelType::model() const {
  // @@protoc_insertion_point(field_get:model.VehicleModelType.Model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.VehicleModelType.Model)
}
inline void VehicleModelType::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.VehicleModelType.Model)
}
inline void VehicleModelType::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.VehicleModelType.Model)
}
inline ::std::string* VehicleModelType::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:model.VehicleModelType.Model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleModelType::release_model() {
  // @@protoc_insertion_point(field_release:model.VehicleModelType.Model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleModelType::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:model.VehicleModelType.Model)
}

// -------------------------------------------------------------------

// LicensePlate

// optional string PlateText = 1;
inline void LicensePlate::clear_platetext() {
  platetext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicensePlate::platetext() const {
  // @@protoc_insertion_point(field_get:model.LicensePlate.PlateText)
  return platetext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicensePlate::set_platetext(const ::std::string& value) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.LicensePlate.PlateText)
}
inline void LicensePlate::set_platetext(const char* value) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.LicensePlate.PlateText)
}
inline void LicensePlate::set_platetext(const char* value, size_t size) {
  
  platetext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.LicensePlate.PlateText)
}
inline ::std::string* LicensePlate::mutable_platetext() {
  
  // @@protoc_insertion_point(field_mutable:model.LicensePlate.PlateText)
  return platetext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicensePlate::release_platetext() {
  // @@protoc_insertion_point(field_release:model.LicensePlate.PlateText)
  
  return platetext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicensePlate::set_allocated_platetext(::std::string* platetext) {
  if (platetext != NULL) {
    
  } else {
    
  }
  platetext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platetext);
  // @@protoc_insertion_point(field_set_allocated:model.LicensePlate.PlateText)
}

// optional .model.Color Color = 2;
inline bool LicensePlate::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
inline void LicensePlate::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
inline const ::model::Color& LicensePlate::color() const {
  // @@protoc_insertion_point(field_get:model.LicensePlate.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::model::Color* LicensePlate::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:model.LicensePlate.Color)
  return color_;
}
inline ::model::Color* LicensePlate::release_color() {
  // @@protoc_insertion_point(field_release:model.LicensePlate.Color)
  
  ::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void LicensePlate::set_allocated_color(::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.LicensePlate.Color)
}

// optional int32 Type = 3;
inline void LicensePlate::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 LicensePlate::type() const {
  // @@protoc_insertion_point(field_get:model.LicensePlate.Type)
  return type_;
}
inline void LicensePlate::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:model.LicensePlate.Type)
}

// optional float Confidence = 4;
inline void LicensePlate::clear_confidence() {
  confidence_ = 0;
}
inline float LicensePlate::confidence() const {
  // @@protoc_insertion_point(field_get:model.LicensePlate.Confidence)
  return confidence_;
}
inline void LicensePlate::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:model.LicensePlate.Confidence)
}

// optional .model.Cutboard Cutboard = 5;
inline bool LicensePlate::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
inline void LicensePlate::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
inline const ::model::Cutboard& LicensePlate::cutboard() const {
  // @@protoc_insertion_point(field_get:model.LicensePlate.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
inline ::model::Cutboard* LicensePlate::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:model.LicensePlate.Cutboard)
  return cutboard_;
}
inline ::model::Cutboard* LicensePlate::release_cutboard() {
  // @@protoc_insertion_point(field_release:model.LicensePlate.Cutboard)
  
  ::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
inline void LicensePlate::set_allocated_cutboard(::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.LicensePlate.Cutboard)
}

// -------------------------------------------------------------------

// VehicleSymbol

// optional int32 Id = 1;
inline void VehicleSymbol::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 VehicleSymbol::id() const {
  // @@protoc_insertion_point(field_get:model.VehicleSymbol.Id)
  return id_;
}
inline void VehicleSymbol::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleSymbol.Id)
}

// optional int32 Type = 2;
inline void VehicleSymbol::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 VehicleSymbol::type() const {
  // @@protoc_insertion_point(field_get:model.VehicleSymbol.Type)
  return type_;
}
inline void VehicleSymbol::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleSymbol.Type)
}

// optional float Confidence = 3;
inline void VehicleSymbol::clear_confidence() {
  confidence_ = 0;
}
inline float VehicleSymbol::confidence() const {
  // @@protoc_insertion_point(field_get:model.VehicleSymbol.Confidence)
  return confidence_;
}
inline void VehicleSymbol::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:model.VehicleSymbol.Confidence)
}

// optional string Name = 4;
inline void VehicleSymbol::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleSymbol::name() const {
  // @@protoc_insertion_point(field_get:model.VehicleSymbol.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleSymbol::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.VehicleSymbol.Name)
}
inline void VehicleSymbol::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.VehicleSymbol.Name)
}
inline void VehicleSymbol::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.VehicleSymbol.Name)
}
inline ::std::string* VehicleSymbol::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:model.VehicleSymbol.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleSymbol::release_name() {
  // @@protoc_insertion_point(field_release:model.VehicleSymbol.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleSymbol::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:model.VehicleSymbol.Name)
}

// optional .model.Cutboard Cutboard = 5;
inline bool VehicleSymbol::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
inline void VehicleSymbol::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
inline const ::model::Cutboard& VehicleSymbol::cutboard() const {
  // @@protoc_insertion_point(field_get:model.VehicleSymbol.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
inline ::model::Cutboard* VehicleSymbol::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:model.VehicleSymbol.Cutboard)
  return cutboard_;
}
inline ::model::Cutboard* VehicleSymbol::release_cutboard() {
  // @@protoc_insertion_point(field_release:model.VehicleSymbol.Cutboard)
  
  ::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
inline void VehicleSymbol::set_allocated_cutboard(::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.VehicleSymbol.Cutboard)
}

// -------------------------------------------------------------------

// Vehicle

// optional int64 Id = 1;
inline void Vehicle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Vehicle::id() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Id)
  return id_;
}
inline void Vehicle::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Vehicle.Id)
}

// optional .model.VideoMetadata Metadata = 2;
inline bool Vehicle::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void Vehicle::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::model::VideoMetadata& Vehicle::metadata() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::model::VideoMetadata* Vehicle::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Metadata)
  return metadata_;
}
inline ::model::VideoMetadata* Vehicle::release_metadata() {
  // @@protoc_insertion_point(field_release:model.Vehicle.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Vehicle::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.Metadata)
}

// optional .model.VehicleModelType ModelType = 3;
inline bool Vehicle::has_modeltype() const {
  return !_is_default_instance_ && modeltype_ != NULL;
}
inline void Vehicle::clear_modeltype() {
  if (GetArenaNoVirtual() == NULL && modeltype_ != NULL) delete modeltype_;
  modeltype_ = NULL;
}
inline const ::model::VehicleModelType& Vehicle::modeltype() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.ModelType)
  return modeltype_ != NULL ? *modeltype_ : *default_instance_->modeltype_;
}
inline ::model::VehicleModelType* Vehicle::mutable_modeltype() {
  
  if (modeltype_ == NULL) {
    modeltype_ = new ::model::VehicleModelType;
  }
  // @@protoc_insertion_point(field_mutable:model.Vehicle.ModelType)
  return modeltype_;
}
inline ::model::VehicleModelType* Vehicle::release_modeltype() {
  // @@protoc_insertion_point(field_release:model.Vehicle.ModelType)
  
  ::model::VehicleModelType* temp = modeltype_;
  modeltype_ = NULL;
  return temp;
}
inline void Vehicle::set_allocated_modeltype(::model::VehicleModelType* modeltype) {
  delete modeltype_;
  modeltype_ = modeltype;
  if (modeltype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.ModelType)
}

// optional .model.Color Color = 4;
inline bool Vehicle::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
inline void Vehicle::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
inline const ::model::Color& Vehicle::color() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::model::Color* Vehicle::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Color)
  return color_;
}
inline ::model::Color* Vehicle::release_color() {
  // @@protoc_insertion_point(field_release:model.Vehicle.Color)
  
  ::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void Vehicle::set_allocated_color(::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.Color)
}

// optional bool IsHead = 5;
inline void Vehicle::clear_ishead() {
  ishead_ = false;
}
inline bool Vehicle::ishead() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.IsHead)
  return ishead_;
}
inline void Vehicle::set_ishead(bool value) {
  
  ishead_ = value;
  // @@protoc_insertion_point(field_set:model.Vehicle.IsHead)
}

// optional bool IsDay = 6;
inline void Vehicle::clear_isday() {
  isday_ = false;
}
inline bool Vehicle::isday() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.IsDay)
  return isday_;
}
inline void Vehicle::set_isday(bool value) {
  
  isday_ = value;
  // @@protoc_insertion_point(field_set:model.Vehicle.IsDay)
}

// optional .model.LicensePlate Plate = 7;
inline bool Vehicle::has_plate() const {
  return !_is_default_instance_ && plate_ != NULL;
}
inline void Vehicle::clear_plate() {
  if (GetArenaNoVirtual() == NULL && plate_ != NULL) delete plate_;
  plate_ = NULL;
}
inline const ::model::LicensePlate& Vehicle::plate() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Plate)
  return plate_ != NULL ? *plate_ : *default_instance_->plate_;
}
inline ::model::LicensePlate* Vehicle::mutable_plate() {
  
  if (plate_ == NULL) {
    plate_ = new ::model::LicensePlate;
  }
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Plate)
  return plate_;
}
inline ::model::LicensePlate* Vehicle::release_plate() {
  // @@protoc_insertion_point(field_release:model.Vehicle.Plate)
  
  ::model::LicensePlate* temp = plate_;
  plate_ = NULL;
  return temp;
}
inline void Vehicle::set_allocated_plate(::model::LicensePlate* plate) {
  delete plate_;
  plate_ = plate;
  if (plate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.Plate)
}

// optional int32 Side = 8;
inline void Vehicle::clear_side() {
  side_ = 0;
}
inline ::google::protobuf::int32 Vehicle::side() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Side)
  return side_;
}
inline void Vehicle::set_side(::google::protobuf::int32 value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:model.Vehicle.Side)
}

// optional .model.CutboardImage Img = 9;
inline bool Vehicle::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void Vehicle::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::model::CutboardImage& Vehicle::img() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::model::CutboardImage* Vehicle::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Img)
  return img_;
}
inline ::model::CutboardImage* Vehicle::release_img() {
  // @@protoc_insertion_point(field_release:model.Vehicle.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void Vehicle::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.Img)
}

// repeated .model.VehicleSymbol Symbols = 10;
inline int Vehicle::symbols_size() const {
  return symbols_.size();
}
inline void Vehicle::clear_symbols() {
  symbols_.Clear();
}
inline const ::model::VehicleSymbol& Vehicle::symbols(int index) const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Symbols)
  return symbols_.Get(index);
}
inline ::model::VehicleSymbol* Vehicle::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Symbols)
  return symbols_.Mutable(index);
}
inline ::model::VehicleSymbol* Vehicle::add_symbols() {
  // @@protoc_insertion_point(field_add:model.Vehicle.Symbols)
  return symbols_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::model::VehicleSymbol >*
Vehicle::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:model.Vehicle.Symbols)
  return &symbols_;
}
inline const ::google::protobuf::RepeatedPtrField< ::model::VehicleSymbol >&
Vehicle::symbols() const {
  // @@protoc_insertion_point(field_list:model.Vehicle.Symbols)
  return symbols_;
}

// optional bytes Feature = 11;
inline void Vehicle::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vehicle::feature() const {
  // @@protoc_insertion_point(field_get:model.Vehicle.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Vehicle.Feature)
}
inline void Vehicle::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Vehicle.Feature)
}
inline void Vehicle::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Vehicle.Feature)
}
inline ::std::string* Vehicle::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.Vehicle.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vehicle::release_feature() {
  // @@protoc_insertion_point(field_release:model.Vehicle.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.Vehicle.Feature)
}

// -------------------------------------------------------------------

// Vehicles

// repeated .model.Vehicle Vehicle = 1;
inline int Vehicles::vehicle_size() const {
  return vehicle_.size();
}
inline void Vehicles::clear_vehicle() {
  vehicle_.Clear();
}
inline const ::model::Vehicle& Vehicles::vehicle(int index) const {
  // @@protoc_insertion_point(field_get:model.Vehicles.Vehicle)
  return vehicle_.Get(index);
}
inline ::model::Vehicle* Vehicles::mutable_vehicle(int index) {
  // @@protoc_insertion_point(field_mutable:model.Vehicles.Vehicle)
  return vehicle_.Mutable(index);
}
inline ::model::Vehicle* Vehicles::add_vehicle() {
  // @@protoc_insertion_point(field_add:model.Vehicles.Vehicle)
  return vehicle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::model::Vehicle >*
Vehicles::mutable_vehicle() {
  // @@protoc_insertion_point(field_mutable_list:model.Vehicles.Vehicle)
  return &vehicle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::model::Vehicle >&
Vehicles::vehicle() const {
  // @@protoc_insertion_point(field_list:model.Vehicles.Vehicle)
  return vehicle_;
}

// -------------------------------------------------------------------

// Tricycle

// optional int64 Id = 1;
inline void Tricycle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Tricycle::id() const {
  // @@protoc_insertion_point(field_get:model.Tricycle.Id)
  return id_;
}
inline void Tricycle::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Tricycle.Id)
}

// optional .model.VideoMetadata Metadata = 2;
inline bool Tricycle::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void Tricycle::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::model::VideoMetadata& Tricycle::metadata() const {
  // @@protoc_insertion_point(field_get:model.Tricycle.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::model::VideoMetadata* Tricycle::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.Tricycle.Metadata)
  return metadata_;
}
inline ::model::VideoMetadata* Tricycle::release_metadata() {
  // @@protoc_insertion_point(field_release:model.Tricycle.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Tricycle::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Tricycle.Metadata)
}

// optional .model.CutboardImage Img = 3;
inline bool Tricycle::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void Tricycle::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::model::CutboardImage& Tricycle::img() const {
  // @@protoc_insertion_point(field_get:model.Tricycle.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::model::CutboardImage* Tricycle::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.Tricycle.Img)
  return img_;
}
inline ::model::CutboardImage* Tricycle::release_img() {
  // @@protoc_insertion_point(field_release:model.Tricycle.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void Tricycle::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Tricycle.Img)
}

// optional bytes Feature = 4;
inline void Tricycle::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tricycle::feature() const {
  // @@protoc_insertion_point(field_get:model.Tricycle.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tricycle::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Tricycle.Feature)
}
inline void Tricycle::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Tricycle.Feature)
}
inline void Tricycle::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Tricycle.Feature)
}
inline ::std::string* Tricycle::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.Tricycle.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tricycle::release_feature() {
  // @@protoc_insertion_point(field_release:model.Tricycle.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tricycle::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.Tricycle.Feature)
}

// optional .model.Color Color = 5;
inline bool Tricycle::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
inline void Tricycle::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
inline const ::model::Color& Tricycle::color() const {
  // @@protoc_insertion_point(field_get:model.Tricycle.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::model::Color* Tricycle::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:model.Tricycle.Color)
  return color_;
}
inline ::model::Color* Tricycle::release_color() {
  // @@protoc_insertion_point(field_release:model.Tricycle.Color)
  
  ::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void Tricycle::set_allocated_color(::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Tricycle.Color)
}

// -------------------------------------------------------------------

// Tricycles

// repeated .model.Tricycle Tricycle = 1;
inline int Tricycles::tricycle_size() const {
  return tricycle_.size();
}
inline void Tricycles::clear_tricycle() {
  tricycle_.Clear();
}
inline const ::model::Tricycle& Tricycles::tricycle(int index) const {
  // @@protoc_insertion_point(field_get:model.Tricycles.Tricycle)
  return tricycle_.Get(index);
}
inline ::model::Tricycle* Tricycles::mutable_tricycle(int index) {
  // @@protoc_insertion_point(field_mutable:model.Tricycles.Tricycle)
  return tricycle_.Mutable(index);
}
inline ::model::Tricycle* Tricycles::add_tricycle() {
  // @@protoc_insertion_point(field_add:model.Tricycles.Tricycle)
  return tricycle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::model::Tricycle >*
Tricycles::mutable_tricycle() {
  // @@protoc_insertion_point(field_mutable_list:model.Tricycles.Tricycle)
  return &tricycle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::model::Tricycle >&
Tricycles::tricycle() const {
  // @@protoc_insertion_point(field_list:model.Tricycles.Tricycle)
  return tricycle_;
}

// -------------------------------------------------------------------

// Bicycle

// optional int64 Id = 1;
inline void Bicycle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Bicycle::id() const {
  // @@protoc_insertion_point(field_get:model.Bicycle.Id)
  return id_;
}
inline void Bicycle::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Bicycle.Id)
}

// optional .model.VideoMetadata Metadata = 2;
inline bool Bicycle::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void Bicycle::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::model::VideoMetadata& Bicycle::metadata() const {
  // @@protoc_insertion_point(field_get:model.Bicycle.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::model::VideoMetadata* Bicycle::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.Bicycle.Metadata)
  return metadata_;
}
inline ::model::VideoMetadata* Bicycle::release_metadata() {
  // @@protoc_insertion_point(field_release:model.Bicycle.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Bicycle::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Bicycle.Metadata)
}

// optional .model.CutboardImage Img = 3;
inline bool Bicycle::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void Bicycle::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::model::CutboardImage& Bicycle::img() const {
  // @@protoc_insertion_point(field_get:model.Bicycle.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::model::CutboardImage* Bicycle::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.Bicycle.Img)
  return img_;
}
inline ::model::CutboardImage* Bicycle::release_img() {
  // @@protoc_insertion_point(field_release:model.Bicycle.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void Bicycle::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Bicycle.Img)
}

// optional bytes Feature = 4;
inline void Bicycle::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bicycle::feature() const {
  // @@protoc_insertion_point(field_get:model.Bicycle.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bicycle::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Bicycle.Feature)
}
inline void Bicycle::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Bicycle.Feature)
}
inline void Bicycle::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Bicycle.Feature)
}
inline ::std::string* Bicycle::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.Bicycle.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bicycle::release_feature() {
  // @@protoc_insertion_point(field_release:model.Bicycle.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bicycle::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.Bicycle.Feature)
}

// optional .model.Color Color = 5;
inline bool Bicycle::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
inline void Bicycle::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
inline const ::model::Color& Bicycle::color() const {
  // @@protoc_insertion_point(field_get:model.Bicycle.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::model::Color* Bicycle::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::model::Color;
  }
  // @@protoc_insertion_point(field_mutable:model.Bicycle.Color)
  return color_;
}
inline ::model::Color* Bicycle::release_color() {
  // @@protoc_insertion_point(field_release:model.Bicycle.Color)
  
  ::model::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void Bicycle::set_allocated_color(::model::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Bicycle.Color)
}

// -------------------------------------------------------------------

// Bicycles

// repeated .model.Bicycle Tricycle = 1;
inline int Bicycles::tricycle_size() const {
  return tricycle_.size();
}
inline void Bicycles::clear_tricycle() {
  tricycle_.Clear();
}
inline const ::model::Bicycle& Bicycles::tricycle(int index) const {
  // @@protoc_insertion_point(field_get:model.Bicycles.Tricycle)
  return tricycle_.Get(index);
}
inline ::model::Bicycle* Bicycles::mutable_tricycle(int index) {
  // @@protoc_insertion_point(field_mutable:model.Bicycles.Tricycle)
  return tricycle_.Mutable(index);
}
inline ::model::Bicycle* Bicycles::add_tricycle() {
  // @@protoc_insertion_point(field_add:model.Bicycles.Tricycle)
  return tricycle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::model::Bicycle >*
Bicycles::mutable_tricycle() {
  // @@protoc_insertion_point(field_mutable_list:model.Bicycles.Tricycle)
  return &tricycle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::model::Bicycle >&
Bicycles::tricycle() const {
  // @@protoc_insertion_point(field_list:model.Bicycles.Tricycle)
  return tricycle_;
}

// -------------------------------------------------------------------

// Pedestrian

// optional int64 Id = 1;
inline void Pedestrian::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Pedestrian::id() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Id)
  return id_;
}
inline void Pedestrian::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Id)
}

// optional .model.VideoMetadata Metadata = 2;
inline bool Pedestrian::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void Pedestrian::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::model::VideoMetadata& Pedestrian::metadata() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::model::VideoMetadata* Pedestrian::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.Pedestrian.Metadata)
  return metadata_;
}
inline ::model::VideoMetadata* Pedestrian::release_metadata() {
  // @@protoc_insertion_point(field_release:model.Pedestrian.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Pedestrian::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Pedestrian.Metadata)
}

// optional .model.CutboardImage Img = 3;
inline bool Pedestrian::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void Pedestrian::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::model::CutboardImage& Pedestrian::img() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::model::CutboardImage* Pedestrian::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.Pedestrian.Img)
  return img_;
}
inline ::model::CutboardImage* Pedestrian::release_img() {
  // @@protoc_insertion_point(field_release:model.Pedestrian.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void Pedestrian::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Pedestrian.Img)
}

// optional uint32 Features = 4;
inline void Pedestrian::clear_features() {
  features_ = 0u;
}
inline ::google::protobuf::uint32 Pedestrian::features() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Features)
  return features_;
}
inline void Pedestrian::set_features(::google::protobuf::uint32 value) {
  
  features_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Features)
}

// optional uint32 Heads = 5;
inline void Pedestrian::clear_heads() {
  heads_ = 0u;
}
inline ::google::protobuf::uint32 Pedestrian::heads() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Heads)
  return heads_;
}
inline void Pedestrian::set_heads(::google::protobuf::uint32 value) {
  
  heads_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Heads)
}

// optional uint32 UpperColors = 6;
inline void Pedestrian::clear_uppercolors() {
  uppercolors_ = 0u;
}
inline ::google::protobuf::uint32 Pedestrian::uppercolors() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.UpperColors)
  return uppercolors_;
}
inline void Pedestrian::set_uppercolors(::google::protobuf::uint32 value) {
  
  uppercolors_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.UpperColors)
}

// optional uint32 LowerColors = 7;
inline void Pedestrian::clear_lowercolors() {
  lowercolors_ = 0u;
}
inline ::google::protobuf::uint32 Pedestrian::lowercolors() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.LowerColors)
  return lowercolors_;
}
inline void Pedestrian::set_lowercolors(::google::protobuf::uint32 value) {
  
  lowercolors_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.LowerColors)
}

// optional uint32 Age = 8;
inline void Pedestrian::clear_age() {
  age_ = 0u;
}
inline ::google::protobuf::uint32 Pedestrian::age() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Age)
  return age_;
}
inline void Pedestrian::set_age(::google::protobuf::uint32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Age)
}

// optional uint32 UpperStyle = 9;
inline void Pedestrian::clear_upperstyle() {
  upperstyle_ = 0u;
}
inline ::google::protobuf::uint32 Pedestrian::upperstyle() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.UpperStyle)
  return upperstyle_;
}
inline void Pedestrian::set_upperstyle(::google::protobuf::uint32 value) {
  
  upperstyle_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.UpperStyle)
}

// optional uint32 LowerStyle = 10;
inline void Pedestrian::clear_lowerstyle() {
  lowerstyle_ = 0u;
}
inline ::google::protobuf::uint32 Pedestrian::lowerstyle() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.LowerStyle)
  return lowerstyle_;
}
inline void Pedestrian::set_lowerstyle(::google::protobuf::uint32 value) {
  
  lowerstyle_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.LowerStyle)
}

// optional bool Gender = 11;
inline void Pedestrian::clear_gender() {
  gender_ = false;
}
inline bool Pedestrian::gender() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Gender)
  return gender_;
}
inline void Pedestrian::set_gender(bool value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Gender)
}

// optional bool Ethnic = 12;
inline void Pedestrian::clear_ethnic() {
  ethnic_ = false;
}
inline bool Pedestrian::ethnic() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Ethnic)
  return ethnic_;
}
inline void Pedestrian::set_ethnic(bool value) {
  
  ethnic_ = value;
  // @@protoc_insertion_point(field_set:model.Pedestrian.Ethnic)
}

// optional bytes Feature = 13;
inline void Pedestrian::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pedestrian::feature() const {
  // @@protoc_insertion_point(field_get:model.Pedestrian.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pedestrian::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Pedestrian.Feature)
}
inline void Pedestrian::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Pedestrian.Feature)
}
inline void Pedestrian::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Pedestrian.Feature)
}
inline ::std::string* Pedestrian::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.Pedestrian.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pedestrian::release_feature() {
  // @@protoc_insertion_point(field_release:model.Pedestrian.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pedestrian::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.Pedestrian.Feature)
}

// -------------------------------------------------------------------

// Pedestrians

// repeated .model.Pedestrian Pedestrian = 1;
inline int Pedestrians::pedestrian_size() const {
  return pedestrian_.size();
}
inline void Pedestrians::clear_pedestrian() {
  pedestrian_.Clear();
}
inline const ::model::Pedestrian& Pedestrians::pedestrian(int index) const {
  // @@protoc_insertion_point(field_get:model.Pedestrians.Pedestrian)
  return pedestrian_.Get(index);
}
inline ::model::Pedestrian* Pedestrians::mutable_pedestrian(int index) {
  // @@protoc_insertion_point(field_mutable:model.Pedestrians.Pedestrian)
  return pedestrian_.Mutable(index);
}
inline ::model::Pedestrian* Pedestrians::add_pedestrian() {
  // @@protoc_insertion_point(field_add:model.Pedestrians.Pedestrian)
  return pedestrian_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::model::Pedestrian >*
Pedestrians::mutable_pedestrian() {
  // @@protoc_insertion_point(field_mutable_list:model.Pedestrians.Pedestrian)
  return &pedestrian_;
}
inline const ::google::protobuf::RepeatedPtrField< ::model::Pedestrian >&
Pedestrians::pedestrian() const {
  // @@protoc_insertion_point(field_list:model.Pedestrians.Pedestrian)
  return pedestrian_;
}

// -------------------------------------------------------------------

// Face

// optional int64 Id = 1;
inline void Face::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Face::id() const {
  // @@protoc_insertion_point(field_get:model.Face.Id)
  return id_;
}
inline void Face::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Face.Id)
}

// optional .model.VideoMetadata Metadata = 2;
inline bool Face::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void Face::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::model::VideoMetadata& Face::metadata() const {
  // @@protoc_insertion_point(field_get:model.Face.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::model::VideoMetadata* Face::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.Face.Metadata)
  return metadata_;
}
inline ::model::VideoMetadata* Face::release_metadata() {
  // @@protoc_insertion_point(field_release:model.Face.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Face::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Face.Metadata)
}

// optional .model.CutboardImage Img = 3;
inline bool Face::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void Face::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::model::CutboardImage& Face::img() const {
  // @@protoc_insertion_point(field_get:model.Face.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::model::CutboardImage* Face::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.Face.Img)
  return img_;
}
inline ::model::CutboardImage* Face::release_img() {
  // @@protoc_insertion_point(field_release:model.Face.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void Face::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.Face.Img)
}

// optional bytes Feature = 4;
inline void Face::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Face::feature() const {
  // @@protoc_insertion_point(field_get:model.Face.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Face.Feature)
}
inline void Face::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Face.Feature)
}
inline void Face::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Face.Feature)
}
inline ::std::string* Face::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.Face.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Face::release_feature() {
  // @@protoc_insertion_point(field_release:model.Face.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.Face.Feature)
}

// -------------------------------------------------------------------

// Faces

// repeated .model.Face Face = 1;
inline int Faces::face_size() const {
  return face_.size();
}
inline void Faces::clear_face() {
  face_.Clear();
}
inline const ::model::Face& Faces::face(int index) const {
  // @@protoc_insertion_point(field_get:model.Faces.Face)
  return face_.Get(index);
}
inline ::model::Face* Faces::mutable_face(int index) {
  // @@protoc_insertion_point(field_mutable:model.Faces.Face)
  return face_.Mutable(index);
}
inline ::model::Face* Faces::add_face() {
  // @@protoc_insertion_point(field_add:model.Faces.Face)
  return face_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::model::Face >*
Faces::mutable_face() {
  // @@protoc_insertion_point(field_mutable_list:model.Faces.Face)
  return &face_;
}
inline const ::google::protobuf::RepeatedPtrField< ::model::Face >&
Faces::face() const {
  // @@protoc_insertion_point(field_list:model.Faces.Face)
  return face_;
}

// -------------------------------------------------------------------

// VideoMetadata

// optional int64 Timestamp = 1;
inline void VideoMetadata::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.Timestamp)
  return timestamp_;
}
inline void VideoMetadata::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:model.VideoMetadata.Timestamp)
}

// optional int32 Duration = 2;
inline void VideoMetadata::clear_duration() {
  duration_ = 0;
}
inline ::google::protobuf::int32 VideoMetadata::duration() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.Duration)
  return duration_;
}
inline void VideoMetadata::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:model.VideoMetadata.Duration)
}

// optional int32 SensorId = 3;
inline void VideoMetadata::clear_sensorid() {
  sensorid_ = 0;
}
inline ::google::protobuf::int32 VideoMetadata::sensorid() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.SensorId)
  return sensorid_;
}
inline void VideoMetadata::set_sensorid(::google::protobuf::int32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:model.VideoMetadata.SensorId)
}

// optional string SensorName = 4;
inline void VideoMetadata::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoMetadata::sensorname() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.SensorName)
  return sensorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMetadata::set_sensorname(const ::std::string& value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.VideoMetadata.SensorName)
}
inline void VideoMetadata::set_sensorname(const char* value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.VideoMetadata.SensorName)
}
inline void VideoMetadata::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.VideoMetadata.SensorName)
}
inline ::std::string* VideoMetadata::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:model.VideoMetadata.SensorName)
  return sensorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMetadata::release_sensorname() {
  // @@protoc_insertion_point(field_release:model.VideoMetadata.SensorName)
  
  return sensorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMetadata::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname != NULL) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:model.VideoMetadata.SensorName)
}

// optional string SensorUrl = 5;
inline void VideoMetadata::clear_sensorurl() {
  sensorurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoMetadata::sensorurl() const {
  // @@protoc_insertion_point(field_get:model.VideoMetadata.SensorUrl)
  return sensorurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMetadata::set_sensorurl(const ::std::string& value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.VideoMetadata.SensorUrl)
}
inline void VideoMetadata::set_sensorurl(const char* value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.VideoMetadata.SensorUrl)
}
inline void VideoMetadata::set_sensorurl(const char* value, size_t size) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.VideoMetadata.SensorUrl)
}
inline ::std::string* VideoMetadata::mutable_sensorurl() {
  
  // @@protoc_insertion_point(field_mutable:model.VideoMetadata.SensorUrl)
  return sensorurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMetadata::release_sensorurl() {
  // @@protoc_insertion_point(field_release:model.VideoMetadata.SensorUrl)
  
  return sensorurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMetadata::set_allocated_sensorurl(::std::string* sensorurl) {
  if (sensorurl != NULL) {
    
  } else {
    
  }
  sensorurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorurl);
  // @@protoc_insertion_point(field_set_allocated:model.VideoMetadata.SensorUrl)
}

// -------------------------------------------------------------------

// Image

// optional string Id = 1;
inline void Image::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::id() const {
  // @@protoc_insertion_point(field_get:model.Image.Id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Image.Id)
}
inline void Image::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Image.Id)
}
inline void Image::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Image.Id)
}
inline ::std::string* Image::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:model.Image.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_id() {
  // @@protoc_insertion_point(field_release:model.Image.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:model.Image.Id)
}

// optional int32 Width = 2;
inline void Image::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:model.Image.Width)
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:model.Image.Width)
}

// optional int32 Height = 3;
inline void Image::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:model.Image.Height)
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:model.Image.Height)
}

// optional bytes BinData = 4;
inline void Image::clear_bindata() {
  bindata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::bindata() const {
  // @@protoc_insertion_point(field_get:model.Image.BinData)
  return bindata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_bindata(const ::std::string& value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Image.BinData)
}
inline void Image::set_bindata(const char* value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Image.BinData)
}
inline void Image::set_bindata(const void* value, size_t size) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Image.BinData)
}
inline ::std::string* Image::mutable_bindata() {
  
  // @@protoc_insertion_point(field_mutable:model.Image.BinData)
  return bindata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_bindata() {
  // @@protoc_insertion_point(field_release:model.Image.BinData)
  
  return bindata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_bindata(::std::string* bindata) {
  if (bindata != NULL) {
    
  } else {
    
  }
  bindata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindata);
  // @@protoc_insertion_point(field_set_allocated:model.Image.BinData)
}

// -------------------------------------------------------------------

// CutboardImage

// optional .model.VideoMetadata Metadata = 1;
inline bool CutboardImage::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void CutboardImage::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::model::VideoMetadata& CutboardImage::metadata() const {
  // @@protoc_insertion_point(field_get:model.CutboardImage.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::model::VideoMetadata* CutboardImage::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.CutboardImage.Metadata)
  return metadata_;
}
inline ::model::VideoMetadata* CutboardImage::release_metadata() {
  // @@protoc_insertion_point(field_release:model.CutboardImage.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.CutboardImage.Metadata)
}

// optional .model.Cutboard Cutboard = 2;
inline bool CutboardImage::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
inline void CutboardImage::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
inline const ::model::Cutboard& CutboardImage::cutboard() const {
  // @@protoc_insertion_point(field_get:model.CutboardImage.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
inline ::model::Cutboard* CutboardImage::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:model.CutboardImage.Cutboard)
  return cutboard_;
}
inline ::model::Cutboard* CutboardImage::release_cutboard() {
  // @@protoc_insertion_point(field_release:model.CutboardImage.Cutboard)
  
  ::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_cutboard(::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.CutboardImage.Cutboard)
}

// optional .model.Image Img = 3;
inline bool CutboardImage::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void CutboardImage::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::model::Image& CutboardImage::img() const {
  // @@protoc_insertion_point(field_get:model.CutboardImage.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::model::Image* CutboardImage::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:model.CutboardImage.Img)
  return img_;
}
inline ::model::Image* CutboardImage::release_img() {
  // @@protoc_insertion_point(field_release:model.CutboardImage.Img)
  
  ::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_img(::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.CutboardImage.Img)
}

// -------------------------------------------------------------------

// Color

// optional int32 Id = 1;
inline void Color::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Color::id() const {
  // @@protoc_insertion_point(field_get:model.Color.Id)
  return id_;
}
inline void Color::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.Color.Id)
}

// optional float Confidence = 2;
inline void Color::clear_confidence() {
  confidence_ = 0;
}
inline float Color::confidence() const {
  // @@protoc_insertion_point(field_get:model.Color.Confidence)
  return confidence_;
}
inline void Color::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:model.Color.Confidence)
}

// optional string ColorName = 3;
inline void Color::clear_colorname() {
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Color::colorname() const {
  // @@protoc_insertion_point(field_get:model.Color.ColorName)
  return colorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_colorname(const ::std::string& value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Color.ColorName)
}
inline void Color::set_colorname(const char* value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Color.ColorName)
}
inline void Color::set_colorname(const char* value, size_t size) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Color.ColorName)
}
inline ::std::string* Color::mutable_colorname() {
  
  // @@protoc_insertion_point(field_mutable:model.Color.ColorName)
  return colorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Color::release_colorname() {
  // @@protoc_insertion_point(field_release:model.Color.ColorName)
  
  return colorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_allocated_colorname(::std::string* colorname) {
  if (colorname != NULL) {
    
  } else {
    
  }
  colorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colorname);
  // @@protoc_insertion_point(field_set_allocated:model.Color.ColorName)
}

// -------------------------------------------------------------------

// Cutboard

// optional uint32 X = 1;
inline void Cutboard::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::x() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.X)
  return x_;
}
inline void Cutboard::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.X)
}

// optional uint32 Y = 2;
inline void Cutboard::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::y() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.Y)
  return y_;
}
inline void Cutboard::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.Y)
}

// optional uint32 Width = 3;
inline void Cutboard::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::width() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.Width)
  return width_;
}
inline void Cutboard::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.Width)
}

// optional uint32 Height = 4;
inline void Cutboard::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::height() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.Height)
  return height_;
}
inline void Cutboard::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.Height)
}

// optional uint32 ResWidth = 5;
inline void Cutboard::clear_reswidth() {
  reswidth_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::reswidth() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.ResWidth)
  return reswidth_;
}
inline void Cutboard::set_reswidth(::google::protobuf::uint32 value) {
  
  reswidth_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.ResWidth)
}

// optional uint32 ResHeight = 6;
inline void Cutboard::clear_resheight() {
  resheight_ = 0u;
}
inline ::google::protobuf::uint32 Cutboard::resheight() const {
  // @@protoc_insertion_point(field_get:model.Cutboard.ResHeight)
  return resheight_;
}
inline void Cutboard::set_resheight(::google::protobuf::uint32 value) {
  
  resheight_ = value;
  // @@protoc_insertion_point(field_set:model.Cutboard.ResHeight)
}

// -------------------------------------------------------------------

// BaseEntity

// optional int64 Id = 1;
inline void BaseEntity::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BaseEntity::id() const {
  // @@protoc_insertion_point(field_get:model.BaseEntity.Id)
  return id_;
}
inline void BaseEntity::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.BaseEntity.Id)
}

// optional .model.VideoMetadata Metadata = 2;
inline bool BaseEntity::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void BaseEntity::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::model::VideoMetadata& BaseEntity::metadata() const {
  // @@protoc_insertion_point(field_get:model.BaseEntity.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::model::VideoMetadata* BaseEntity::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::model::VideoMetadata;
  }
  // @@protoc_insertion_point(field_mutable:model.BaseEntity.Metadata)
  return metadata_;
}
inline ::model::VideoMetadata* BaseEntity::release_metadata() {
  // @@protoc_insertion_point(field_release:model.BaseEntity.Metadata)
  
  ::model::VideoMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void BaseEntity::set_allocated_metadata(::model::VideoMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.BaseEntity.Metadata)
}

// optional .model.CutboardImage Img = 3;
inline bool BaseEntity::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void BaseEntity::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::model::CutboardImage& BaseEntity::img() const {
  // @@protoc_insertion_point(field_get:model.BaseEntity.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::model::CutboardImage* BaseEntity::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:model.BaseEntity.Img)
  return img_;
}
inline ::model::CutboardImage* BaseEntity::release_img() {
  // @@protoc_insertion_point(field_release:model.BaseEntity.Img)
  
  ::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void BaseEntity::set_allocated_img(::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:model.BaseEntity.Img)
}

// -------------------------------------------------------------------

// FeatureVector

// optional int64 Id = 1;
inline void FeatureVector::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FeatureVector::id() const {
  // @@protoc_insertion_point(field_get:model.FeatureVector.Id)
  return id_;
}
inline void FeatureVector::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:model.FeatureVector.Id)
}

// optional bytes Feature = 2;
inline void FeatureVector::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureVector::feature() const {
  // @@protoc_insertion_point(field_get:model.FeatureVector.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureVector::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.FeatureVector.Feature)
}
inline void FeatureVector::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.FeatureVector.Feature)
}
inline void FeatureVector::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.FeatureVector.Feature)
}
inline ::std::string* FeatureVector::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:model.FeatureVector.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureVector::release_feature() {
  // @@protoc_insertion_point(field_release:model.FeatureVector.Feature)
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureVector::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:model.FeatureVector.Feature)
}

// -------------------------------------------------------------------

// NullMessage

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::model::ObjType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::ObjType>() {
  return ::model::ObjType_descriptor();
}
template <> struct is_proto_enum< ::model::DataFmtType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::DataFmtType>() {
  return ::model::DataFmtType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_deepdatasingle_2eproto__INCLUDED
